SEE:
  FIXME
    /usr/share/doc/gnupg/examples/*
  http://www.spywarewarrior.com/uiuc/gpg/gpg-com-4.htm
  Hardening
    http://www.incenp.org/notes/2015/using-an-offline-gnupg-master-key.html
  > Mutt
    > https://gist.github.com/bnagy/8914f712f689cc01c267
    : https://gist.github.com/grugq/03167bed45e774551155
    : http://dev.mutt.org/trac/wiki/MuttGuide/UseGPG
  See how spoolfile located on imap:
    https://wiki.xmission.com/Hosted_Email:Mutt
  Sign network of trust public keys (SEE After Party)
    http://www.phillylinux.org/keys/terminal.html

  REF
    http://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/
    2015-10-01 [X] https://wiki.debian.org/Subkeys?action=show&redirect=subkeys
    2015-10-02 [X] https://alexcabal.com/creating-the-perfect-gpg-keypair/
    https://help.ubuntu.com/community/GnuPrivacyGuardHowto
      : SEE recipes
    https://gist.github.com/anonymous/3d928a0bcbb3ed92c454

    http://www.kixx.name/blogs/web_development/encrypt_files_passwords_to_send_securely_by_email_with_gpg
    https://www.gnupg.org/documentation/manuals/gnupg/Invoking-GPG_002dAGENT.html
    > https://wiki.archlinux.org/index.php/GnuPG#Unattended_passphrase

  [_] Advanced techniques
    | http://atom.smasher.org/gpg/
    [_] converting master key
    [_] multiple passphrases

  SSH similar system for CA (short)
    >>> https://blog.habets.se/2011/07/OpenSSH-certificates

Test
  Check if working
    pgrep gpg-agent
    gpg-connect-agent  #> bye/quit
  Try decrypt
    gpg -dq ./password.gpg

  Systemd:
    link '..' ~/.config/systemd/user/gpg-agent.service
    systemctl --user daemon-reload
    systemctl --user enable gpg-agent
    systemctl --user start gpg-agent


>> Other scenarios
  Deploy keys
    gpg --import secretkey1.asc && shred --remove secretkey1.asc
    gpg --export-secret-key -a '<ID1>!'| ssh :dst: gpg --import -
    ssh :src: "gpg --export-secret-key -a '<ID1>!'" | gpg --import -

  Publish keys (master pub, sign/enc subkeys pub, uid?)
    gpg --send-keys
    : FIND? use subkeys.pgp.net for keys with multiple subkeys?

  Keyrings
    If you really want to force it then you can export the subkeys to a
    different keyring (call gpg with --no-default-keyring and --keyring
    and import the key), delete all other subkeys and start the normal
    encryption afterwards.
    : OR Giving a subkey ID as encryption target with '!' mark
    | ERROR | I can't use local encrypt key and mail-decrypt?
    : If you have multiple encryption subkeys, gpg is said to encrypt
    : only for the most recent encryption subkey and not for all known and not
    : revoked encryption subkeys.
    --keyring file
      Add  file  to the current list of keyrings.
      : Note that this adds a keyring to the current list. If the intent
      : is to use the specified keyring alone, use --keyring along with
      : --no-default-keyring.
    --primary-keyring file
      Designate file as the primary public keyring.
      : This means that newly imported keys (via --import or keyserver
      : --recv-from) will go to this keyring.
    | ~/.gnupg/secring.gpg
      : A secret keyring as used by GnuPG versions before 2.1.
      : It is not used by GnuPG 2.1 and later.

Revocation
: One of subkeys
  Boot LiveCD + Encrypted USB drive + master.asc OR ~/.gnupg
    sudo mount /dev/sdb /mnt
    gpg --import /mnt/amerlyq.gpg-public.asc /mnt/amerlyq.gpg-private.asc
    gpg --edit-key $GPGKEY   # ALT --homedir=/mnt/.gnupg
    USE gpg> list, key 2, revkey, save

Extending:
    $ gpg --edit-key $GPGKEY
    gpg> key 1, expire, save
  Send the updated key to the keyservers
    gpg --send-key --keyserver <server> $GPGKEY

Sign others keys
  Mounted USB drive
    export GNUPGHOME=/mnt/keys/gnupg
    gpg --recv-key 0x12341234
    gpg --sign-key --ask-cert-level 0x12341234
    gpg --edit-key 0x12341234 trust
    gpg --send-key 0x12341234

Create new subkey
  Backup temporary (if you mess up) -- stay on USB!
    export GNUPGHOME=/mnt/keys/gnupg
    gpg --export        > /mnt/tmp/pub.gpg
    gpg --export-secret-keys    > /mnt/tmp/pri.gpg
    gpg --export-secret-subkeys > /mnt/tmp/sub.gpg
  Create new sign/enc
    gpg --edit-key $GPGKEY
    |gpg> addkey, addkey
  Revoke the old keys
    gpg --edit-key $GPGKEY
    : select the subkeys to revoke (watch the * in front of the subkeys)
    key 1
    key 2
    revkey
    save
    : ATTENTION: This only revoked the keys, but does not delete them: you
    : will need the old decryption key to decrypt old files.
  Import new subkeys into system
    export GNUPGHOME=/mnt/keys/gnupg
    gpg --export        > /mnt/tmp/pub.gpg
    gpg --export-secret-keys    > /mnt/tmp/pri.gpg
    gpg --export-secret-subkeys > /mnt/tmp/sub.gpg
    unset GNUPGHOME
    gpg --import-options merge-only --import /mnt/tmp/pub.gpg /mnt/tmp/sub.gpg
    : ALT -- if you need more then simple key addition:
    :: EXPL delete, else gnupg don't allow import master (and !all! its
    ::  subkeys) if master already in gpg db
    : gpg --delete-secret-key $GPGKEY
    : gpg --import /mnt/tmp/pub.gpg /mnt/tmp/sub.gpg
  Send keys
    gpg --send-key $GPGKEY

NEED master key pair when:
: Because all this done by adding a new self- or revocation signatures)
  * sign someone else's key or revoke an existing signature,
  * add a new UID or mark an existing UID as primary,
  * create a new subkey,
  * revoke an existing UID or subkey,
  * change the preferences (e.g., with setpref) on a UID,
  * change the expiration date on your master key or any of its subkey, or
  * revoke or generate a revocation certificate for the complete key.

Encrypt data
  $ gpg --recipient email@ --output doc.gpg --encrypt *.doc
  $ gpg --output doc --decrypt doc.gpg
  gpg --recipient <id(part)> --encrypt file
  echo "password" | gpg --encrypt -o ~/.acc_pass.gpg

  echo '$PASSWORD' | gpg --use-agent -e > ~/.passwd/$ACCOUNT.gpg
  set imap_pass = "`gpg --use-agent --quiet --batch -d ~/.passwd/$ACCOUNT.gpg`"

  < For read-only fs (for rw -- only if keyring is not going to change)
  read -s -p "Passwd: " pp && echo "$pp" | gpg \
    --keyserver-options no-use-temp-files --lock-never --no-verbose
    -e -a -r martin@example.com

Multi-key encryption (for several recipients)
: SEE https://www.gnupg.org/gph/en/manual.html#AEN111
  gpg --encrypt --recipient alice@m.com --recipient bob@m.com <file>
  : EXPL GPG encrypts the file once with a symmetric key, then places a
  : header identifying the target keypair and an encrypted version of the
  : symmetric key.
  : [...] When encrypted to multiple recipients, this header is placed
  : multiple times providing a uniquely encrypted version of the same
  : symmetric key for each recipient.

Config
  Reload
    echo RELOADAGENT | gpg-connect-agent
    :OR: systemctl --user reload gpg-agent

  Cache for the whole session until gpg-agent is restarted.
  : If you set up default-cache-ttl value, it will take precedence.
    /usr/lib/gnupg/gpg-preset-passphrase --preset <keygrip>
    : Where <keygrip> is taken from
      gpg -with-keygrip -K

SSH
  ssh-add ~/.ssh/git_rsa
  : Need for mutt if you don't use gpg-agent
  export GPG_AGENT_INFO=""
  : Don't use it for >v2.1, instead socket ~/.gnupg/S.gpg-agent
  : Also you don't need to launch agent, as it will be used on demand from socket

  : Keychain: ssh-agent autostart
  eval $(keychain --eval -Q --quiet id_dsa id_rsa)

  .zprofile / .bashrc
  : NOTE list of approved keys is stored in the ~/.gnupg/sshcontrol
    SSH_AUTH_SOCK=$(gpg-connect-agent 'getinfo ssh_socket_name' /bye | awk '/^D/{print $2}')
    [[ -S "$SSH_AUTH_SOCK" ]] && export SSH_AUTH_SOCK
    export GPG_TTY=$(tty)

  ssh
  : gpg-agent can be used in-place of ssh-agent (it has a compatibility mode).
  : So you can create the authentication subkey in a similar manner and use it
  : with ssh. gpgkey2ssh(1) tool can convert the specified GPG key to a format
  : suitable for authorized_keys.

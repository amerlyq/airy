Tracking dangling file descriptors of deleted files (e.g. sqlite holding tmpfiles in /var)
  ::: match myexe(1) acitivity logs to strace(1) backtraces by timestamps
  With timestamps and all forks
    $ strace -ftt -e trace=open,openat,close,unlink,unlinkat -o /tmp/strace.log -- myexe
  With backtrace and summary (profiling)
    $ strace -fttTyikC -s64 -e trace=open,openat,close,unlink,unlinkat -o /tmp/strace.log -- myexe
  Max number w/o backtrace ~10MB even for simple
    $ strace -fttT -s64 -e 'trace=!gettid,nanosleep,select,gettimeofday,clock_gettime,fcntl64,_llseek,stat64,fstat64,futex,ioctl' -o /tmp/strace.log -- myexe
    $ watch -n1 ls -l /tmp/strace.log
    $ grep -aoP '\w+(?=\()' strace.log SC H -20
    $ strace-graph strace.log
    $ strace-log-merge strace.log


Trace child process tree
  https://stackoverflow.com/questions/4053142/how-to-track-child-process-using-strace
  $ strace -qqzf -e trace=execve -e signal=none -o trace -- wiw
  $ ./strace -f -q -s 100 -o trace -p 449
  $ strace-graph ./trace
    <= |crosstool-ng|


Trace strace itself by systemtap
  https://stackoverflow.com/questions/5317261/using-ptrace-to-track-all-execve-calls-across-children
  $ stap -e 'probe syscall.ptrace {if (execname()=="strace") log(argstr)}' -c 'strace COMMAND'


Trace by audit logs (syscalls, opened files, etc.)
  IDEA: https://habr.com/ru/post/464951/
  $ sudo auditctl -a exit,always -F arch=b64 -S clock_settime -S settimeofday && date
  $ sudo ausearch -sc settimeofday --comm "chkcache_proces"


Watch consumed cpu
  $ watch -n1 sh -c "ps -e -o %cpu,pid,tid,times,comm -L | awk '\$2==$(pidof organizer)' | sort -n"


Tracing network packets (~low-level curl~)
  https://github.com/secdev/scapy

Reverse-engineering with strace :: function61.com
  https://function61.com/blog/2017/reverse-engineering-with-strace/

[_] READ strace / Re: Experience from writing trace_inputs.py
  https://sourceforge.net/p/strace/mailman/message/32129307/

#!/bin/bash -eu
set -o pipefail
# USAGE: ./$0 -fscr="./log-filter" -- make ...
# DEBUG: ./$0 -- sh -c 'echo out >&1; echo err >&2'
# ALT: { { make | stdbuf -oL -eL tee out.log; } 3>&1 1>&2 2>&3 | stdbuf -oL -eL tee err.log; } 2>&1 | stdbuf -oL -eL tee scr.log

# TODO: split script
#   * redirect stdout/stderr/both into three different files (utils) MAYBE use shell redirections instead
#     file: $ ... | ./redirect  err out both
#     util: $ ... | ./redirect  >(./flt-err > err.log) >(flt-out > out.log) >(flt-both > both.log)
#   * 'store stdout to files with log-rotate' FIND maybe "logrotate" util may do this already
# TODO: move log-related functions into |airy/log|
# NEED: combined total output before "scr" filter applied
#   e.g. if scr colorized
# NEED: raw stdout/stderr/tty output and filtered one
#   MAYBE: there is no need for filtering stdout/stderr separately?
#   => only use combined filter on output in separate perl script
#     SEE: my other filters for errors only -- can it be combined in single filter or not?

## DFL
logrotate=1
d_log=./_log
declare -A filtercmd=(
  [out]=cat  # stdout
  [err]=cat  # stderr
  [scr]=cat  # tty
)
declare -A logfile=(
  [out]=output.log
  [err]=error.log
  [scr]=screen.log
)


## Funcs
keyval(){ declare -n a=$1; local k=$2 v=$3
  if [[ ${a["$k"]+x} ]]; then a["$k"]=$v
  else IFS=$'|'; echo "Err: no such key '$k'. Use: [${!a[*]}]"; exit 2; fi
}
dump(){ local f=${logfile["$1"]} flt=${filtercmd["$1"]}
  [[ -d ${f%/*} ]] || mkdir -p "${f%/*}"
  ((logrotate)) && [[ -f $f ]] && command cp -afT --backup=t "$f"{,}
  eval "$flt" | stdbuf -oL -eL tee "$f"
}


# f="filtercmd", l=/path/to/logfile, L=logdir(for_relative)
while getopts 'of:l:L:R' o; do case $o in :|'?') die 1
;; c) cmd='f_copy'
;; f) keyval filtercmd "${OPTARG%%=*}" "${OPTARG#*=}"
;; l) keyval logfile   "${OPTARG%%=*}" "${OPTARG#*=}"
;; L) d_log=$OPTARG
;; R) logrotate=0
esac; done; shift $((OPTIND-1))

## Prepend d_log dir to each non-absolute path
for k in "${!logfile[@]}"; do f=${logfile[$k]}
  [[ $f == /* ]] || logfile[$k]=$d_log/$f
done

## Redirect stdout, stderr and combined output
{ { "$@" | dump out
  } 3>&1 1>&2 2>&3 | dump err
} 2>&1  | dump scr
# } 2>&1 | ts -s %.s | dump scr

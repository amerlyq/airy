%%%% Threads
  Debug is easier if create coredump
    http://processors.wiki.ti.com/index.php/Multithreaded_Debugging_Made_Easier_by_Forcing_Core_Dumps
  Print pthread structure (thread specific data)
    +++ http://stackoverflow.com/questions/10841219/thread-specific-data-from-linux-core-dump
    https://en.wikibooks.org/wiki/Linux_Applications_Debugging_Techniques/Deadlocks
  Mapping
    (gdb) info threads
      : 12 Thread 4398053392560 (LWP 7234) 0x0000000010005740 in xxxx ()
      : ...
    (gdb) info proc 7234 status
      > WARNING: works only on running process
  Get TLS (thread-local storage)
    http://stackoverflow.com/questions/10841219/thread-specific-data-from-linux-core-dump
  Save func arguments/buffer into file
    http://tamkovich.com/2011/03/core-dump-for-multithreading-app/


%%% Multi-threads %%%
: Use case: debugging specific thread, while controlling behavior of others.
  facilities for debugging multi-thread programs:
    - automatic notification of new threads
    - ‘thread threadno’, to switch among threads
    - ‘info threads’, to inquire about existing threads
    - thread-specific breakpoints
    - set mode for locking scheduler during execution
      (gdb) set scheduler-locking step/on/off
    others: Interrupted System Calls
  (gdb) i threads
  (gbd) b foo.cpp:13 thread 28 if x > li
  Forking -- choose which to lead
    set follow-fork-mode ask || parent/child
  In addition, catchpoints come in handy:
    catch exec
   Catchpoint works as a breakpoint. Every time a call to exec() syscall is
   detected, GDB stops. This allows you to set any breakpoint (i.e. break
   main) in the newly loaded executable before continuing. Another
   catchpoint catch fork works similarly for fork() syscall detection.
  It is especially convenient:
    when both parent and child has to be followed (set detach-on-fork off);
    when parent processes forks often loading various executables.


%%% Locked resources
Locked mutex / refcount on exit / memory leak
  2017-02-09 [X] http://kfunk.org/2014/08/29/scripting-gdb-to-execute-commands-at-particular-breakpoints/
    (gdb) break QMutex::QMutex
    (gdb) commands $bpnum  # on last set breakpoint
        silent
        backtrace 10
        continue
      end
    (gdb) set pagination off
    (gdb) set logging on gdb.log
    (gdb) run
    $ kill -STOP "$pid"  # stop when enough log, or wait until crash
    => Then analyze log by $ sort | uniq -c


%%% Memory forensic
Correlate allocated section 'load3' with thread number
  All .reg/section offset and size
    $ readelf -n core | awk '/offset/{s=strtonum($7)} /CORE/{s+=12+8;l=strtonum($2)} /NT_PRS/{printf"0x%x 0x%x\n",s,l} /CORE/{s+=l}' >! reg.sec
      # NOTE: s += 12 + 8 = sizeof(Nhdr) + aligned(int(*s))
      # NOTE:(offset): LWP=0x18 sp=0xd4 pc=0xe8 ra=0xdc
  Table offset, thread LWP, $sp -- (threads numbered order as in gdb)
    $ <reg.sec xargs -rn2 sh -euc 'f(){ echo 0x$(xxd -p -s$(($1+$2)) -l4 core); }; echo "$1" $(($(f $1 0x18))) $(f $1 0xd4)' '' |column -t >! reg.lwp.sp
  Threads stack sections
    $ readelf -a core |awk '$1=="LOAD"{print$3,$6,$2,$5}' >! all.sec
    $ awk 'FNR==NR {a[n]=strtonum($1);b[n]=a[n]+strtonum($2);p[n]=$3;q[n]=$4;n++;next} FNR!=NR{sp=strtonum($3);for(i=0;i<n;++i){if(a[i]<=sp&&sp<b[i]){printf"%d 0x%x 0x%x %s %s\n",$2,a[i],b[i],p[i],q[i];next}}}' all.sec reg.lwp.sp |column -t >! reg.lwp.sec
  Filter thread/stack with pointers to memory block :: 0x00417000 - 0x11c64000 is load3
    $ <reg.lwp.sec xargs -rn5 sh -euc 'xxd -p -g4 -c4 -s$4 -l$5 core|awk "{a=strtonum(\"0x\"\$1);if(0x00417000<=a&&a<0x11c64000){exit 1}}"||echo "$1"' ''
    $ <reg.lwp.sec xargs -rn5 sh -euc 'printf "%s " "$1"; xxd -p -g4 -c4 -s$4 -l$5 core|awk "{a=strtonum(\"0x\"\$1);if(0x00417000<=a&&a<0x11c64000){++n;if(n>=9999)exit}}END{print n}"' '' |column -t >! load3.lwp.ref
    $ cat -n load3.lwp.ref| sort -rn -k3,3 |head
  Search ptr belonging
    $ awk -vv="0x66845618" 'BEGIN{v=strtonum(v)} (strtonum($2)<v && strtonum($3)-v>=0x4)' reg.lwp.sec
    $ grep '^0x' addrs X{} awk -vv="{}" 'BEGIN{v=strtonum(v)} (strtonum($2)<v && strtonum($3)-v>=0x4) {printf"0x%08x: %s\n",v,$0}' reg.lwp.sec


%%% Filter-out
  /\v%(__%(pthread_cond_%(timed)?wait|new_sem_wait|GI_\S+)|close|query_module)\s\(/

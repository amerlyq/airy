% Debug symbols
  uClibc
    http://stackoverflow.com/questions/21049575/unable-to-get-unstripped-runtime-libs-from-buildroot
    http://stackoverflow.com/questions/10475040/gcc-g-vs-g3-gdb-flag-what-is-the-difference
    Enable debug
      $ cd ./buildroot/toolchain_build_mips/uClibc-0.9.33.2
      $ r.chroot make menuconfig
    OR $ vim .config  # = uClibc-ng-1.0.15-arm.config
     UCLIBC_EXTRA_CFLAGS="-marm -g3 -ggdb"
     DODEBUG=y  # BAD: incompatible with non-debug libs
    rebuild inside buildroot
      make -f buildroot.mk gcc-clean gcc_target-clean uclibc-clean
      make -f buildroot.mk uclibc-menuconfig  # add -g3
      make -f buildroot.mk gcc gcc_target uclibc
  Add symbols to libs (WARN: incomplete)
    ++ REF: https://sourceware.org/gdb/wiki/How%20gdb%20loads%20symbol%20files
    ++ Add all sections (custom script)
      http://stackoverflow.com/questions/33049201/gdb-add-symbol-file-all-sections-and-load-address
    Load //*.debug from dir
      set debug-file-directory debug:root/lib/.debug
      NOTE: must set link to work $ objcopy --add-gnu-debuglink=foo.debug foo
      https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
      https://www-zeuthen.desy.de/unix/unixguide/infohtml/gdb/Separate-Debug-Files.html
      ++ https://www.technovelty.org/code/separate-debug-info.html
    Convert debug libs to symbol files
      $ ls X /opt/mips-unknown-linux-uclibc/bin/mips-linux-objcopy --only-keep-debug
      http://stackoverflow.com/questions/866721/how-to-generate-gcc-debug-symbol-outside-the-build-target
      ++ https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Debugging_with_gdb/separate-debug-files.html
      https://www.chemie.fu-berlin.de/chemnet/use/info/gdb/gdb_13.html
    Fix links to symbols
      $ find . -xtype l -exec bash -c 'v=$(readlink $1); ln -svnf "${v%.so}.debug" "$1"' '' {} \;
  Embed custom user symbols into ELF
    https://github.com/wapiflapi/wsym
  ELF Structure
    https://blogs.oracle.com/ali/entry/inside_elf_symbol_tables
    https://www.embeddedrelated.com/showarticle/900.php
    REF:(PIE): https://eklitzke.org/position-independent-executables

% Noise
  Disable copyright
    # Regretfully -- no option exists/possible, only cmdline
    $ gdb -q
    $ alias gdb='gdb -q'
    $ ./gdb
      #!/bin/sh -eu
      exec /path/to/cross/gdb -q "$@"
  Disable irritating "press <space> for more"
    =>_ you have scrollback
    # NOTE: no need when running with '-batch'
    (gdb) set pagination off
    OR (gdb) set height 0
  Disable long listing of threads: [New LWP 9107] ...
    =>_ list on demand by '(gdb) i th'
    (gdb) set print thread-events off
  FIX:(when --with-python): missing python modules
    # Python Exception <type 'exceptions.NameError'> Installation error: gdb.execute_unwinders function is missing:
    # Python Exception <type 'exceptions.ImportError'> No module named gdb.frames:
    (gdb) set data-directory /path/to/buildroot/toolchain_build_*/gdbhost-*/gdb


% History
  Command
    (gdb) set history filename ~/.cache/gdb_history
    (gdb) set history save on
    (gdb) show history
    (gdb) show commands

  Values
   * printed by the 'print' command
    (gdb) p $sp
    (gdb) show values
      $1 = 0x7f4444883f
    (gdb) x/x $1

  Convenience vars
   + for your own purposes
   - BUT: regretfully can't be used anywhere
    (gdb) set $tbl = *table_ptr->(*(char*)name+12))
    (gdb) show conv


% Startup order
https://sourceware.org/gdb/onlinedocs/gdb/Startup.html#Startup
  * /etc/gdb/gdbinit
  * ~/.gdbinit
  * $ -iex 'pre-cmd' -ix 'pre-script'
  * ./.gdbinit  # NEED: 'set auto-load local-gdbinit'
  * python/guile extensions
  * $ -ex 'post-cmd' -x 'post-script'
  * Reads the command history recorded in the history file


% Pass VAR to $SHELL
  (gdb) set $val = 2
  (gdb) eval "shell echo %d", $val
  (gdb) python gdb.execute("shell echo " + str(gdb.parse_and_eval("$val")))
  (gdb) guile (use-modules (gdb))(value->integer (parse-and-eval "$val"))


% Piping
| show logging                    | Show the current values of the logging settings.
| set logging [on|off]            | Enable/Disable at all
| set logging file <file>         | Name of the current logfile (default: gdb.txt)
| set logging overwrite [on|off]  | To overwrite logfile each time (default: append)
| set logging redirect [on|off]   | Log only to logfile (default: both terminal and logfile)

  vals: gdb -> python -> gdb
    (gdb) python gdb.execute("set $y=\"" + os.uname()[4] + "\"")

  cmds: shell -> gdb -> shell
    $ vim ./.gdbinit  # make setup for cross-compile
    $ printf 'set logging on /tmp/gdb.log\n%s\n' "bt 10" > script
    $ gdb -batch -x script file core
    ALT: $ gdb -batch -ex 'set logging on /tmp/gdb.log' -ex 'bt 10' file core

  args: gdb -> shell -> gdb
    (gdb) eval "shell ./filter %d > ./callback", $sp
    (gdb) source ./callback
      # set $ret = 0x....

  bins: gdb -> shell -> gdb
    (gdb) dump memory dump $pc-0x100 $pc
    (gdb) !./filter dump | xxd ... | sed/awk/perl ... > ./callback
    (gdb) source ./callback


% Call any function
  = all functions available to the debugger
  ! program is running and in a sane state

  E.G. print to stdout
    (gdb) call (void)puts("hello")
  Print IPv4 value:
    (gdb) p (char*)inet_ntoa(&my_ip4_addr)
  Print IPv6 value:
    (gdb) p (void*)malloc(64)
    (gdb) p (char*)inet_ntop(10,&my_ip6_addr,$1,64)


% Compare values
  http://stackoverflow.com/questions/7423577/how-to-compare-a-stored-string-variable-in-gdb
  (gdb) p $_streq($x, "hello")


% Env vars (python only)
  http://stackoverflow.com/questions/9814185/how-to-access-environment-variables-inside-gdbinit-and-inside-gdb-itself
  Set ENV from expr inside gdb
    http://stackoverflow.com/questions/34726206/set-environment-variable-in-gdb-from-output-of-command


% Repl
  shell (interactive) in $cwd
    (gdb) !
  edit - compile - test
    (gdb) edit
    (gdb) shell gcc crash.c -o crash -gstabs+
    (gdb) run
  misc
    (gdb) define command ... end  | define user command
    (gdb) <CR>                    | repeat last command
    (gdb) shell command args      | execute shell command
    (gdb) source file             | load gdb commands from file
    (gdb) quit                    | quit gdb
    (gdb) ESC-CTRL-J              | switch to vi edit mode from emacs edit mode


% Short paths in bt
  Convenience variables don't work, only raw paths
    (gdb) set $exe = "/path/to/pr"
    (gdb) file $exe
  Use symlinks and access from cfg by rel paths (run gdb from there)
    $ cd /tmp/gdb
    $ ln -vsfT /path/to/pr exe
    $ gdb
    (gdb) file exe
  Or course, all necessary dirs and even gdb also can be symlinks
    $ ./gdb
  NOTE: spaces in filenames supported for >~v7.0 (beside REGR in v7.4)
    (gdb) file "ex e"  # OR 'ex e'
  ALT: replace paths afterwards
    set logging on bt.cfg
    bt
    set logging off
    shell sed -i 's|$sysroot||g' bt.cfg


% Probes SystemTap
  REF https://sourceware.org/gdb/onlinedocs/gdb/Static-Probe-Points.html
  VIZ http://blog.sergiodj.net/tag/systemtap/
    TUT http://blog.sergiodj.net/post/2012-03-29-gdb-and-systemtap-probes-part-1/

%%% Print Manipulations
  Basically you can query the registers by prepending a dollar sign, e.g.
    p $ecx
  or use them in expressions:
    p $esi + $ebx + 4
  You can dereference the memory using the * operator (like in C):
    p *$ecx
  will print the contents of the memory location pointed to by ecx.
  While you can't directly type in assembly code, you can translate the expression into something more high-level, like this:
    p $eax - ($esi * $ebx)
  Also, you can convert to various types using casts to C data-types, e.g.
    p (char)$ecx
  would print the contents of ecx as a character.
    p *(char**)$ecx
  which would interpret ecx as a pointer to char*, which you then dereference. So you'd see the contents of the string at the address contained in ecx.
  This is just the tip of the iceberg though. gdb is very powerful tool. You might also find the display command useful. It's basically the same as print, except it will repeat the print command whenever the code is stopped (useful with breakpoints). You can examine most registers using info registers, or info all-registers if you're masochistic.
  You can also change the contents of registers, using set:
    set $eax = 20


%%% Breakpoints from sourcecode %%%
It's a one-line in any Unix, try:
    ```
    #include <signal.h>
    #define BREAK_HERE raise(SIGINT)
    int main(int argc, char *argv[]){
    int i,j;
      for(j=0,i=0;i<20;i++) {
        j+=i;
        if(j>20) BREAK_HERE;
      }
    return 0;
    }
  ```
  > (gdb) run
   Program received signal SIGINT, Interrupt.
   0x705b28a0 in kill () from /usr/lib/libc.2
  ...you are now in the debugger right after the BREAK_HERE statement
  You will have to step twice to come back out of the raise() call into your code.


%%% Signals %%%
  $ man 7 signal
  Print a table of all the signals and how gdb handle each one.
    i handle
    info signals        print signal setup
    handle {signo} {actions}    set debugger actions for signal
     handle INT [no]print       [don't] print message when signal occurs
     handle INT [no]stop        [don't] stop program when signal occurs
     handle INT [no]pass    pass signal to program [only to debugger]
    signal <signo|0>        continue and send [no] signal to program


%%% Short-living programs %%%
  Main remote term
    ./prg -a -b & kill -STOP $! && echo $! > /tmp/dbgpid
  Host
    gdb -q -x /tmp/gdbrc ./prg -p $(cat /tmp/dbgpid)
    (gdb) ...
    (gdb) detach
  New remote term
    strace -p $(cat /tmp/dbgpid)
  Main remote term
    kill -CONT $(cat /tmp/dbgpid)

  Attach w/o influence on environment:
  :NOTE: You don't need 'set follow-fork-mode child'
  :WARNING: Don't use 'gdb -q -ex 'source /usr/local/peda/peda.py'
  : -- (or breakpoints will not work)
    ./prg -a -b & kill -STOP $! && gdb -q ./prg -p $!
    (gdb) b *main
    < then twice continue to skip SIGSTOP and once more to jump to main()


%%% Remote debugging %%%
  https://sourceware.org/gdb/onlinedocs/gdb/Server.html
   - GDB runs on one machine (host) and the program being debugged
     (exe.verXYZ.stripped ) runs on another (target).
   - GDB communicates via Serial or TCP/IP.
   - Host and target: exactly match between the executables and libraries,
     with one exception: stripped on the target.
  Connect gdb to code sources in different place
    (gdb) set substitute-path /usr/src/mnt/cross ""
    (gdb) dir /your/path/verXYZ
  Remote (10.10.0.225)
    $ gdbserver :9999 program_stripped
    $ ./gdbserver :9999 -attach <pid>
  Host
    $ gdb program
    (gdb) handle SIGTRAP nostop noprint pass
     to avoid pausing when launching the threads
    (gdb) target remote 10.10.0.225:9999
  > Android (cool features)
    http://www.kandroid.org/online-pdk/guide/debugging_gdb.html


%%% Examining stack frames
If you're stopped at a breakpoint or at an error, you may also want to examine
the state of stack frames further back in the calling sequence. You can use
the up and down commands for this.

### Stack ###
  info locals      print automatic variables in frame
  info args         print function parameters
| bt    | stack backtrace
| f     |frame | show current execution position
  How to know where you are (file, next execution line)?
    (gdb) f
  How to find out why your program stopped?
    (gdb) i prog
| up    | move up stack trace (from func to its caller -- till main)
 (gdb) up
 #1  0x08048441 in main (argc=2, argv=0xffd9add4) at reassemble.c:28
 28        buggy_function ();
| down  | move down stack trace (from func to its callee -- away from main)
 (gdb) down
 #0  0x080483f1 in buggy_function () at reassemble.c:20
 20        int len = strlen (s);

The commands above are really helpful if you're stuck at a segfault and want
to know the arguments and local vars of the faulting function's caller (or
that function's caller, etc.)


%%% Checkpoint -- a snapshot of a programâ€™s state
  BAD: not available for most 'gdb' builds
    (gdb) checkpoint
    (gdb) i checkpoint
    (gdb) restart checkpoint-id

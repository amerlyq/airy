Install
  http://www.unixmen.com/install-mariadb-arch-linuxmanjaro/
  https://wiki.archlinux.org/index.php/MySQL
  The sqlite3_analyzer.exe Utility Program
    https://www.sqlite.org/sqlanalyze.html

REF
  https://mariadb.com/kb/en/sql-99/
  https://www.digitalocean.com/community/tutorials/how-to-create-and-manage-databases-in-mysql-and-mariadb-on-a-cloud-server

READ
  https://corte.si/posts/code/farewell-to-orms.html
    > BAD: map sql tbls on objs
    > BET: use simple lang to generate tbls
  NOTE: flag SQLITE_OPEN_EXCLUSIVE is impossible, unless you use VFS
    https://mijailovic.net/2017/08/27/sqlite-adventures/
  WARN: "create [table]" i.e. .schema can't contain bound values at all !!
    RQ: http://sqlite.1065341.n5.nabble.com/Crash-when-binding-default-column-value-td78200.html
      ~~ parser could render it into text and insert that value literally, but at the moment it does not
      <= schema is stored as the text of the create statements
        --> value of bound VAR must be available each time the ~constraint~ is parsed
    ::: if your really-really need substitution, use text extrapolation sqlite3_mprintf():
       char *zSql = sqlite3_mprintf("CREATE TABLE t1(a, b DEFAULT(%Q))", zStringFromUser);
       sqlite3_exec(db, zSql, 0, 0, 0);
       sqlite3_free(zSql);


LIOR
  sqlite console processing commands
    https://sqlite.org/cli.html
  TUT: https://www.thegeekstuff.com/2012/09/sqlite-command-examples/
    | .database
  |aur/sphinx-beta| 2.3.2-1 (+0 0.00%)
    Free open-source SQL full-text search engine
  DEBUG:(explain|query plan):
    | explain query plan select * from empdept;
    | explain select empid,strftime('%d-%m-%Y %w %W',updatedon) from employee;
  get schema
    $ sqlite3 test.db .schema > schema.sql
  List of columns
    | PRAGMA table_info(mytable);
    | .schema mytable
    | SELECT name, sql FROM sqlite_master WHERE type='table' AND name='mytable';  # BAD: you must parse SQL by regex


Copy table into another db
  oneliner
    $ sqlite3 old.db ".dump mytable" | sqlite3 new.db
  interactive
    $ sqlite3 old.db
    | .output table_dump.sql
    | .dump table_name
    | .quit
    $ sqlite3 new.db
    | .read table_dump.sql
  fine-tuned import "new <- old"
    $ sqlite3 new.db
    | ATTACH old.db as src
    | .databases
    # main: /path/to/new.db
    # src: /path/to/old.db
    | .tables
    Create table from table
      # BAD: can't rename/remap column names
      | CREATE TABLE mytable AS SELECT id, category FROM src.mytable;
    Import table into created table
      # WARN: order of columns may become messed up -- USE prescribed order instead
      | CREATE TABLE mytable ( ... , ... );
      | INSERT INTO mytable SELECT * FROM src.mytable;
      | INSERT INTO main.mytable(col1, col2) SELECT col1, col2 FROM src.mytable;


USAGE:
  augment table till :NNN entries
    WITH RECURSIVE
        remaining(x) AS (SELECT 0 UNION ALL SELECT (:NNN - count(*)) from mytable),
        placeholders(x) AS (SELECT 0 UNION ALL SELECT x FROM placeholders LIMIT (SELECT max(x) FROM remaining))
      INSERT INTO mytable(mycolumn) SELECT x FROM placeholders;

#!/bin/bash -e
cd $(dirname $(readlink -m ${0}))
[[ -L ~/.shell ]] || ln -svT "$PWD/cfg/shell" ~/.shell
source ~/.shell/func.d/cfgsetup
echo "$THEME" > "${CURR_CACHE?No}/theme"

# ======================================================================
for n in {0..15}; do declare C${n}=$(tput setaf ${n:?}); done && CR=$(tput sgr0)
header(){ printf "\n$(tput setaf ${2:-1})>>> %s <<<$(tput sgr0)\n" "$1"; }
pretty() { sed -r "s|/home/$(whoami)|\~|g
              s|\~/\S+/cfg/||g;  />>>/!s|^|  |g
        /^>>> /s//\n$C2\[/g; / <<<$/s//\]$CR/g
    /(C|W):\s.*/s//$C13&$CR/; /(N):\s.*/s//$C6&$CR/
        /.*\s-> L\s.*/s//$C4&$CR/; /.*\s-> C\s.*/s//$C3&$CR/;
            /\<(E|Err|ERR):\s.*/s//$C1&$CR/
";}
# ======================================================================
if cfgOpt i && cfgOpt u; then
    if distro arch; then
        sudo pacman -Syu --ignore=firefox
        echo "ERR: firefox is frozen in pacman" | pretty
        # OR: /etc/pacman.conf: IgnorePkg=firefox ; IgnoreGroup=core
    elif distro ubuntu; then
        sudo apt-get install gawk
        echo "sudo apt-get update && sudo apt-get upgrade"
    fi
fi
# ======================================================================
## Populate sensible configs
if [[ -f ../erian/setup ]]; then
    header "Erian private data"
    ../erian/setup "$ARGS" | pretty
fi

# ======================================================================
## Setup all configs (private data must be initialized already)
header "Airy cfgs"
source ~/.shell/profile
link "$PWD/bin" ~/.bin
if cfgOpt u; then opts='-u'; fi
if cfgOpt s; then PKG_LIST=( ${ARGS[@]} ); PKG_SKIP=( ); fi
echo "LIST: ${PKG_LIST[@]}"
echo "SKIP: ${PKG_SKIP[@]}"

frgx(){ echo "-regex '.*\\b$(sed 's/\s\+/\\|/g' <<< "$@")\\b.*'"; }
filter_find() {
    local choosen="-exec test -f '{}/install' -o -f '{}/setup' ';'"
    local regected="$(frgx "${PKG_SKIP[@]}")"
    for y in "${PKG_LIST[@]}"; do
        eval find cfg -type d $(frgx $y) $choosen \! $regected -print
    done
}

# Caching the active modules list
mods="${CURR_CACHE?No}/modules"
[[ -f "$mods" ]] || filter_find > "$mods"

run(){ [[ ! -f "$1" ]] || "$1" ${@:1}; }
while read d; do echo ">>> $d <<<"
    ! cfgOpt i || run "$d/install" $opts
    run "$d/setup" $opts
done < "$mods" | pretty

term_pref="$(has_pr st && echo st || has_pr urxvt && echo urxvt || echo xterm)"
mkdef x-terminal-emulator $(which $term_pref)
# ======================================================================

header "DONE"
if cfgOpt u; then i3-msg restart </dev/tty >/dev/null 2>&1 ||: ; fi

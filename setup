#!/bin/bash -e
cd "$(readlink -m "${0%/*}")"
[[ -L ~/.shell ]] || ln -svT "$PWD/cfg/shell" ~/.shell
source ~/.shell/func.d/cfgsetup
mkdir -vp "${CURR_DIR_CACHE:?}"
echo "$THEME" > "$CURR_DIR_CACHE/theme"
queue="${TMPDIR:-/tmp}/mods_installing"
mods="$CURR_DIR_CACHE/mods/mods" && mkdir -p "${mods%/*}"
[[ -L ~/.bin ]] || ln -svT "$PWD/bin" ~/.bin
[[ :$PATH: == *:$HOME/.bin:* ]] || export PATH=$HOME/.bin:$PATH

# CHECK: some modules aren't installed (kedi has qute/install, but neo -- not)
#   -- By SSH them also not visible
# mpd 'setup' wasn't launched at all
# NEED: log last run into file ~/.cache/airy/mods/setup.log
# TODO: ./setup -U -- do only ./update w/o ./setup
# TRY:ALT:(my setup) -- dot mgmt by SEE https://github.com/thoughtbot/rcm

### Colorize output ====================================================
for n in {0..15}; do declare C${n}=$(tput setaf ${n:?}); done && CR=$(tput sgr0)
header(){ printf "\n$C2>>> %s <<<$CR\n" "$1"; }
pretty() { sed -r "
  s|/home/$(whoami)|\~|g
  s|\~/\S+/cfg/||g
  />>>/!s|^|  |g
  /^>>> \~\/aura\//s//\n$C9\[/g
  /^>>> /s//\n$C2\[/g
  / <<<$/s//\]$CR/g
  /^\s\s\(.*\)$/s//$C10&$CR/
  /(C|W|Fix):\s.*/s//$C13&$CR/
  /(I|N):\s.*/s//$C6&$CR/
  /.*\s(-> L\s|(::\/|\*\s).*->).*/s//$C4&$CR/
  /~\/\.config\/systemd\/user\//s///g
  /^(\s*)Created symlink (from )?(.*) (to|â†’) (.*)\.$/s//\1@@-\3 -> \5/
  /^\s*(-> @\s|@@-.*\s->\s).*/s//$C9&$CR/
  /.*\s-> C\s.*/s//$C3&$CR/
  /\<(E|Err|Wrn|ERR):\s.*/s//$C1&$CR/
";}

# THINK:USE: exec > >(pretty)  (BUT: pacman -Syu output, jobs, etc?)
exec > >(tee ~/.cache/airy/mods/setup.log | pretty)

### Prepare state ======================================================
if [[ -z $DISPLAY ]]; then  # Use host xserver if SSH
    export DISPLAY=$(xauth list | sed -rn '1s/^[^:]*(:[0-9]+).*/\1/p')
fi
if cfgOpt r && [[ -f $mods ]]; then
    rm -vf "$queue"
    cp -vf --backup=numbered "$mods" "$mods" && rm "$mods"
fi

started_anew(){ cfgOpt u && ((!$#)) && [[ ! -f $queue ]]; }
if started_anew "$@"; then
    # THINK:USE: it's own key '-y/-p' instead of combo 'iu' ?
    cfgOpt i && ./update >/dev/tty
    # BAD: if symlinks will be always deleted, r.xorg will be never used in core/xorg
    cfgOpt f && { echo "N: clean r.* symlinks"; rm -rf ~/.cache/airy/bin/*; }
    { echo "N: clean systemd user units"; rm -rf ~/.config/systemd/user/*; }
fi

### Setup all configs ==================================================
# NOTE: private data must be initialized already
prf=${CURR_DIR_CACHE:?}/profile  # Populate private env
[[ -f $prf ]] && source "$prf" || echo "Wrn: not found '$prf'"

frgx(){ local patt="\\b$*\\b"
    [[ "$*" =~ ^/$ ]] && patt="cfg" ||:
    [[ "$*" =~ ^/.+$ ]] && patt="cfg$patt" || patt=".*$patt"
    [[ "$*" =~ ^.+/$ ]] && patt="${patt}.*"|| patt="$patt\$"
    echo "$patt"
}
filter_find() { local accept regect
    # Source all manually linked mods from private repos
    (($#)) || find -L "${CURR_DIR_CACHE:?}/mods" -type d \
        -exec test -f '{}/install' -o -f '{}/setup' ';' \
        -printf "%p\n"

    for n in "${PKG_SKIP[@]}"; do regect+="\\|$(frgx $n)"; done
    for y in "${PKG_LIST[@]}"; do accept=$(frgx $y)
        find cfg -type d -regex "$accept" \
            -exec test -f '{}/install' -o -f '{}/setup' ';' \
            \! -regex "${regect:2}" -printf "$PWD/%p\n"
    done
}

# USAGE:(modules) ./setup [-s <exc1>].. inc1..
PKG_SKIP+=( "${CFG_S[@]}" )
# ENH: make strictly PKG_SKIP=( "${CFG_S[@]}" )
#   if all $@ are concrete modules (don't end in '/')
if (($#)) || cfgOpt s; then
    ((!$#)) || PKG_LIST=( "$@" )
    filter_find "$@" > "$queue"
else
    # Caching the list of modules activated in profile
    [[ -f "$mods"  ]] || filter_find > "$mods"
    [[ -f "$queue" ]] || cp -vT "$mods" "$queue"
fi

### Mods ===============================================================
# FIXME: check wrong entries in PKG_LIST/SKIP (like mistake with 'browsers')
# EXPL: -m (in main 'setup') forces single thread execution
run(){ if [[ -f $1 ]]; then "$@" $(cfgOpt m || echo -m); else echo "(no ${1##*/})"; fi; }

# Mods statistics
header "Airy cfgs"
printf "${C15}LIST:$C12( %s )$CR\n" "${PKG_LIST[*]}"
printf "${C15}SKIP:$C12( %s )$CR\n" "${PKG_SKIP[*]}"
printf "${C13}NMOD:  $C9=%d$CR\n" "$(wc -l < "$queue")"

while read d; do echo ">>> $d <<<"
    # BUG: some packages (like gcc-multilib) aren't replaced even with -u)
    if cfgOpt i; then run "$d/install" $(cfgOpt f && echo -u); fi
    run "$d/setup" $(cfgOpt u && echo -u)
    if cfgOpt U; then run "$d/update" $(cfgOpt u && echo -u); fi
    sed -i '1d' "$queue"
# EXPL: copy $queue content to be not affected by 'sed'
done <<< "$(<"$queue")"
rm "$queue"

### Post-install =======================================================
if [[ $(jobs -p) ]]; then
    header "Waiting jobs to complete"
    jobs -l
    wait
fi
header "DONE"

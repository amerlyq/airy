Between lines:
	> copyq read {0,1}
	awk ' $1 == "secondmatch" {print_me = 0}
	  print_me {print}
	  $1 == "firstmatch {print_me = 1} '
	sed '1,/firstmatch/d;/secondmatch/,$d'
	sed -n '/RCS file:/ !{H;d}; /RCS file:/ {x; /conflict/p}; $ {x; /conflict/p}' input.txt
	sed -n '$ba; /RCS file:/ba; H; d; :a; x; /conflict/p' input.txt

	sed -n '/RCS file:/,/conflicts during merge /p' INPUT.txt
Your sed command is starting to output whenever it sees 'RCS file' and stops
when it sees the 'conflicts' marker. So it pretty much outputs everything.
It's possible to do what you want with sed, but it's complicated. Awk is much
simpler:
	awk -v RS= '/conflicts/ {print $0}' INPUT.txt
Use awk's notion of records with a blank line separating them, and essentially
grep each record. So this doesn't print lines between two patterns, rather it
prints each block of lines that matches a particular pattern.


// -------------

awk '/pattern/{p=1;print;next} p&&/^##/{p=0};p' file

take the "Screenshot" as example:

kent$  awk '/^## Screenshot/{p=1;print;next} p&&/^##/{p=0};p' file
## Screenshots ##

1. line 1
2. line 2
3. line 3
4. line 4

EDIT add explanation

awk '/^## Screenshot/{p=1;print;next} : if match pattern, set p=1,print the line,read next line,(stop processing following scripts)
p&&/^##/{p=0}                         : if p==1 and match /##/ again (next section), set p=0
;p' file                              : if p==1, print the line

sed only

sed -n '/## Screensh/,/##/{/Scree/{p;n};/##/{q};p}' file

EDIT2 add explanation to sed cmd

-n                 -> not print
'/## Screen/, /##/ -> match range, I guess you knew it already
{                  -> if in this range
	/Scree/        -> and line matches /Screenshot/
		{p;n};     -> do print line, and read next row (skip doing rest processing)
	/##/           -> if line matches "##"
		q;         -> quit, we have done all printing
	p              -> if we come to here, print the line
}


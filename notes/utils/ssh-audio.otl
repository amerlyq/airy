Stream:
	From camera
		vlc v4l2:///dev/video0
		cvlc v4l2:// :v4l2-dev=/dev/video0 :v4l2-adev=/dev/dsp :v4l2-standard=0 :sout="#transcode{vcodec=mp4v,vb=800,scale=1,acodec=mpga,ab=128, channels=2}:duplicate{dst=std{access=http,mux=ts,dst=localhost:9091/stream.mp4}}"
	From screen
		vlc screen://
		DISPLAY=:0 cvlc screen:// :screen-fps=15.000000 :live-caching=300 :sout="#transcode{vcodec=h264,vb=800,scale=1,acodec=mpga,ab=128, channels=2,samplerate=44100}:duplicate{dst=std{access=http,mux=ts,dst=localhost:9091/stream.mp4}}"
	Show
		ssh -L 9091:localhost:9091 lok
		vlc http://localhost:9091/stream.mp4

	Show text on the host
		 Idea: use DISPLAY=:0 before commands like gvim "text"
	Show your's X apps, launched from specified terminal onto host workstation
		http://superuser.com/questions/340304/ssh-launch-gui-programs-on-remote-screen-not-x-display
		 Idea: use DISPLAY=<workstation-ip>:0

	Full-setup
	 http://xmodulo.com/live-stream-video-webcam-linux.html
		 cvlc v4l2:///dev/video0 :v4l2-standard= :input-slave=alsa://hw:0,0 :live-caching=300 :sout="#transcode{vcodec=WMV2,vb=800,scale=1,acodec=wma2,ab=128,channels=2,samplerate=44100}:http{dst=:8080/stream.wmv}"
		;; or duplicate{dst=udp{mux=ts,dst=173.0.4.9:1234},dst=display} :sout-keep

#!/bin/bash
cvlc screen:// \
--screen-width 1576 \
--screen-height 886 \
--screen-fps 5 \
--screen-caching 200 \
--screen-top 75 \
-v input_stream \
--sout='#duplicate{ dst="transcode{ scale=1, width=630, height=354, venc=x264{ keyint=60 }, codec=h264, vb=600, acodec=mp4a, ab=32, channels=2, samplerate=22050 } :rtp{dst=127.0.0.1,port=1234,sdp=file:///tmp/vlc.sdp} "}' \
--sout-transcode-threads=2 &

Many examples
	https://trac.ffmpeg.org/wiki/StreamingGuide
	http://superuser.com/questions/632054/stream-multiple-displays-using-one-vlc-instance

Verify
	To verify that VLC is running correctly at TCP port 8080, run the following command, and look for VLC.
	>$ sudo netstat -nap | grep 8080
	: tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      11959/vlc
	: tcp6       0      0 :::8080                 :::*                    LISTEN      11959/vlc

TMPFILE="/tmp/$RANDOM$RANDOM$RANDOM$RANDOM$RANDOM" && arecord -d 1 -t raw -f cd -q | base64 > $TMPFILE && pwgen -ys 12 12 -H $TMPFILE $@ && rm $TMPFILE
2014-06-09 16:28:41
User: juliohm
Functions: arecord cd rm
Tags: password random

True random passwords using your microphone noise as seed

Generate a truly random password using noise from your microphone to seed the RNG. This will spit out 12 password with 12 characters each, but you can save this into a bash script and replace 'pwgen -ys 12 12' with 'pwgen $@' so you can pass any paramters to pwgen as you would normally do.
Show sample output | Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
arecord -q -f cd -d 1 recvol.wav;sox recvol.wav -n stat 2>&1|grep RMS|grep amplitude|cut -d"." -f2|cut -c 1-2>recvol;echo $((`cat recvol`+1))>recvol;rec -t wav - silence 1 0.1 `cat recvol` -1 1.0 `cat recvol`%|lame -s 44.1 -a -v - >record.mp3
2014-02-27 23:23:55
User: geaplanet
Functions: arecord cd cut echo grep stat

Spy audio, it only records if detects a sound or noise

It find out the mic recording level at the moment of run the command and if a noise level is higher it starts to record an mp3 file. The resulting file will have only the sounds not the silences.
Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
port=3333;card=0;subdevice=0;arecord -D hw:${card},${subdevice} -f S16_LE -c2|nc -l $port
2013-12-30 02:41:06
User: Evidlo
Functions: arecord

Piping Microphone Audio Over Netcat

Send microphone audio to another computer using netcat and arecord.

Connect to the stream using "nc [other ip] 3333|aplay"

You can set up two-way communication by piping audio the reverse direction on another port:

Machine #1:
arecord -D hw:0,0 -f S16_LE -c2|nc -l 3333 &;nc -l 3334|aplay

Machine #2:
$ip=[machine1_ip];arecord -D hw:0,0 -f S16_LE -c2|nc $ip 3334 &;nc $ip 3333|aplay
Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
arecord|aplay
2012-06-24 17:45:40
User: dzup
Functions: arecord
Tags: pulseaudio pactl
-
Pulseaudio: play line-in through your speakers
Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
ssh USER@REMOTESYSTEM arecord - | aplay -
2011-01-31 16:49:45
User: mu_mind
Functions: aplay arecord ssh

eavesdrop

Record off the microphone on a remote computer and listen to it live through your speakers locally.
Show sample output | Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
screencast() { arecord -R 1000 -f cd -t wav $1.wav & RECPID=$!; echo "Starting screencast in new shell. Exit subshell to quit."; script -t 2> $1.timing -a $1.session; kill $RECPID; }
2011-01-20 14:35:47
User: bartonski
Functions: arecord cd echo kill script

create screencast (record text and audio simultaneously) using 'script' and 'arecord'

This shell function takes a single argument, which is used as the base name of the .wav, .timing and .session files created. To create a screencast:
screencast test

type and talk ...

then type 'exit' or to exit the screencast.

test.wav will contain the audio from your screencast.

test.session will contain text and control characters needed to paint the screen

test.timing will contain timing information needed to synch individual keystrokes in test.session with the audio.

to play back:
aplay test.wav & scriptreplay test.{timing,session}

NOTE: because the shell function uses the variable "$!", and bash likes to expand '!' during history expansion, you will need to turn off bash's history before you enter the shell function.

This can be achieved using the command
set +H
Comments (0) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
arecord -f dat | ssh -C user@host aplay -f dat
2010-02-18 06:00:33
User: drinkcat
Functions: aplay arecord ssh

output your microphone to a remote computer's speaker
Comments (1) | Add to favourites | Report as malicious | Submit alternative | Report as a duplicate
arecord -q -f cd -r 44100 -c2 -t raw | lame -S -x -h -b 128 - `date +%Y%m%d%H%M`.mp3
2009-09-25 05:32:52
User: oracular
Functions: arecord cd
Tags: mp3 lame arecord mic microphone

Record microphone input and output to date stamped mp3 file

record audio notes or meetings

requires arecord and lame

run mp3gain on the resulting file to increase the volume / quality

ctrl-c to stop recording

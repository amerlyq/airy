Keys
	Для смены/создания пароля закрытого ключа RSA выполните следующую команду:
		ssh-keygen -f ~/.ssh/id_rsa -p
	Send key to remote-server
		ssh-copy-id -i ~/.ssh/id_ecdsa.pub -p 221 user@remote-server.org
	man ssh_config 5

PIPEing
	Copy file
		Compressed
			tar zcf - stuff | ssh user@server 'tar zxf -'
			ssh user@server 'tar zcf - stuff' | tar zxf -
		Leaving tarball
			tar zcf - stuff | ssh user@server 'cat - > stuff.tar.gz'
		Run local script remotely
			ssh user@server 'bash -s' < script.sh
		Play sound remotely
			ssh user@server 'mpg321 -' < sound.mp3
Audio
	sox Klaxon.mp3 -t wav - |ssh thelab@company.com paplay
	ssh lok 'dd bs=1k if=/dev/audio' > /dev/audio
	 But there are no /dev/audio!
		If your computer uses PulseAudio (Ubuntu does), run the program via
		padsp: padsp yourprogram It will intercept attempts to open
		/dev/audio, /dev/dsp, and other related devices (using a LD_PRELOAD
		shared library) and send the sound directly to PulseAudio.  For
		systems that use plain ALSA, the equivalent is aoss from the
		"alsa-oss" package.  aoss yourprogram aoss should work on Ubuntu too,
		since by default ALSA itself is rerouted through PulseAudio, but
		better use padsp in that case.  Most kernels also have the snd-pcm-oss
		module, which provides real /dev/dsp and /dev/audio devices using
		ALSA: sudo modprobe snd-pcm-oss yourprogram I've heard it doesn't work
		as good as aoss, though, and I'm not sure whether it works at all when
		PulseAudio is running.
	Send to someone or listen their output:
		arecord -c 1 -r 32000 | ssh <user>@<server> 'mplayer -demuxer rawaudio -rawaudio channels=1:rate=32000:samplesize=1 -nocache -'


SOCKS proxy
	On client, listen to port for socks connection
	ssh -fND localhost:10000 icydog@desktop.icydog.net
	: To use it, just point your SOCKS-aware application at the port you chose
	: earlier. For example, in the Firefox connection settings, you would
	: choose Manual proxy configuration, fill in localhost and 10000 for SOCKS
	: Host and Port, and leave everything else blank.


X over SSH
	http://dustwell.com/how-x-over-ssh-really-works.html

SSH over UDP
	https://mosh.mit.edu/

Check fingerprint (/tmp/local/etc/dropbear)
	find . -name "*_key.pub" -exec ssh-keygen -lf {} \;
Find appropriate line in known_hosts and it's fingerprint
	ssh-keygen -H -F hostname
	ssh-keygen -lf ~/.ssh/known_hosts -F hostname


Supported escape sequences: ~?
	> Exit frozen ssh session: press <CR>~.
 (Note that escapes are only recognized immediately after newline.)
	~.  - terminate connection (and any multiplexed sessions)
	~B  - send a BREAK to the remote system
	~C  - open a command line
	~R  - Request rekey (SSH protocol 2 only)
	~^Z - suspend ssh
	~#  - list forwarded connections
	~&  - background ssh (when waiting for connections to terminate)
	~?  - this message
	~~  - send the escape character by typing it twice

#!/usr/bin/expect -nNf
#%USAGE: $ ./communicate -- [<options>] [<host:port>] <<< "$configs"
#%
#%Disclaimer: this script IMHO is masterpiece and writing it was really fun!
#%  But in the retrospection all those efforts and time would be better
#%  to be dedicated to the original bitlbee codebase...
#%  For example, splitting single /var/lib/bitlbee/<user>.xml into distinct parts:
#%  [ "secret" (localhost only) | "sensitive" (private gitlab) | "general" (public github) ]
#%
# ==============================================================
proc echo {args} { send_user -- "[join $args]\n" }
proc shift {} { set ::argv [lassign $::argv v]; incr ::argc -1; return $v }
proc printhelp {} { catch {exec sed -rn "1d;/^(.*\[ ;\])?#%/s///p" [info script]} help; echo $help; }
proc define_options {} { global opts
  set ::timeout 5
  array set opts {
    dryrun 0 verbose 0 reset 0 renew 0 input ""
    server localhost
    port 6667
  }
  #%HELP: <options>
  while {$::argc > 0} { switch -- [set v [shift]] {
    -i - --input   { set opts(input) [shift]    ;#% i:= input file containing list of protocols and passwords (DFL=stdin) [--input] }
    -r - --renew   { set opts(renew) 1          ;#% r = drop your "identity" -- re-create everything anew [--renew] }
    -h - --help    { printhelp; exit            ;#% h = print help [--help] }
    -d - --dryrun  { set opts(dryrun) 1         ;#% d = debug commands parsing (keeping most settings intact) [--dryrun] }
    -v - --verbose { set opts(verbose) 1        ;#% v = print commands (!with your passwords!) before execution [--verbose] }
    -t - --timeout { set ::timeout [shift]      ;#% t:= fine-tune global timeout for "expect" commands on slow server [--timeout] }
    default { lassign [split $v :] s p          ;#% $1= host and port of bitlbee server (DFL=localhost:6667) [<[host][:port]>]
      if {$s ne ""} { set opts(server) $s }     ;#%   e.g. you can specify only host: 192.168.1.3, or only port: :9376
      if {$p ne ""} { set opts(port) $p   }     ;#%
    }
  }}
}


# ==============================================================
proc msgraw  {s} { if {$::opts(verbose)} { puts $s }; send "$s\r" }
proc msgsend {s} { msgraw "PRIVMSG &bitlbee :$s" }
proc msgroot {s} { msgsend "root: $s" }
proc msgauto {s} { if {$::opts(dryrun)} { puts $s } else { msgroot $s } }
proc iosync {} {
  if {![info exists ::bitlbee_user]} return
  msgsend "$::bitlbee_user: iosync"
  expect "PRIVMSG $::bitlbee_user :iosync\r" { echo --- } timeout { error "iosync timeout" }
  unset expect_out(buffer)
}

#%INFO
#% * suppressing duplicate accounts depends on "tag == <filename>"
#%   => RQ:USE: set "tag = %{tag}" inside *.conf
proc has_account {tag user} {
  msgroot "account list"
  set accrgx " \\($tag\\): .*, $user\[ \r\n\]"
  expect {
    -re $accrgx { return 1 }
    ":End of account list" { return 0 }
    timeout { error "check account existence timeout" } }
}


# ==============================================================
# WARN: query moment is significant -- options may change when parsing *.conf
proc option_query {opt} {
  msgroot "set $opt"
  expect -re "PRIVMSG &bitlbee :$opt = `(\\w+)'\r" {
    return $expect_out(1,string)
  } timeout { error "option_query timeout" }
}
proc option_backup {opt args} {
  set ::opts_backup($opt) [option_query $opt]
  if {$args ne {}} { set ::opts_server($opt) [lindex $args 0] }
}
# NOTE: don't restore option if user's *.conf have changed it after backup was done
proc option_restore {opt} { set v [option_query $opt]
  if {$v eq $::opts_backup($opt) || $v eq "false"} return
  msgroot "set $opt $::opts_backup($opt)"
}
proc option_set {opt val} { option_backup $opt $val; msgroot "set $opt $val" }


# ==============================================================
proc connect_to {server port} { global spawn_id
  set irc [socket $server $port]
  fconfigure $irc -buffering line
  spawn -open $irc
  expect {
    timeout { error "bitlbee server signature not found" }
    ":BitlBee-IRCd initialized" }
}

proc login_as {user pass} {
  expect_before "PING :PinglBee" { msgraw "PONG :PinglBee"; exp_continue }

  msgraw "NICK $user"
  msgraw "USER $user 0 * :"
  expect {
    timeout { error "auth timeout" }
    "command to identify yourself" }

  #% * HACK: drop your "identity" for clean reconfiguration
  if {$::opts(renew)} {
    msgauto "drop $pass"
    msgauto "register $pass"
  }

  option_set auto_connect false
  msgroot "identify $pass"
  expect {
    timeout { error "identify failed" }
    ":You're already logged in" echo
    ":Password accepted" echo }

  #% * ATT: this script must take over your other sessions -- otherwise settings won't be saved
  expect -timeout 1 "take over this session?" {
    msgroot "yes"
    expect -timeout 1 "successfully taken over"
  }
}

proc logout {} {
  iosync
  echo "\[LOGOUT\] restore temporarily switched user settings"
  option_restore auto_connect
  msgauto "save"
}

#% ! "$bitlbee_user" is global, auth changed on server won't be restored after sourcing
#% * you can use <free flag> "reset" = del+add account to update stored user/pass
proc use_account {} {
  variable account
  if {$account(tag) eq "bitlbee"} {
    iosync
    if {[info exists ::bitlbee_user]} logout
    set ::bitlbee_user $account(user)
    set ::bitlbee_pass $account(pass)
    login_as $::bitlbee_user $::bitlbee_pass
  }
  msgroot "account $account(tag) off"
  if {[info exists account(reset)]} { msgroot "account $account(tag) del" }
}


# ==============================================================
#%
#%HELP: <config>
proc gsubvars {text} {
  set rgx "%{(\\w+)}"
  while {[regexp -line $rgx $text m]} {
    regsub -line $rgx $m "::account(\\1)" var
    if {![info exists $var]} { error "unknown substitution '$m'" }
    regsub -line $m $text [set $var] text
  }
  return $text
}

proc parse_tags {line} {
  if {$::opts(verbose)} { puts "\[$line\]" }
  unset -nocomplain ::account
  foreach kv [regexp -inline -all -- {\S+} $line] {
    lassign [split $kv =] k v
    if {$k eq ""} { error "key is required" }
    set ::account($k) $v
  }
  if {$::opts(verbose)} { parray ::account }
}

proc parse_config {path} {
  iosync
  if {$path eq "" || $path eq "-"} { set fd stdin; set path $fd } else { set fd [open $path r] }
  echo "\n\[[expr {[info exists ::account(tag)] ? $::account(tag) : {-}}]\]  @$path"
  fconfigure $fd -buffering line
  parse_fstream $fd
  close $fd
}

proc parse_command {line} {
  set line [gsubvars $line]
  if {$::opts(verbose)} { puts " <- $line" }
  switch -regexp -matchvar m -- $line {
    {^/join (.*)} { msgraw "JOIN [lindex $m 1]" }
    {^/\S*} { error "IRC command '$m' is not allowed" }
    {^account add} {
      if {![has_account $::account(tag) $::account(user)]} {
        msgauto [gsubvars "account %{tag} del"]
        msgauto $line
      }}
    default { msgauto $line }
  }
}

proc strip_comments {line} { regsub -line "(^\\s*#|  # ).*$" $line "" }
proc parse_fstream {filestream} {
  while {[gets $filestream line] >= 0} {
    set line [string trim [strip_comments $line]]
    if {$line eq ""} continue                 ;#% * empty lines and commented with '#' symbol are skipped
    switch -regexp -matchvar m  -- $line {
      {^\[(.*)\]$} {                          ;#% * all <keys> from "[<key=value|flag>...]" will substitute %{<key>} inside *.conf and <stdin>
        parse_tags [lindex $m 1]              ;#%   - must supply "[tag=bitlbee ...]" to authorize (before any other protocols)
        use_account                           ;#%   - multiple "[tag=bitlbee ...]" input lines are allowed (to configure multiple users sequentially)
      } {^@(.*)} { parse_config [lindex $m 1] ;#% * using "@/path/to/sourced.conf" you can source other files in *.conf format
      } default { parse_command $line         ;#% * any other line is treated as "<bitlbee-command>" and sent to server directly
    }}
  }
}

#%
#%WARN
#% * "account ... on" in *.conf may result in "timeout error" due to "/oper" blocking successive input
#% * if account user was renamed => current "%{tag}" account will be deleted and recreated
#%   => WARN! all unexported "rename" will be lost
#%    BET:(when possible): rename them on server and use nick_format=%first_name
#%    ALT: use private "%{tag}_rename.conf"
#% * to use DFL values (reset options) don't simply comment-out options inside *.conf
#%   => you must explicitly set option to DFL value OR drop-and-recreate account OR delete whole /var/lib/bitlbee/*
#% * batch-processing of multiple files in one go is preffered way
#%   <= bitlbee "take over session" is rather harmful or accumulates expect delays otherwise
#%

## Raw communication with IRC bitlbee
define_options
connect_to $::opts(server) $::opts(port)
parse_config $::opts(input)
logout
msgraw "QUIT"
expect eof

#%
#%HELP: <example> (self-sufficient)
#%---
#%#!/usr/bin/env bash
#%set -euo pipefail
#%./communicate -- [<options>] <<EOT
#%[tag=bitlbee user=${CHAT_BITLBEE:?} pass=$(pass chat/bitlbee)]
#%@./cfg/bitlbee.conf
#%@/path/to/rename.conf
#%
#%[tag=skype user=${CHAT_SKYPE:?} pass=$(pass chat/skype) reset]
#%@./cfg/skype.conf
#%chat add %{tag} 19:03c1a0dc34227b85824b564e0baef280@thread.skype #work
#%/join #work
#%channel #work set auto_join true
#%
#%[discord user=${CHAT_DISCORD:?} pass=$(pass chat/discord) nick=${CHAT_DISCORD%@*}]
#%@./cfg/discord.conf
#%@/path/to/discord_channels.conf
#%EOT

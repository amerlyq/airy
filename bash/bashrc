# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
export SHELL=$BASH  # NEED: when bash run from zsh

# If not running interactively, don't do anything
[[ $- == *i* ]] || return
# BUG: cd has errors -- when '$ cd' in bash
# BUG: bash can't '.a' to jump between dirs

[[ -d ${TMPDIR:=/tmp} ]] || mkdir -p $TMPDIR
TMPPREFIX=${TMPDIR%/}/${SHELL##*/}

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Expand aliases to be available in scripts
# shopt -s expand_aliases

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# Disable old suspend-continue behaviour on C-s, C-q to intoduce forward-search
# http://unix.stackexchange.com/questions/12107/how-to-unfreeze-after-accidentally-pressing-ctrl-s-in-a-terminal/12108#12108
# to enable: stty ixany
stty -ixon
# Don't insert ^C in commandline
stty -echoctl

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [[ -f /usr/share/bash-completion/bash_completion ]]; then
    source /usr/share/bash-completion/bash_completion
  elif [[ -f /etc/bash_completion ]]; then
    source /etc/bash_completion
  fi
fi

# turn on directory spelling typos automagic
shopt -s cdspell

# Enable xsel to copy current cmdline/output (like in zsh)
# NOTE: xsel-remote works even w/o $DISPLAY set
_xsel_copy_cmdline(){ xsel -ib <<< "${READLINE_LINE:-$(fc -ln -1)}"; }
_xsel_copy_output(){ xsel -ib <<< $(eval $(fc -ln -1) 2>/dev/null); }
bind -x '"\C-y": _xsel_copy_cmdline'
bind -x '"\C-o": _xsel_copy_output'

# See /usr/share/doc/bash-doc/examples in the bash-doc package.

BASH_AIRY=$(readlink -e "$BASH_SOURCE")
BASH_AIRY=${BASH_AIRY%/*}
source "$BASH_AIRY/prompt"
source ~/.shell/common

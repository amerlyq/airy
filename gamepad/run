#!/bin/bash
#%USAGE: $ r.gamepad <libname>
# THINK: reboot system with controller plugged-in -- maybe it works afterwards ?
source ~/.shell/profile

set -euo pipefail -o noglob
trap 'printf "%s:%s(): %s\n" "$LINENO" "${FUNCNAME-}" "${BASH_COMMAND-}"' ERR

xpad=/sys/bus/usb/drivers/xpad
inputs=()
rename=
sortargs=-r
unbind=

while getopts 'i:rsu1:2:3:4:' o; do case $o in :|'?') exit 2
;; i) inputs=( "$OPTARG" )
;; r) rename=$((!rename))
;; s) sortargs=
;; u) unbind=$((!unbind))
# HACK: use individual configs to make 1st gamepad as keyboard
;; [1-4]) declare -n a=cfg_$o; a+=( "$OPTARG" )
esac; done; shift $((OPTIND-1))
cfgshared=( "$@" )

# HACK: reverse order of serials BET: order based on pci bus (depends on usb ports)
((${#inputs[@]})) || inputs=(
  $(find /dev/input/by-id -type l -xtype c -name 'usb-*-event-joystick' -print | sort $sortargs)
)
# echo "${inputs[@]}"

get_overlay(){ cfg-overlay -M~ -s "gamepad/$1/{}.ini" -b "${AIRY_OVERLAY_BASE:=$HOME/.local/airy}" -o "${AIRY_OVERLAY_PATH-}" -- "${@:2}"; }
evdev_cfg=$(get_overlay cfg 'xbox-one-elite')
mouse_cfg=$(get_overlay cfg 'default-mouse')

opt_config(){ declare -rn a=$1; local tmp i=$2; shift 2; tmp=( "${a[@]}" ); a=()
  for nm; do path=$(get_overlay 'lib' "?$nm-$i")
    [[ $path ]] || path=$(get_overlay 'lib' "$nm") || {
      echo "Err: gamepad($i) don't have personalized '$nm-$i.ini'"; exit 1; }
    a+=( --config="$path" )
  done
  for nm in "${tmp[@]}"; do
    a+=( --config="$(get_overlay 'lib' "$nm")" )
  done
}


rename_list=()
rename_devs(){ local dev
  for input; do
    # NOTE: rename only devices created by xpad, keep other intact
    dev=/dev/$(udevadm info --query=name --name="${input/-event-/-}") || continue
    sudo mv -vT "$dev" "${dev%/*}/~${dev##*/}"
    rename_list+=( "$dev" )
  done
}
restore_devs(){ for dev in "${rename_list[@]}"; do sudo mv -vT "${dev%/*}/~${dev##*/}" "$dev"; done; }


bind_list=()
unbind_drivers(){ local bus
  bind_list=( $(find "$xpad" -type l -xtype d -name '*:*' -printf '%P\n') )
  for bus in "${bind_list[@]}"; do
    printf -- "$bus" | sudo tee "$xpad/unbind"
  done
}
restore_drivers(){ local bus
  for bus in "${bind_list[@]}"; do
    printf -- "$bus" | sudo tee "$xpad/bind"
  done
}


onexit(){
  echo onexit
  trap 'exit 0' EXIT
  kill -INT "${fork_list[@]}"
  wait
  restore_drivers
  restore_devs
  echo end
}
trap 'onexit' INT TERM


((unbind)) && unbind_drivers
((rename)) && rename_devs "${inputs[@]}"

fork_list=()
for i in "${!inputs[@]}"; do
  declare -n cfg_N=cfg_$((i+1))
  opt_config "cfg_N" "$((i+1))" "${cfgshared[@]}"
  set -x
  # NOTE: working! MAYBE: due to rmmod+replug
  # BUG: non-deterministic order of created virtual js0/js1
  # --mimic-xpad -- interferes with some games
  # --mimic-xpad-wireless
  xboxdrv --silent --evdev "${inputs[i]}" --config="$evdev_cfg" "${cfg_N[@]}" \
    --next-config --config="$evdev_cfg" --config="$mouse_cfg" \
    & fork_list+=( $! )
  set +x
  sleep 0.5
done
echo ---
# BUG: this 'wait' is interrupted -> therefore triggers ERR trap
wait

# https://stackoverflow.com/questions/690266/why-cant-i-use-job-control-in-a-bash-script
#   => maybe place all jobs in background to kill whole bg pgroup at once w/o risking main proc?
# while fg 2>/dev/null; do wait; done

# NOTE: not working!
# exec xboxdrv --evdev "$input" --config "$evdev_cfg" "${configs[@]}" \
  # --next-config --config "$evdev_cfg" --config "$mouse_cfg"

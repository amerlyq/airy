BET?
  http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html
  https://poormansprofiler.org/
    = using gdb for profiling by sampling traces


REF
  https://gperftools.github.io/gperftools/cpuprofile.html
  https://gperftools.github.io/gperftools/heapprofile.html

SEE
  http://goog-perftools.sourceforge.net/doc/heap_profiler.html
  http://gernotklingler.com/blog/gprof-valgrind-gperftools-evaluation-tools-application-level-cpu-profiling-linux/
  http://milianw.de/blog/heaptrack-a-heap-memory-profiler-for-linux
  https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/ch05s03s03
  https://elinux.org/Runtime_Memory_Measurement
  https://chromium.googlesource.com/chromium/src/+/lkcr/docs/memory-infra/heap_profiler.md
  http://www.pixelbeat.org/programming/profiling/

TUT
  https://www.thegeekstuff.com/2012/08/gprof-tutorial/


ALT
  profile C++ member variables access
    https://github.com/arvidn/access_profiler


Profiling
  make
    $ remake
  viewer
    |kcachegrind|
    https://github.com/jrfonseca/gprof2dot
      $ ./gprof2dot.py --format=callgrind --output=out.dot /path/to/callgrind.out
      $ dot -Tpng out.dot -o graph.png

# vim:ft=sh

# [_] CHECK: it seems "auru" is not needed anymore after "aurb"
# USAGE:
# * (rebuild) $ cd ~/.cache/aurutils/sync/emacspeak && aurb && auru && paci emacspeak
# *  (remove) $ pacx emacspeak && aurC && aurx emacspeak && aury

alias aur='AUR_REPO=aur aur'
alias aurb='aur build --force'          # rebuild inside current dir
function aurB { local nm; nm=$(r.pacman-loc-prepare "$1") && r.pacman-loc-package "$nm" && sudo pacman -S "$nm"; }
alias aurC='pacman -Qm | aur vercmp'                            # check updates for foreign pkgs
alias aure='aur sync'                   # install and prompt to edit files
alias auri='aur sync --no-view'         # install
alias aurc='auri --continue'            # install without download and edit
# BUG: bare function doesn't expand aliases
alias aurI='function aurI { auri "$1" && paci "$1"; }; aurI'  # install
alias aurl='pacman -Sl aur'   # list installed aur pkgs
alias aurr='aur sync --nover-shallow -f'  # fully rebuild chosen packages (e.g. python-* pkgs installed as deps)
alias aurR='aur sync --rebuildtree '      # fully rebuild pkg with all its dependencies
alias aurs='aur search'
function aurq { aur pkglist -P "$@" | command xargs aur search -i; }    # search pkgname by regex

alias aur\?='pacman -Slq aur | grep -vxFf <(aur pkglist)'       # unknown pkgs (not from AUR)

# HACK: apply action to "aur" database only (to keep old core/extra/community)
#   ALT:(for whole aurutils): make wrapper-script from it and export PACMAN=/path/to/script
#   ALT: make symlink to eliminate necessity to sync custom repo at all
#     $ ln -s /var/lib/pacman/sync/aur.db /var/cache/pacman/aur/aur.db
alias paca='sudo pacman --config /etc/pacman.d/aur.conf'
alias aury='paca -Sy'
alias auru='paca -Syu'

# ALT: update only installed
# pacman -Slq aur | grep -ZFxf <(pacman -Qq) | xargs -0 echo
alias aurU='aur sync -u'                                        # update-rebuild all

alias aurz='paccache --cachedir /var/cache/pacman/aur --keep 0 --dryrun --'
alias aurZ='paccache --cachedir /var/cache/pacman/aur --keep 0 --remove --'

# WARN: it doesn't remove pkg from cache dir BAD: paccache won't find it anymore
# https://github.com/AladW/aurutils/issues/305 + $ sudo pacman -Syu
# https://github.com/AladW/aurutils/issues/208
#   = Note that when you set your repo as a pacman CacheDir (which is recommended anyway), you can use KeepInstalled and simply run pacman -Sc. repoctl update then proceeds to remove stale entries from the db.
aurx(){ find /var/cache/pacman/aur -name "*.db.tar" -execdir repo-remove {} "$@" \;; }

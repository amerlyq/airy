#!/usr/bin/env zsh
#
# SPDX-FileCopyrightText: 2020 Amerlyq <amerlyq@gmail.com>
#
# SPDX-License-Identifier: GPL-3.0-only
#
#%SUMMARY: artificially populate remote repo w/o re-hashing files on NAS (WARN: corrupted files not detected)
#%ALG:NEED:
#     * first clone repo to NAS and sync it back to get "annex-uuid" (SEE:ALG: @/todo/my/info/annex.nou [⡟⢚⢳⣇])
#     * and then prepare clean checkout'ed git-annex branch to apply new logs
#   $ mv ./.git/info/attributes{,_}
#   $ git worktree add /cache/amv-annex git-annex && git branch tmp git-annex
#  USAGE: $ ./$0 nas /net/share/amer/amv-old-mess
#   $ printf "gitdir: %s\n" "$(realpath -e .git)" > .git_ && mv -vfT .git{_,}
#   $ git worktree remove /cache/amv-annex
set -o errexit -o noclobber -o nounset -o pipefail
setopt warn_nested_var warn_create_global
zmodload zsh/datetime

rmt=$1      # e.g. "nas"
src=${2-}   # import outside dir by unique-basename .vs. generate for already imported current dir
repo=$(git rev-parse --show-toplevel)  # USE: GIT_DIR and GIT_WORK_TREE

# [⡟⣕⡨⡥] FAIL:PERF: "checkout" is as slow as hell -- must somehow exclude .log/.met in git-annex branch from under smudge filter
#   TRY:(glg): $ printf '* !filter\n.* !filter\n' > /cache/amv-annex/.gitattributes
#   ALT:(no-hooks): $ git -c core.hooksPath=/dev/null -c core.attributesFile=/dev/null checkout -- .
#     ALT: $ git -c core.attributesFile=/dev/fd/3 worktree add /cache/amv-annex git-annex 3<<<'* !filter'
#     << FAIL:BET: manually rename .git/info/attributes before checkout
#   [⡟⣕⡨⡥] SEE: $ r.b -r annex-smudge
#   INFO
#     git status extremely slow with v7 ⌇⡟⣕⡯⣕
#       https://git-annex.branchable.com/bugs/git_status_extremely_slow_with_v7/
#     smudge ⌇⡟⣕⡰⢵
#       https://git-annex.branchable.com/todo/smudge/
# EXPL:(.git_):
#   Using git-worktree with annex ⌇⡟⣕⡮⣵
#     https://git-annex.branchable.com/tips/Using_git-worktree_with_annex/
#   git worktree remove fails ⌇⡟⣕⡯⠵
#     https://git-annex.branchable.com/bugs/git_worktree_remove_fails/
#
dst=$(git -C $repo worktree list --porcelain | awk '$1=="worktree"{w=substr($0,length($1)+2)} $1=="branch"&&$2~"/git-annex$"{print w}')
uuid=$(git -C $repo config remote.$rmt.annex-uuid)

if (($#src)); then
  expected=( $src/**/*(.D) )
  uniqbase=( $expected:t )
  [[ $#uniqbase -ne ${#${(u)uniqbase}} ]] && >&2 echo "Err: non-unique SRC" && exit 1

  annexed=( $repo/**/*(@D) )
  typeset -A mapping
  mapping=(${${annexed:t}:^annexed})

  matching=( ${${annexed:t}:*uniqbase} )
  [[ $#matching -ne ${#${(u)matching}} ]] && >&2 echo "Err: non-unique DST" && exit 1
  [[ $#matching -ne $#uniqbase ]] && >&2 echo "WARN: some SRC not in DST"

  ## FAIL: can't get values by keys
  # present_on_remote=(${(k)mapping:*uniqbase})
  present_on_remote=()
  someabsent=
  for k in $uniqbase; do
    ((${+mapping[$k]})) && present_on_remote+=($mapping[$k]) && continue
    echo "Err: DST does not have src=$k" && someabsent=1
  done
  ((someabsent)) && exit 1
else
  expected=( ${src:=.}/**/*(@D) )
  present_on_remote=( $expected )
fi

# DEBUG: print -l $present_on_remote && exit

strftime -s ssmv '%Y%m%d_%H%M%S'
ssmv=/tmp/annex/$ssmv.sh
mkdir -p $ssmv:h
cat> $ssmv <<'EOT'
#!/bin/sh
repo=${1:?}
src=${2:?}
dst=$repo/.git/annex/objects
safemv(){ local f=$src/$1 t=$dst/$2/${2##*/}
  test ! -e "$f" && >&2 echo "Skip: no src=$1" && return
  test -e "$t" && >&2 echo "Warn: dst=$2 exists for src=$1" && return
  mkdir -p "${t%/*}"
  mv -n "$f" "$t"
  chmod 444 "$t"
  chmod 555 "${t%/*}"
}
EOT
printf '# repo=%s\n# src=%s\n\n' $repo $src >> $ssmv
chmod +x $ssmv

# for f in $present_on_remote; do
for ((i = 1; i <= $#present_on_remote; ++i)); do
  f=${present_on_remote[i]}
  # DEBUG: echo $i $f && continue
  [[ -L $f ]] && [[ $f:A =~ /.git/annex/objects/ ]] ||
    { >&2 echo "Err: not annexed"; exit 1; }

  ## FIXED: using (q) looses backslash on expansion -- must re-quote it manually with double-quote
  # EXPL: zsh - Why doesn't alias foo='echo "This is a quote: \'"' work? - Unix & Linux Stack Exchange ⌇⡟⢟⠬⠕
  #   https://unix.stackexchange.com/questions/437965/why-doesnt-alias-foo-echo-this-is-a-quote-work
  # DEBUG: $ a="some's"; print "${${(qq)a}//\'\'/'\"'\"'}"
  nm=${expected[i]#${src:?}/}
  quot=$'\'\"\'\"\''
  qnm=${${(qq)nm}//\'\\\'\'/$quot}
  printf 'safemv %s %s\n' "$qnm" "${(q-)f:A:h:t2}" >> $ssmv

  t=${dst:?}/${f:A:h:t2}.log
  [[ -f $t ]] && grep -qwF ${uuid:?} $t && continue  # present
  [[ -e $t:h ]] || mkdir -p $t:h
  printf '%ss 1 %s\n' "${${EPOCHREALTIME:?}:0:20}" "${uuid:?}" >> $t
done

# NOTE: cmp what was added to log and to renaming function
# </tmp/annex/20201101_200430.sh grep -vwFf <(gwsm |awk '{sub(/\.log$/,"");print$2}')

# OR: fix errors of moving files w/o renaming to sha
#  REGR: $ find -name '*.mp4' -exec sh -c 'f=$0;d=${f%/*};n=${d##*/};chmod 600 "$d/$n"; mv "$f" "$d/$n"' {} \;
#  $ find -mindepth 2 -maxdepth 2 -type f -exec sh -c 'f=$0;mv "$f" "$f"_; mkdir -p "$f"; mv "$f"_ "$f/${f##*/}"' {} \;

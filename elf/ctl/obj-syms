#!/bin/bash
set -euo pipefail
export SHELL=$(type -p bash)

src=${1:-$PWD}
deps=${2:-/tmp/_deps}

# VIZ. ignorable symbols
#   https://stackoverflow.com/questions/12697081/what-is-gmon-start-symbol
ignore=( _Unwind_Resume __gmon_start__ )
ignore=$(IFS=$'|'; printf '%s\n' "${ignore[*]}")
export SYM_IGNORE="^($ignore)$"

dump_once(){ local mark=$1; shift
  mkdir -p "${mark%/*}"
  [[ -f $mark ]] || "${@:?}" > "$mark" || exit 3
}; export -f dump_once

# -o | to search obj files
find_artifacts(){ printf '* (find) %s\n' "$*" >&2
  r.find-elf "$@" \
  || { printf 'Err: *.a/*.so binaries not found\n' >&2; exit 1; }
}

# TODO: also extract dlopen() list
# TODO: recursive ldd
# NOTE: from ldd output all links to local libs are removed
#  => search them in their own _deps/so dir
#  => dir _deps/ext contains only external dirs
ldd_ext(){ printf '* (ldd) %s\n' "$*" >&2
  cat "$@" \
  | xargs -rn1 -P$(nproc) ldd \
  | awk '$3{print$3}' \
  | LC_ALL=C sort -u \
  | grep -vxFf <(cat "$@") \
  || { printf 'Err: seems like ldd error\n' >&2; exit 2; }
}

## THINK: completely ignore $5=="WEAK" bind ???
# BUT:(libc): FUNC WEAK DEFAULT fflush@@GLIBC_2.2.5
# BAD? $6!="DEFAULT" -- actual for *.so|exe BUT in *.o it may be HIDDEN
# https://reverseengineering.stackexchange.com/questions/14895/why-are-symbols-with-local-binding-present-in-the-symbol-table-of-my-elf-files
extract_symbols(){ local fLib=$1 sym=$2 und=$3
  printf '* (symbols) %s\n' "$fLib" >&2
  mkdir -p "${sym%/*}" "${und%/*}"
  { { readelf -Ws -- "$fLib" | gawk -vignore="${SYM_IGNORE:?}" '
      !$8 || $5 == "LOCAL" || $8 ~ ignore {
        next
      }
      $7=="UND" {
        print $8 > "/dev/stderr"; next
      }
      $4 ~ /^(FUNC|OBJECT|TLS)$/ {
        print $8
      }
    ' | LC_ALL=C sort -u > "$sym"
    } 3>&1 1>&2 2>&3 | LC_ALL=C sort -u > "$und"
  }
}; export -f extract_symbols

# INFO: some symbols are requested with "@"
#   * static linker considers only current default "@@" symbols
#   * "@" are resolved by old versions only by dynamic linker in runtime
# e.g. (boost) _ZNSt6localeC1ERKS_@GLIBCXX_3.4 -> (stdc++) _ZNSt6localeC1ERKS_@@GLIBCXX_3.4
# HACK: replace @ -> @@ for symbols with same version when resolving
fixup_versioned_symbols(){
  sed '/@@/!{/@/s//@@/}' "$@" | LC_ALL=C sort -u
}; export -f fixup_versioned_symbols

resolve_symbols(){ local fUnd=$1 dneed=$2
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  mkdir -p "$dneed"
  grep -rHxFf <(fixup_versioned_symbols "$fUnd") \
    --include '*.a' --include '*.a.*' \
    --include '*.so' --include '*.so.*' \
    --include '*.o' "${@:?}" \
  | awk -F'[:/]' -vd=""$dneed"" '{print$NF > d"/"$(NF-1)}' \
  || printf '!!! (empty) %s\n' "$fUnd" >&2
}; export -f resolve_symbols

resolve_stats(){ local dneed=$1 fstats=$2
  mkdir -p "${fstats%/*}"
  find "$dneed" -type f -print0 \
  | wc -l --files0-from=- \
  | awk -F'/|\\s' '{print$1"\t"$NF}' \
  | sort -k1rn,1 \
  | sed '1{/\stotal$/d}' \
  > "$fstats"
}; export -f resolve_stats


merge_allsyms(){
  find "${@:?}" -type f -exec cat {} \+ | LC_ALL=C sort -u
}; export -f merge_allsyms

# BUG: fixup_versioned_symbols() has no effect on notfound list
print_notfound(){ local fUnd=$1 grp=$2
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  printf '!!! (notfound) %s\n' "$fUnd" >&2
  dump_once "$grp/available.sym" merge_allsyms "${@:?}"
  mkdir -p "$grp/notfound"
  { echo "$fUnd"
    grep -vxFf "$grp/available.sym" -- "$fUnd" \
    | tee "$grp/notfound/${fUnd##*/}" \
    | sed 's/^/\t/'
  } >&2
}; export -f print_notfound

resolve_undefined(){ local fUnd=$1 grp=$2
  [[ -s $fUnd ]] || return 0
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  printf '* (resolve) %s\n' "$fUnd" >&2
  dneed=$grp/need/${fUnd##*/}
  fstats=$grp/stat/${fUnd##*/}
  resolve_symbols "$fUnd" "$dneed" -- "${@:?}"
  resolve_stats "$dneed" "$fstats"
  [[ -s $fstats ]] || print_notfound "$fUnd" "$grp" -- "${@:?}"
}; export -f resolve_undefined


find_group(){ local t=$1 src=$2 grp=$3
  mkdir -p "$grp"
  dump_once "$grp/files" find_artifacts "$t" "$src"
}

find_all(){ local src=$1 dst=$2
  find_group -a "$src" "$dst/a"
  find_group -o "$src" "$dst/o"
  find_group -s "$src" "$dst/so"
  find_group -b "$src" "$dst/bin"
  mkdir -p "$dst/ext"
  dump_once "$dst/ext/files" ldd_ext "$dst/so/files" "$dst/bin/files"
}


# BAD: parallel ignores errors
extract_group(){ local grp=$1
  dump_once "$grp/_gen_syms" parallel --halt-on-error now,fail=1 -- extract_symbols {} "$grp/sym/{/}" "$grp/und/{/}" :::: "$grp/files"
}

extract_all(){ local dst=$1
  extract_group "$dst/a"
  extract_group "$dst/o"
  extract_group "$dst/so"
  extract_group "$dst/bin"
  extract_group "$dst/ext"
}


resolve_group(){ local grp=$1; shift
  dump_once "$grp/und.sym" find "$grp/und" -type f -print
  dump_once "$grp/_gen_need" parallel --halt-on-error now,fail=1 -- \
    resolve_undefined {} "$grp" -- "${@:?}" \
    :::: "$grp/und.sym"
}

resolve_all(){ local dst=$1
  resolve_group "$dst/a" "$dst/a/sym" "$dst/so/sym" "$dst/ext/sym"
  resolve_group "$dst/o" "$dst/o/sym"
  resolve_group "$dst/so" "$dst/so/sym" "$dst/ext/sym"
  resolve_group "$dst/bin" "$dst/so/sym" "$dst/ext/sym"
  resolve_group "$dst/ext" "$dst/ext/sym"
}

find_all "$src" "$deps"
extract_all "$deps"
resolve_all "$deps"


## DEBUG
# grep -rxFf "$dst"/und/libWavePlayerConfig.a \
#   --include '*.a.*sym' \
#   --include '*.o.*sym' \
#   --include '*.so.*sym' "$dst"

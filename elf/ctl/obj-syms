#!/bin/bash
set -euo pipefail

src=${1:-$PWD}
deps=${2:-/tmp/_deps}
allsyms=$deps/sym.all

# VIZ. ignorable symbols
#   https://stackoverflow.com/questions/12697081/what-is-gmon-start-symbol
ignore=( _Unwind_Resume __gmon_start__ )
ignore=$(IFS=$'|'; printf '%s\n' "${ignore[*]}")
ignore="^($ignore)$"

gather_libs(){ local src=$1 libs=$2
  mkdir -p "${libs%/*}"
  # -o | to search obj files
  if [[ ! -s $libs ]]; then
    printf '* (find) [*.a|*.o] %s\n' "$src" >&2
    r.find-elf -abs -- "$src" > "$libs" \
    || printf 'Err: *.a/*.so binaries not found\n' >&2
  fi
}

# ATT: some libs are linked inside inner project
#   => search your own *.so deps inside "ext" dir
gather_ext(){ local src=$1 ext=$2
  mkdir -p "${ext%/*}"
  if [[ ! -s $ext  ]]; then
    printf '* (find) [-*.so|exe] %s\n' "$src" >&2
    r.find-elf -bs -- "$src" | xargs -rn1 -P$(nproc) \
    ldd | awk '$3{print$3}' | LC_ALL=C sort -u > "$ext" \
    || printf 'Err: seems like ldd error\n' >&2
  fi
}

## THINK: completely ignore $5=="WEAK" bind ???
# BUT:(libc): FUNC WEAK DEFAULT fflush@@GLIBC_2.2.5
# BAD? $6!="DEFAULT" -- actual for *.so|exe BUT in *.o it may be HIDDEN
# https://reverseengineering.stackexchange.com/questions/14895/why-are-symbols-with-local-binding-present-in-the-symbol-table-of-my-elf-files
extract_symbols(){ local fLib=$1 sym=$2 und=$3
  mkdir -p "${sym%/*}" "${und%/*}"
  { { readelf -Ws -- "$fLib" | gawk -vignore="$ignore" '
      !$8 || $5 == "LOCAL" || $8 ~ ignore {
        next
      }
      $7=="UND" {
        print $8 > "/dev/stderr"; next
      }
      $4 ~ /^(FUNC|OBJECT|TLS)$/ {
        print $8
      }
    ' | LC_ALL=C sort -u > "$sym"
    } 3>&1 1>&2 2>&3 | LC_ALL=C sort -u > "$und"
  }
}

# INFO: some symbols are requested with "@"
#   * static linker considers only current default "@@" symbols
#   * "@" are resolved by old versions only by dynamic linker in runtime
# e.g. (boost) _ZNSt6localeC1ERKS_@GLIBCXX_3.4 -> (stdc++) _ZNSt6localeC1ERKS_@@GLIBCXX_3.4
# HACK: replace @ -> @@ for symbols with same version when resolving
fixup_versioned_symbols(){
  sed '/@@/!{/@/s//@@/}' "$1" | LC_ALL=C sort -u
}

resolve_symbols(){ local fUnd=$1 dneed=$2
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  mkdir -p "$dneed"
  grep -rHxFf <(fixup_versioned_symbols "$fUnd") \
    --include '*.a' --include '*.a.*' \
    --include '*.so' --include '*.so.*' \
    --include '*.o' "${@:?}" \
  | awk -F'[:/]' -vd=""$dneed"" '{print$NF > d"/"$(NF-1)}' \
  || printf '!!! (empty) %s\n' "$fUnd" >&2
}

resolve_stats(){ local dneed=$1 fstats=$2
  mkdir -p "${fstats%/*}"
  find -H "$dneed" -type f -print0 \
  | wc -l --files0-from=- \
  | awk -F'/|\\s' '{print$1"\t"$NF}' \
  | sort -k1rn,1 \
  | sed '1{/\stotal$/d}' \
  > "$fstats"
}

# BUG: fixup_versioned_symbols() has no effect on notfound list
print_notfound(){ local fUnd=$1 dnot=$2
  printf '!!! (notfound) %s\n' "$fUnd" >&2
  mkdir -p "$dnot"
  { echo "$fUnd"
    grep -vxFf "$allsyms" -- "$fUnd" \
    | tee "$dnot/${fUnd##*/}" \
    | sed 's/^/\t/'
  } >&2
}

resolve_undefined(){ local fUnd=$1 dst=$2
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  printf '* (resolve) %s\n' "$fUnd" >&2
  dneed=$dst/need/${fUnd##*/}
  fstats=$dst/stat/${fUnd##*/}
  resolve_symbols "$fUnd" "$dneed" -- "${@:?}"
  resolve_stats "$dneed" "$fstats"
  [[ -s $fstats ]] || print_notfound "$fUnd" "$dst/notfound"
}

batch_extract(){ local dst=$1
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  while IFS= read -r fLib; do
    printf '* (symbols) %s\n' "$fLib" >&2
    extract_symbols "$fLib" "$dst/sym/${fLib##*/}" "$dst/und/${fLib##*/}"
  done < <(cat "${@:?}")
}

# export -f gensymtbl
# SHELL=/bin/bash parallel "resolve_undefined {} '$dst'/{}"

gen_syms(){ local dst=$1
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  if [[ ! -f $dst/_gen_syms ]]; then
    batch_extract "$dst" -- "${@:?}"
    touch "$dst/_gen_syms"
  fi
}


gen_allsyms(){ local allsyms=$1
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  if [[ ! -s $allsyms ]]; then
    find -H "${@:?}" -type f -exec cat {} \+ \
    | LC_ALL=C sort -u > "$allsyms"
  fi
}

gen_need(){ local dUnd=$1 dst=$2
  while (($#)); do [[ $1 == -- ]] && shift && break || shift; done
  if [[ ! -f $dst/_gen_need ]]; then
    while IFS= read -r fUnd; do
      [[ -s $fUnd ]] || continue
      resolve_undefined "$fUnd" "$dst" -- "${@:?}"
    done < <(find -H "$dUnd" -type f -print)
    touch "$dst/_gen_need"
  fi
}

gather_libs "$src" "$deps/pj/libs"
gather_ext "$src" "$deps/ext/libs"

gen_syms "$deps/pj" -- "$deps/pj/libs"
gen_syms "$deps/ext" -- "$deps/ext/libs"
gen_allsyms "$allsyms" -- "$deps/pj/sym" "$deps/ext/sym"

gen_need "$deps/pj/und" "$deps/pj" -- "$deps/pj/sym" "$deps/ext/sym"
gen_need "$deps/ext/und" "$deps/ext" -- "$deps/pj/sym" "$deps/ext/sym"


## DEBUG
# grep -rxFf "$dst"/und/libWavePlayerConfig.a \
#   --include '*.a.*sym' \
#   --include '*.o.*sym' \
#   --include '*.so.*sym' "$dst"

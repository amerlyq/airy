#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2020 Amerlyq <amerlyq@gmail.com> and contributors.
#
# SPDX-License-Identifier: GPL-3.0-only
#
#%SUMMARY: util for xtref anchors/referals operations
#%USAGE: $ ./$0 {|-a|-x} [-f <fmt>] [{|-i|-p|-pp|-r|-t}] [--] [{ANCHOR|REFERAL}] [FILE..]
#%  * generate default xtref anchor/referal based on current timestamp or another xtref passed on cmdline
#%  * toggle between anchor and referal, convert between different formats :: {braille|date|dt|hex|u2048|unix|utc|z85r|z85}
#%  * insert anchor as first line into files (-a), or grep files/folders for specific anchor/referal (-r), or run ctags (-t)
#%  * use {-u|-uu|-uuu|-uuuu} to append one nanoseconds char/register per letter
#%
# shellcheck disable=SC2059
set -o errexit -o errtrace -o noclobber -o noglob -o nounset -o pipefail

fmts=( braille date dt dpfx hex iso unix utc z85 z85r )  # TBD: u2048
pf_anchor='⌇'
pf_referer='※'

# ALT:(generic): '\S{3,20}\ze\s?'
r_z85='[-0-9a-zA-Z.:+=^!/*?&<>()\[\]{}@%$#]{5}'
r_braille='[\u2800-\u28FF]{4}'
r_addr="($r_z85|$r_braille)"

anchor=
fmt=braille
fileref=
insert=
inverse=
linesep=$'\n'
nanosec=
printrgx=
recursive=
tags=

# shellcheck disable=SC2076
while getopts 'af:FinNprtux' o; do case $o in :|'?') exit 1
;; a) anchor=1
;; f) fmt=$OPTARG; [[ " ${fmts[*]} " =~ " $fmt " ]] || { >&2 echo "Err: fmt=$fmt"; exit 1; }
;; F) fileref=1
;; i) insert=1
;; n) nopfx=
;; N) linesep=
;; p) ((++printrgx))
;; r) recursive=1
;; t) tags=1
;; u) ((++nanosec)); echo TBD ADD: 1-4 trailing bytes; exit 3
;; x) inverse=1;
esac; done; shift $((OPTIND - 1))


## FAIL: ctags based on glibc=2.10 don't support unicode range [\u2800-\u28FF]
# Changing the ctags regex engine · Issue #1861 · universal-ctags/ctags ⌇⡞⠸⣛⣶
#   https://github.com/universal-ctags/ctags/issues/1861
# Unicode parse incorrect! · Issue #1275 · universal-ctags/ctags ⌇⡞⠸⣜⠭
#   https://github.com/universal-ctags/ctags/issues/1275
# shellcheck disable=SC2191
gen_tags(){ local
  # export LANG=en_US.utf8 LC_COLLATE=C LC_CTYPE=C
  # r_braille='[\\u2800-\\u28FF]'
  # r_braille='[⠀-⣿]'
  # r_braille='\\p{Braille}'
  # r_braille='[\x{2800}-\x{28FF}]'

# TEMP:FIXED:(unicode): use explicit table instead of range ※⡞⠸⣛⣶
alt_braille=$(tr ' \n' '||' <<'EOT'
⠀ ⠁ ⠂ ⠃ ⠄ ⠅ ⠆ ⠇ ⠈ ⠉ ⠊ ⠋ ⠌ ⠍ ⠎ ⠏
⠐ ⠑ ⠒ ⠓ ⠔ ⠕ ⠖ ⠗ ⠘ ⠙ ⠚ ⠛ ⠜ ⠝ ⠞ ⠟
⠠ ⠡ ⠢ ⠣ ⠤ ⠥ ⠦ ⠧ ⠨ ⠩ ⠪ ⠫ ⠬ ⠭ ⠮ ⠯
⠰ ⠱ ⠲ ⠳ ⠴ ⠵ ⠶ ⠷ ⠸ ⠹ ⠺ ⠻ ⠼ ⠽ ⠾ ⠿
⡀ ⡁ ⡂ ⡃ ⡄ ⡅ ⡆ ⡇ ⡈ ⡉ ⡊ ⡋ ⡌ ⡍ ⡎ ⡏
⡐ ⡑ ⡒ ⡓ ⡔ ⡕ ⡖ ⡗ ⡘ ⡙ ⡚ ⡛ ⡜ ⡝ ⡞ ⡟
⡠ ⡡ ⡢ ⡣ ⡤ ⡥ ⡦ ⡧ ⡨ ⡩ ⡪ ⡫ ⡬ ⡭ ⡮ ⡯
⡰ ⡱ ⡲ ⡳ ⡴ ⡵ ⡶ ⡷ ⡸ ⡹ ⡺ ⡻ ⡼ ⡽ ⡾ ⡿
⢀ ⢁ ⢂ ⢃ ⢄ ⢅ ⢆ ⢇ ⢈ ⢉ ⢊ ⢋ ⢌ ⢍ ⢎ ⢏
⢐ ⢑ ⢒ ⢓ ⢔ ⢕ ⢖ ⢗ ⢘ ⢙ ⢚ ⢛ ⢜ ⢝ ⢞ ⢟
⢠ ⢡ ⢢ ⢣ ⢤ ⢥ ⢦ ⢧ ⢨ ⢩ ⢪ ⢫ ⢬ ⢭ ⢮ ⢯
⢰ ⢱ ⢲ ⢳ ⢴ ⢵ ⢶ ⢷ ⢸ ⢹ ⢺ ⢻ ⢼ ⢽ ⢾ ⢿
⣀ ⣁ ⣂ ⣃ ⣄ ⣅ ⣆ ⣇ ⣈ ⣉ ⣊ ⣋ ⣌ ⣍ ⣎ ⣏
⣐ ⣑ ⣒ ⣓ ⣔ ⣕ ⣖ ⣗ ⣘ ⣙ ⣚ ⣛ ⣜ ⣝ ⣞ ⣟
⣠ ⣡ ⣢ ⣣ ⣤ ⣥ ⣦ ⣧ ⣨ ⣩ ⣪ ⣫ ⣬ ⣭ ⣮ ⣯
⣰ ⣱ ⣲ ⣳ ⣴ ⣵ ⣶ ⣷ ⣸ ⣹ ⣺ ⣻ ⣼ ⣽ ⣾ ⣿
EOT
)

  # TEMP:FIXED:(posix): old engine has some quirks with '[\]]'
  local r_z85='([-0-9a-zA-Z.:+=^!\/*?&<>()[{}@%$#]|]){5}'
  local r_dwk='\b(20[0-9][0-9])-(0[0-9]|1[012])-([012][0-9]|3[01])\b'

  local r_braille="(${alt_braille%|}){4}"

  ## DISABLED:(z85): old xtrefs, not using them; and I'm too lazy to cvt
  # local r_addr="($r_z85|$r_braille)"
  local r_addr=$r_braille

  args=( --options='NONE'
    ${recursive+--recurse}
    --links=no

    --input-encoding='UTF-8'
    --output-encoding='UTF-8'
    --sort='yes'
    --excmd='combine'
    --output-format='xref'  # MAYBE:BAD: I lose special directives in output file
    --_xformat=$'%{name}\t%{input}\t%{line};/%{name}/;\"\t%k\t%{pattern}'

    --langdef='xtref'
    --map-xtref='(*)'
    --kinddef-xtref='a,anchor,place of definition'
    --kinddef-xtref='r,reference,jump to location'
    --kinddef-xtref='d,dayweek,same day context'
    --regex-xtref="/($pf_anchor$r_addr)/\\1/a/"
    --regex-xtref="/($pf_referer$r_addr)/\\1/r/"

    ## DISABLED: no WF to use dates for now but .xtref file size doubles
    # --regex-xtref="/($r_dwk)/\\1/d/"

    --languages='xtref'

    # FAIL:(does not work): --exclude='/home/amer/aura/items/*'
    #   FIXED:USE:(path relative to PWD): --exclude='items/*' OR --exclude='items'
    --exclude='employment/luxoft/log'
  )
  # DEBUG:(stats): $ <xtref.tags C2 |cut -d/ -f-6 SC H
  for g in '.git' '_build*' 'tags' '*.tags' '&*' 'out' 'items' '#del'; do
    args+=( --exclude="$g" )
  done
  for f in .ignore .gitignore; do
    [[ -f $f ]] && args+=( --exclude="@$f" )
  done
  # DEBUG: echo exec ctags --quiet "${args[@]}" "$@"
  exec ctags --quiet "${args[@]}" "$@"
  exit
}

gen_regex(){
  if (($#)); then
    parse_xtref "$1"
    rgx=$(print_xtref)
    return
  fi

  if ((inverse)); then rgx=$pf_referer
  elif ((anchor)); then rgx=$pf_anchor
  else rgx="($pf_anchor|$pf_referer)"
  fi
  ((printrgx<2)) || rgx+=$r_addr
}

grep_xtref(){
  cmd="r.grep-repo --case-sensitive '{}'"
  exec sk --ansi --multi -ic "$cmd" --cmd-query="$1" | r.vim-qf
  exit
}

parse_xtref(){ local a
  case ${1:0:1}
  in "$pf_anchor" | ⍿ | @ | ⌇) pfx=$pf_anchor; a=${1:1}
  ;; "$pf_referer" | ※) pfx=$pf_referer; a=${1:1}
  ;; *) pfx=$pf_anchor; a=$1
  esac
  # FIXED: treat $a as file only explicitly to prevent false-positive in /@/todo
  [[ -n $fileref && -f $a ]] && a=$(date +%s --reference="$a")

  # SEE:VIZ: Most common Bash date commands for timestamping « The Intellectual Wilderness ⌇⡞⠸⣪⣽
  #   https://zxq9.com/archives/795
  # ALSO: [[urn:]uuid:]f81d4fae-7dec-11d0-a765-00a0c91e6bf6 with "urn:uuid:...[#frag]" as ref prefix and "uuid:..." as anchor
  #   https://en.wikipedia.org/wiki/Uniform_Resource_Name
  # CMP:(similary to mine): Tag URI scheme - Wikipedia ⌇⡞⠻⢅⠙
  #   https://en.wikipedia.org/wiki/Tag_URI_scheme
  #   Linked data - Wikipedia ⌇⡞⠻⢆⡑
  #     https://en.wikipedia.org/wiki/Linked_data
  #   NOTE: can also use ISAN / ISBN to refer movies/books/etc.
  # The Semantic Web & Linked Data ⌇⡞⠻⢊⣞
  #   https://rubenverborgh.github.io/WebFundamentals/semantic-web/#linked-data-basic
  # OBSOL(URI): new IRI for Unicode ⌇⡞⠻⢍⠑
  #   https://www.ietf.org/rfc/rfc3987.txt
  #   Internationalized Resource Identifier - Wikipedia ⌇⡞⠻⢝⠥
  #     https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier
  # ALSO: SHA1/SHA256 for git objects refs
  #
  # MAYBE: always use "nano" as inner xts -- and simply strip trailing spaces ${%%⠀*} to reduce 8char to 4-6-7 char
  # [_] FIXME: "nano" parsing is "8)" -- must match branches by value itself, not length only
  # DEV:HACK: jump <g[> using only first 4-char (ignoring nanoseconds)
  # VIZ:NICE: date-time separators /[+T=_ ]/
  case ${#a}
  in 28|31|34) xts=$(printf '%08x' "$(date +'%s %N' --date="$a")")      # nano = 2019-11-08T01:53:33.407997535+0200
  ;; 24|25) xts=$(printf '%08x' "$(date +%s --date="${a:0:10}T${a:11}")")  #  iso = 2020-02-03T22:19:31+0300 OR +03:00
  ;; 20) xts=$(printf '%08x' "$(date +%s --date="${a:0:10}T${a:11}")")  #  utc = 2020-02-03T22:19:31Z
  ;; 19) xts=$(printf '%08x' "$(date +%s --date="${a:0:10}T${a:11}")")  # date = 2020-02-04[^0-9]00:19:31
  ;; 16) xts=$(printf '%08x' "$(date +%s --date="${a:0:8}T${a:9:2}:${a:11:2}:${a:13}")")  # ut = 20200203T221931Z
  ;; 15) xts=$(printf '%08x' "$(date +%s --date="${a:0:8}T${a:9:2}:${a:11:2}:${a:13}")")  # dT = 20200204_001931
  ;; 11) xts=$(printf '%08x' "$(date +%s --date="${a:0:10}-")")  #  day = 2020-02-04-
  ;; 10)
    if [[ $a =~ - ]]; then
      xts=$(printf '%08x' "$(date +%s --date="$a")")
    elif ! [[ $a =~ [^0-9] ]]; then
      xts=$(printf '%08x' "$((10#$a))")               # unix = 1580768371  BET: prefix @1580768371 to allow 2020-02-04 w/o sfx BET! not match (*-*)
    else
      >&2 echo "Err: unknown fmt=$a"; exit 1
    fi
  ;;  9) xts=$(printf '%08x' "$(date +%s --date="${a:0:8}-")")  #   dt = 20200204- OR 20200204T
  ;;  8)
    if [[ $a =~ - ]]; then
      xts=$(printf '%08x' "$(date +%s --date="$a-")")
    elif ! [[ $a =~ [^0-9a-fA-F] ]]; then
      xts=$a                                        #  hex = 5e389c73    BET: prefix 0x5e389c73 OR @5e389c73 to allow 20200204 w/o sfx
    else
      >&2 echo "Err: unknown fmt=$a"; exit 1
    fi

  # XXX:(5): how to detect "rev .vs. non-rev" format ?   # z85r = @D1ou
  ;;  5) xts=$(printf '%s' "$a" | rev | basenc --z85 -d | od -An -tx1 | tr -d ' ')
  # OR: /opt/plan9/bin/unicode -t ⡞⠸⢜⡳  -> "285e\n2838\n289c\n2873\n"
  ;;  4) xts=$(printf '%s' "$a" | iconv -f utf-8 -t utf-16le | od -An -tx2 | tr ' ' \\n | sed 's/^28//' | paste -sd '')  # braille = ⡞⠸⢜⡳
  ;;  3) xts=...  # u2048 = TBD
  ;;  *) >&2 echo "Err: unknown fmt with len=${#a}"; exit 1
  esac
}

cvt_braille(){ printf -- "${2-}"; local i; for((i=0;i<${#1};i+=2)); do printf -- "\\U28${1:i:2}"; done; echo; }
cvt_hex(){ printf -- "${2-}""\\x${1:0:2}""\\x${1:2:2}""\\x${1:4:2}""\\x${1:6:2}""\\n"; }
cvt_dt(){ date +"${2-}%Y%m%d_%H%M%S" --date="@$((0x$1))"; }
cvt_date(){ date +"${2-}%Y-%m-%d"$'\U00A0'"%H:%M:%S" --date="@$((0x$1))"; }  # ALT:USE: sep="=" MAYBE: add %z
cvt_iso(){ date +"${2-}%Y-%m-%dT%H:%M:%S%z" --date="@$((0x$1))"; }
cvt_utc(){ date +"${2-}%Y%m%dT%H%M%SZ" --utc --date="@$((0x$1))"; }
cvt_dpfx(){ date +"${2-}%Y%m%d-" --date="@$((0x$1))"; }
cvt_unix(){ printf '%s%d\n' "${2-}" "$((0x$1))"; }
cvt_z85(){ printf '%s%s\n' "${2-}" "$(cvt_hex "$1" | tr -d \\n | basenc --z85)"; }
cvt_z85r(){ printf '%s%s\n' "${2-}" "$(cvt_hex "$1" |  tr -d \\n | basenc --z85 | rev)"; }

gen_xtref(){
  pfx=$pf_anchor
  ts=$(command date +%s)
  xts=$(printf '%08x' "$ts")
}

print_xtref(){ local xtref
  ((inverse)) && case $pfx
    in "$pf_anchor") pfx=$pf_referer
    ;; "$pf_referer") pfx=$pf_anchor
    ;; '') pfx=$pf_referer    # CASE:(-x): for wild address always means "referer"
    esac
  xtref=$("cvt_$fmt" "$xts" "${nopfx-$pfx}")
  printf '%s%s' "$xtref" "$linesep"
}


if ((tags)); then
  gen_tags "$@"

elif ((insert)); then
  echo "TBD write to $* files OR $recursive"
  exit 3

elif ((recursive)); then
  gen_regex "$@"
  (($#)) && shift
  grep_xtref "${rgx//\\u/\\\\u}" "$@"

elif ((printrgx)); then
  gen_regex "$@"
  printf '%s\n' "$rgx"

elif (($#)); then
  parse_xtref "$1"
  shift
  print_xtref

else
  gen_xtref
  print_xtref
fi

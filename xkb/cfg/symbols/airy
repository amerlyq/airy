// vim:ft=cpp

default partial alphanumeric_keys modifier_keys
xkb_symbols "airy" {
    include "airy(unipunct)"
    // WARN: should be included only for grp2
    // include "airy(zip):2"

    include "airy(base)"
    // DISABLED: no RALT on #pc:hpx
    // include "airy(langleader_ralt)"
    include "airy(langleader_space)"

    include "airy(lvl3_menu_latch)"
    include "airy(overlay_lctrl)"
    include "airy(overlay_ralt)"
    include "airy(overlay_vim)"
};

// STD: copy-pasted from "rules/base"
partial modifier_keys
xkb_symbols "base" {
    // include "pc"
    include "ctrl(nocaps)"
    include "altwin(swap_lalt_lwin)"
    // include "level3(menu_switch)"
};

// TBD: description
partial modifier_keys
xkb_symbols "langleader_ralt" {
    // STD: copy-pasted from "symbols/altwin"
    // BET? key <LALT> { type[Group1] = "THREE_LEVEL", [ Super_L, Super_L, ISO_First_Group ] };
    // key <LALT> { type[Group1] = "ONE_LEVEL", [ Super_L ] };
    // key <LWIN> { [ Alt_L, Meta_L ] };

    replace key <RALT> {
        // type[Group1]= "THREE_LEVEL",
        // type[Group2]= "THREE_LEVEL",
        // symbols[Group1]= [ NoSymbol, NoSymbol, ISO_Last_Group ],
        // symbols[Group2]= [ ISO_First_Group, NoSymbol, ISO_First_Group ]

        // type[Group1]= "PC_SUPER_LEVEL2",
        // type[Group2]= "ONE_LEVEL",
        // symbols[Group1]= [ ISO_Last_Group, ISO_First_Group ],
        // symbols[Group2]= [ ISO_First_Group ]

        // ISO_Lock: click=lock(En), press=set(En)
        // [ ISO_Lock ]
        // [ ISO_First_Group ]

        // type[Group1]= "ONE_LEVEL",
        // symbols[Group1]= [ Overlay1_Enable ],
        // actions[Group1]= [ SetControls(ctrls=Overlay1) ],
        // type[Group1]= "PC_SUPER_LEVEL2",
        // symbols[Group1]= [ VoidSymbol, ISO_Last_Group ],
        // actions[Group1]= [ NoAction(), LockGroup(group=2) ],
        // type[Group2]= "ONE_LEVEL",
        // symbols[Group2]= [ ISO_First_Group ],
        // actions[Group2]= [ LockGroup(group=1) ],

        // WARN: don't suppress useless langswitch by VoidSymbol
        //   << allow !kbdd to receive these symbols anyway
        repeat= no,
        type[Group1]= "PC_SUPER_LEVEL2",
        symbols[Group1]= [ ISO_First_Group, ISO_Last_Group ],
        overlay1=<KATA>   // -> RU

        // FAIL: "SetMods(clearLocks)" does not clear modifiers
        // type[Group1]= "THREE_LEVEL",
        // symbols[Group1]= [ VoidSymbol, VoidSymbol, ISO_Last_Group ],
        // actions[Group1]= [ SetMods(clearLocks,mods=Shift), SetMods(clearLocks), SetMods(clearLocks) ],
        // type[Group2]= "THREE_LEVEL",
        // symbols[Group2]= [ ISO_First_Group, ISO_First_Group, VoidSymbol ],
        // actions[Group2]= [ LockGroup(group=1), LockGroup(group=1), SetMods(clearLocks) ]
    };
};

// TBD: description
partial modifier_keys
xkb_symbols "langleader_space" {
    // IDEA:MAYBE: custom three-level [Base, AltGr, LevelThree]
    //   << FAIL: useless w/o AltGr latching
    // HACK: do <Esc> by <O1+Space>
    replace key <SPCE> {
        type= "AMER_SUPER_LVL3",
        [ space, ISO_Next_Group, ISO_First_Group, ISO_Last_Group ]
    };

    // HACK: use non-present keycoce as a direct langswitch=RU
    //   NICE: avoids latched modifiers of Super+...
    key <KATA> { type[Group1] = "ONE_LEVEL", [ ISO_Last_Group ] };
    // key <LatD> { overlay1=<KATA> };  // -> RU
    // key <LatS> { overlay1=<ESC> };
};


// TBD: description
partial modifier_keys
xkb_symbols "overlay_lctrl" {
    replace key <LCTL> {
        type= "THREE_LEVEL",
        [ Overlay1_Enable, Overlay1_Enable, Overlay1_Enable ],
        actions= [
            SetControls(ctrls=Overlay1),
            SetControls(clearLocks,ctrls=Overlay1),
            LockControls(ctrls=Overlay1)
        ]
    };
};


// HACK: only for #pc:neo -- righthand-only overlay
xkb_symbols "overlay_ralt" {
    replace key <RALT> {
        type= "THREE_LEVEL",
        [ Overlay1_Enable, Overlay1_Enable, Overlay1_Enable ],
        actions= [
            SetControls(ctrls=Overlay1),
            SetControls(clearLocks,ctrls=Overlay1),
            LockControls(ctrls=Overlay1)
        ]
    };
};


// DFL: include "level3(menu_switch)"
// The Menu key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "lvl3_menu_latch" {
    virtual_modifiers LevelThree, Super;
    key <MENU> {
        virtualMods= LevelThree,
        type[Group1]= "PC_SUPER_LEVEL2",
        symbols[Group1]= [ ISO_Level3_Latch, NoSymbol ],
        // [⡢⡞⣒⠂] TRY: clear modifiers through redirection
        //   FAIL: redirection won't execute action= of another
        // actions[Group1]= [ LatchMods(modifiers=LevelThree), RedirectKey(keycode=<KATA>,clearmods=Super) ],
        // Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+Z
        overlay1=<KATA>   // -> RU
    };
    replace key <LVL3> {
        type[Group1]= "ONE_LEVEL",
        symbols[Group1]= [ ISO_Level3_Latch ]
    };
    modifier_map Mod5 { <LVL3> };
};


partial alphanumeric_keys
xkb_symbols "unipunct" {
    name[Group1]= "Punctuation only (extend US punctuation)";

    // ALSO: stress=U0301 // COMBINING ACUTE ACCENT
    // SRC:(U02BC): https://ukrainian.stackexchange.com/questions/40/ ⌇⡢⡔⠥⢤
    key <TLDE> { [ grave,  asciitilde,         U2248,   therefore  ] };  // ` ~ ≈ ∴
    key <AE01> { [     1,      exclam,       notsign,    division  ] };  // 1 ! ¬ ÷
    key <AE02> { [     2,          at,      currency,    infinity  ] };  // 2 @ ¤ ∞
    key <AE03> { [     3,  numbersign,       section,  numerosign  ] };  // 3 # § №
    key <AE04> { [     4,      dollar,     semicolon,    EuroSign  ] };  // 4 $ ; €
    key <AE05> { [     5,     percent,        degree,       U20B4  ] };  // 5 % ° ₴   ‰
    key <AE06> { [     6,asciicircum,doublelowquotemark,lessthanequal]};  // 6 ^ „ ≤
    key <AE07> { [     7,ampersand,leftdoublequotemark,greaterthanequal]};// 7 & “ ≥
    key <AE08> { [     8,    asterisk,periodcentered,    multiply  ] };  // 8 * · ×
    key <AE09> { [     9,   parenleft,   bracketleft,   braceleft  ] };  // 9 ( [ {
    key <AE10> { [     0,  parenright,  bracketright,  braceright  ] };  // 0 ) ] }
    key <AE11> { [ minus,  underscore,        emdash,      endash  ] };  // - _
    key <AE12> { [ equal,        plus,      notequal,   plusminus  ] };  // = + ≠ ±


    key <AD11> { [ bracketleft,   braceleft,   union, intersection ] };  // [ { ∪ ∩   ❲
    key <AD12> { [ bracketright,  braceright, includedin, includes ] };  // ] } ⊂ ⊃   ⟯
    key <BKSL> { [ backslash,     bar,           brokenbar,  slash ] };  // \ | ¦ /
 // key <LSGT> { [ U230A,     U230B, U2308, U2309      ] }; // ⌊ ⌋ ⌈ ⌉


    key <AC10> { [ semicolon,  colon,    rightarrow,  leftarrow   ] };  // ; : → ←
    key <AC11> { [ apostrophe, quotedbl, downarrow,   uparrow     ] };  // ' " ↓ ↑

    key <AB08> { [ comma,  less,     guillemotleft,  U2039 ] };  // , < « ‹
    key <AB09> { [ period, greater,  guillemotright, U203A ] };  // . > » ›
    key <AB10> { [ slash,  question, U2026,   questiondown ] };  // / ? … ¿

    key <LatV> { [ NoSymbol, NoSymbol, U2713, U2717 ] };  // ✓ ✗
};


partial alphanumeric_keys
xkb_symbols "zip" {

    // TODO: replace lvl(1,2) by NoSymbol and only then uncomment in order to reuse definitions
    // include "us(basic)"
    // include "ru(common)"

    // MOVE? en.lvl3
    // R -> registered=®
    // С -> copyright=©
    // T -> trademark=™
    // M -> mu=µ

    name[Group1]= "Russian+Ukrainian (reuse extended US punctuation)";

    key <LatQ> { [Cyrillic_shorti,Cyrillic_SHORTI,Ukrainian_yi,Ukrainian_YI] };
    key <LatW> { [ Cyrillic_tse,  Cyrillic_TSE  ] };
    key <LatE> { [ Cyrillic_u,    Cyrillic_U,     Cyrillic_yu, Cyrillic_YU ] };
    key <LatR> { [ Cyrillic_ka,   Cyrillic_KA, U02BC, rightsinglequotemark ] };  // ʼ ’(old) - Ukr_apostrophe
    key <LatT> { [ Cyrillic_ie,   Cyrillic_IE,    Cyrillic_io, Cyrillic_IO ] };
    key <LatY> { [ Cyrillic_en,   Cyrillic_EN   ] };
    key <LatU> { [ Cyrillic_ghe,  Cyrillic_GHE,   Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <LatI> { [ Cyrillic_sha,  Cyrillic_SHA  ] };
    key <LatO> { [ Cyrillic_shcha,Cyrillic_SHCHA] };
    key <LatP> { [ Cyrillic_ze,   Cyrillic_ZE,    paragraph,  U204B ] };  // ¶ ⁋


    key <LatA> { [ Cyrillic_ef,   Cyrillic_EF,    Cyrillic_ha,  Cyrillic_HA  ] };
    key <LatS> { [ Cyrillic_yeru, Cyrillic_YERU,  Cyrillic_zhe, Cyrillic_ZHE ] };
    key <LatD> { [ Cyrillic_ve,   Cyrillic_VE,    Cyrillic_be,  Cyrillic_BE  ] };
    key <LatF> { [ Cyrillic_a,    Cyrillic_A,     Ukrainian_i,  Ukrainian_I  ] };
    key <LatG> { [ Cyrillic_pe,   Cyrillic_PE ] };
    key <LatH> { [ Cyrillic_er,   Cyrillic_ER ] };
    key <LatJ> { [ Cyrillic_o,    Cyrillic_O  ] };
    key <LatK> { [ Cyrillic_el,   Cyrillic_EL ] };
    key <LatL> { [ Cyrillic_de,   Cyrillic_DE ] };

    key <LatZ> { [ Cyrillic_ya,   Cyrillic_YA, Cyrillic_hardsign, Cyrillic_HARDSIGN  ] };  // ъ Ъ
    key <LatX> { [ Cyrillic_che,  Cyrillic_CHE,   Ukrainian_ie, Ukrainian_IE ] };
    key <LatC> { [ Cyrillic_es,   Cyrillic_ES,    Cyrillic_e,   Cyrillic_E ] };
    key <LatV> { [ Cyrillic_em,   Cyrillic_EM  ] };
    key <LatB> { [ Cyrillic_i,    Cyrillic_I   ] };
    key <LatN> { [ Cyrillic_te,   Cyrillic_TE ] };
    key <LatM> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN ] };  // ь Ь
};


partial alphanumeric_keys
xkb_symbols "overlay_vim" {

    key <LatH> { overlay1=<LEFT> };
    key <LatJ> { overlay1=<DOWN> };
    key <LatK> { overlay1=<UP>   };
    key <LatL> { overlay1=<RGHT> };

    key <LatO> { overlay1=<PGUP> };
    key <LatI> { overlay1=<PGDN> };
    key <AB08> { overlay1=<HOME> };  // <
    key <AB09> { overlay1=<END>  };  // >

    key <SPCE> { overlay1=<ESC> };

    // key <LatP> { overlay1=<PGUP> };
    // key <LatN> { overlay1=<PGDN> };
    // key <LatU> { overlay1=<PGDN> };
    // key <LatA> { overlay1=<HOME> };
    // key <LatC> { overlay1=<END> };
    // key <LatM> { overlay1=<RTRN> };
    // key <SPCE> { overlay1=<HYPR> };
};

## Instance layout (base paths)
method.insert = cfg.basedir,  private|const|string, "/_dld/rtorrent/"
method.insert = cfg.download, private|const|string, (cat,(cfg.basedir),"download/")
method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
method.insert = cfg.xmlrpc,   private|const|string, (cat,(cfg.basedir),".xmlrpc")

## Create directories
execute.throw = mkdir, -p, (cfg.download), (cfg.session)

## Basic operational settings (no need to change these)
# WARN:RQ: (cfg.session)
#   * must be created before downloading torrent
#   * must be separate per each rtorrent instance e.g. "./.rtorrent"
#   * may be changed per torrent by USAGE: $ rtorrent -d /path/to/_dld ./some.torrent
session.path.set = (cat, (cfg.session))
directory.default.set = (cat, (cfg.download))
# system.cwd.set = (directory.default)
execute.nothrow = sh, -c, (cat, "echo >", (session.path), "rtorrent.pid", " ",(system.pid))

## Run the rTorrent process as a daemon in the background (and control via XMLRPC sockets)
#system.daemon.set = true
# network.scgi.open_port = 127.0.0.1:5000
network.scgi.open_local = (cfg.xmlrpc)
execute.nothrow = chmod,660,(cfg.xmlrpc)

## Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)
# ALT:HACK: return path to item data (never empty, unlike `d.base_path`);
method.insert = d.data_path, simple, "if=(d.is_multi_file), (d.directory), (cat, (d.directory),/,(d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

#%SUMMARY: indicate torrent state by symlink in same directory as .torrent and downloading files

### Notify torrents on completion
method.set_key = event.download.inserted_new,notify_me,"execute.nothrow=r.notify,ADD.torrent,$d.name="
method.set_key = event.download.finished,notify_me,"execute.nothrow=r.notify,FINISH.torrent,$d.name="


### Indicate only incomplete status -- don't distinguish active from offline
# WARN:(inserted_new): "d.base_path" is empty until torrent becomes [OPEN] i.e. only after "inserted_new"
method.set_key = event.download.inserted_new, status_update, "d.custom.set=completed,0"
method.set_key = event.download.resumed,  status_update, "execute=r.rtorrent-status-update,(d.custom,completed),(d.base_path)"
method.set_key = event.download.finished, status_update, "d.custom.set=completed,1; execute=r.rtorrent-status-update,1,(d.base_path)"
method.set_key = event.download.erased,   status_update, "execute=r.rtorrent-status-update,1,(d.base_path)"


# ALT:BET? use directory "./incomplete" and move fully downloaded to "./done|./unsorted"
# OLD: system.method.set_key = event.download.finished,move_complete,"execute=mv,-n,$d.get_base_path=,./unsorted/;d.set_directory=./unsorted/"
# OLD:BET: system.method.set_key = event.download.finished,move_complete,"d.set_directory=./unsorted/;"execute=mv,-n,$d.get_base_path=,./unsorted/"

# Create symlinks in the watch directory with a suffix indicating the download state.
# WARN: "finished" event not triggered when you enable seeding only for already completed moved torrent
#   => symlink won't be created
# method.set_key = event.download.resumed,link1,"d.create_link=tied,,.active"
# method.set_key = event.download.paused,link1,"d.delete_link=tied,,.active"
# method.set_key = event.download.finished,link1,"d.create_link=tied,,.complete"
# method.set_key = event.download.erased,link1,"d.delete_link=tied,,.complete"

# Create symlinks in the same directory as the download.
# method.set_key = event.download.resumed,link2,"d.create_link=base_path,,.active"
# method.set_key = event.download.paused,link2,"d.delete_link=base_path,,.active"
# method.set_key = event.download.finished,link2,"d.create_link=base_path,,.complete"
# method.set_key = event.download.erased,link2,"d.delete_link=base_path,,.complete"

# Create a symlink in another directory without a suffix.
# You need to quote the command in this case.
# method.set_key = event.download.finished,link3,"d.create_link=base_filename,/files,"


### ALT:BUG:(don't work, can't debug it out):
# method.insert = d.status_pathes,   simple|private, "cat = (d.base_path), .incomplete"
# method.insert = d.status_create, simple, "(if, (fi.is_file,(d.status_path)),, (execute,touch,(d.status_path)))"
# method.insert = d.status_remove, simple, "(if, (fi.is_file,(d.status_path)), (execute,rm,(d.status_path)))"
# method.insert = d.status_update, simple, "(if, (d.custom,incomplete), (d.status_create), (d.status_remove))"

# method.set_key = event.download.inserted_new, status_incomplete, "(d.custom.set,incomplete,1)"
# method.set_key = event.download.resumed,      status_incomplete, "print=(d.status_path)"
# method.set_key = event.download.finished,     status_incomplete, "(d.custom.set,incomplete,0); (d.status_remove)"
# method.set_key = event.download.erased,       status_incomplete, "(d.status_remove)"

# method.set_key = event.download.inserted_new, status_incomplete, "d.custom.set=incomplete,1"
# method.set_key = event.download.resumed,      status_incomplete, "branch=d.custom=incomplete, \"d.create_link=base_path,,.incomplete\", \"d.delete_link=base_path,,.incomplete\""
# method.set_key = event.download.finished,     status_incomplete, "d.custom.set=incomplete,0; d.delete_link=base_path,,.incomplete"
# method.set_key = event.download.erased,       status_incomplete, "branch=d.custom=incomplete, \"d.delete_link=base_path,,.incomplete\""

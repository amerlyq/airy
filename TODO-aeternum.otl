Build:
	build32 and build64 -- two different directories -- or one directory for each
	build flags set?

	flags: b, b32, b64
	: new flag: --both for simultaneous building x32 and x64 in build dirs
	filter: =.*
	flags: +flag_file
	[X] Rename-backup run
	 we must rename bin-file when start building like 'name_' and delete
	 afterwards on success build or rename back if fail,
	 so running will not find it if build was uncomplete.
	 or introduce flag about successful build for running.
	Import for flags
	: Make similar to my airy/profile system, importing flags from another
	Vbox - complex - build server in intranet on computer for cross-pl development
	Export last used options and flags into 'build/sets.ini' -- to choose them
	again with empty or uncomplete flags.
	[~] Find root git directory (works most of time), or find root CMake
	(works in erian)

	Sir должен уметь генерировать простые скрипты из своего тела для "чужих" проектов

Git
	Сделать скрипт, с помощью которого происходит коммит
		Автоматический стэш/ребэйс
		Запуск всей группы тестов, если все ок
		-- то и скриптов cppcheck, valgrind, codestyle
		И только если вообще всё ок, этот коммит проходит на сервер.
		> Значит, sir должен выдавать код возврата
Struct:
: There must be script, which deploys necessary directory sctruct and writes
: all needed files (CMakeLists, build-run, etc) by configure time.
	Root:  build, chain, cmake, common, libs, modules, scripts, ut
	Module: inc|include, src|source, test, exec, data
		exec  {cpp, h}
		: Contains small one-file main(), building into different executables.
		: Needed for small diff-api concept-proof demos (GUI, OpenGL, SDL).
	cmake + scripts -> chain
		: It has sense to join that dirs in one git submodule, which can be
		: updated independently. Therefore {libs, dirs, opts} -> in another
		: place (or in cmake already). And macros -> split in groups and place
		: in chain.
	libs = has script which installs/updates submodules, archives etc for libs.
	Отказ от submodule в пользу subtree (read!!!) однако я остановился на
	подмодулях со скриптовой автоматизацией. Независимость -- наше всё!
		http://habrahabr.ru/post/75964/
	Работа с подмодулями
	; git submodule add git://github.com/emzeat/google-glog glog

Command-line options:
	http://www.bahmanm.com/blogs/command-line-options-how-to-parse-in-bash-using-getopt
	http://wiki.bash-hackers.org/howto/getopts_tutorial

Minimal prj
	: Заливать в репу на гитхабе запчасти от сбилденого универoсального проета.
	: Это позволит постоянно его чуть-чуть допиливать из разных мести и
	: подтаскивать на новые задачи готовую систему, не создавая её целый день.
	: or even better: make script, which will create directory tree and CMakes
	: depending on flags of wished system (lin, win, android, etc), download
	: submodules in libs and creating simple tests by pattern.

Auto-deploy:
	Касательно моего базового приложения-скрипта с авторазвёртыванием проекта
	: надо добавить возможность указывать либо скачивание из инета, либо
	: папку со всеми либами для оффлайна (тесты, курлы итп)
	: плюс как параметр должен передаваться префикс-название проекта
	: (или сам браться из названия папки, в которой деплоится проект)
	: это позволит обойти копирайтные ограничения
	: плюс структура генератора должна быть модульной --
	: отдельными скриптами возможно сгенерить отдельную часть
	: деплойного проекта -- например если мы хотим сделать ещё
	: один модуль со стандартным си-мейк файлом для него в уже
	: готовом проекте. Но отличающийся именами модуля итп.

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})


Build-config:
	: At git repos only script with vars (names, paths, etc) must be located,
	: working as config or pom.xml file. It will be used for rebuild, being
	: sourced by my build-system (searching up-dir recursively for this config)
	: and such config must be in my global .gitignore at home (like tags, .clang, etc)

Split build-run:
	: make autogenerating build-run script for two profiles: work and others
	: working profile can be combined by cat'ing and sed'ing some of my scripts
	: all parts of build-run must be in ./bin

Libs in one place
	I tired of waiting on libs to rebuild, though more of them built typically.
	So, we create only one global dir for libs, and add this to PATH.
		This dir will be composite from git submodule or such a script
			with pulling, cloning, wgeting etc for list of different libs.
				wget can pull binary versions, unpack them and put into dirs
			updating and managing them
			parsing params to script, to pull only necessary libs or all of them
				: if you need to deploy workspace quickly, or can start
				: downloading and make your doings.
			Building libs into different dirs and rebuilding after update
				: (x86, x64, static, dynamic, release, debug, typical flags)
		Scripts' workflow
			Recieves on input the list of necessary libs for certain project
			It will be sent by my universal build-run.sh to this common-libs.sh
			Necessary libs will be built or even downloaded on purpose
			Them could be auto copied into project dir instead of building
			:	Together with cmake pieces!!
			 If lib must be build with specific flags or often rebuilded with
			 different non-standard flags, it will be copied in any case.
	+Tests:
		Folder with wrapped modules, each module in it's own wrapper dir
		This dir contains dirs of module, CMake snippet to include and some
		gtest files with simple snips how-to use module.


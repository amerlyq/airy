#!/bin/bash -e
# TODO: Make on basis of this file the generator of simple scripts like
#   'compile && run' for specified project

# Priority for files:
#   #1 modeline in file
#   compile
#   Makefile
#   CMakeLists.txt
# If -f .sirrc -- then compile all *.c??, Else -- only current file

set -o pipefail
set -o errtrace
trap 'pause $? $_pargs "${0##*/}" "${*:-: ${PWD/$HOME/\~}}"
' HUP INT QUIT TERM ERR EXIT

_run=1
_quiet=1
_pargs=-N
GWD=$(git rev-parse --show-toplevel 2>/dev/null)  # --git-dir

while getopts 'aAc:eEfnNqpr' o
do case $o
in c) cd "$OPTARG"  # ALT: make -C "$PWD/build"
;; q) ((_quiet=!_quiet))
;; r) ((_run=!_run))
;; [aAeEnN]) _pargs=-$o
esac; OPTS+=$o; done; shift $((OPTIND-1))
((_quiet))||unset _quiet

[[ $OPTS =~ f && $# -eq 1 ]] && BIN=${1%.*} || BIN=${PWD##*/}
BIN=$(realpath -m "${BIN:?}.bin")

dir_build() {
  [[ -f ./compile ]] && { ./compile "$@"; return; }
  [[ -f ./Makefile ]] && { make ${_quiet:+-s} "$@"; return; }
  # EXPL: skip cmake-only git subdirs beside git root
  [[ -f ./CMakeLists.txt && (-z $GWD||$GWD == $PWD) ]] && { sir bR "$@"; return; }
  return 10
}

file_build() { case "$1"
in *.c  ) gcc -O1 -g3 -o "$BIN" -I "$PWD" "$@"; return
;; *.cpp) g++ -O1 -g3 -o "$BIN" -I "$PWD" -std=c++11 "$@"; return
esac; return 11
}

run() {
  [[ -f ./run ]] && { ./run; return; }
  [[ -f ./Makefile ]] && grep -q '^run:' ./Makefile && { make -s run; return; }
  [[ -f ${BIN:?} ]] && { "$BIN"; return; }
  return 12
}

chain() { local ret=$?; ((ret==$1))||return $ret; }
build() {
  [[ $OPTS =~ f ]] && { file_build "$@"; return; }
  # Recursive search for project root dir
  while [[ $PWD != / ]]; do
    dir_build "$@" && return || chain 10
    cd ..
  done
  # NOTE: not much sense to apply after recursive traversing
  [[ $GWD ]] && { cd "$GWD" && dir_build "$@"; return; }
}

build "$@"
((!_run)) || run || chain 12

#!/bin/bash -e
# TODO: Make on basis of this file the generator of simple scripts like
#   'compile && run' for specified project

# Priority for files:
#   #1 modeline in file
#   .abyss
#   compile
#   Makefile
#   CMakeLists.txt
# If -f .sirrc -- then compile all *.c??, Else -- only current file

set -o pipefail
set -o errtrace

# THINK split pause from abyss
#   + remove excessive flags; most linux-way
#   - can't derive last used $PWD and actual compiler for pause info
onexit(){ pause $? $_pargs "${0##*/}" "${*:-: ${PWD/$HOME/\~}}"; }
trap 'onexit' HUP INT QUIT TERM ERR

_run=1
_quiet=1
_pargs=-N
GWD=$(git rev-parse --show-toplevel 2>/dev/null||:)  # --git-dir

while getopts 'aAc:eEfnNqpr' o
do case $o
in c) cd "$OPTARG"  # ALT: make -C "$PWD/build"
;; q) _quiet=$((!_quiet))
;; r) _run=$((!_run))
;; [aAeEnN]) _pargs=-$o
esac; OPTS+=$o; done; shift $((OPTIND-1))
((_quiet))||unset _quiet

[[ $OPTS =~ f && $# -eq 1 ]] && BIN=${1%.*} || BIN=${PWD##*/}
BIN=$(realpath -s "${BIN:?}.bin")

ignore() { local ret=$?; ((ret==$1))||return $ret; }

# NEED: if ${GWD:+$GWD/.git/abyss} -- directly $ cd $GWD
# WARN: can't use abyss <args> inside .git/abyss commands
abyssrc() { for f in .abyss .git/abyss; do
  [[ -f $f ]] && { eval $(sed -n "/^${1:?}:\s/s///p" "$f"); return; }
done; return 12
}

dir_build() {
  (($#)) || { abyssrc 'build' && return || ignore 12; }

  [[ -f compile ]] && { ./compile "$@"; return; }
  [[ -f .git/compile ]] && { ./.git/compile "$@"; return; }

  [[ -f Makefile ]] && { make ${_quiet:+-s} "$@"; return; }
  # EXPL: skip cmake-only git subdirs beside git root
  [[ -f CMakeLists.txt && (-z $GWD||$GWD == $PWD) ]] && {
      sir bR "$@"; return; }
  return 10
}

# USE: key 'recipe'
file_build() { case "$1"
in *.c  ) gcc -O1 -g3 -o "$BIN" -I "$PWD" "$@"; return
;; *.cpp) g++ -O1 -g3 -o "$BIN" -I "$PWD" -std=c++11 "$@"; return
esac; return 11
}

run() {
  (($#)) || { abyssrc 'run' && return || ignore 12; }

  [[ -f run ]] && { ./run; return; }
  [[ -f .git/run ]] && { ./.git/run; return; }  # OR .git/dfl-run

  [[ -f Makefile ]] && grep -q '^run:' Makefile && {
      make ${_quiet:+-s} run; return; }
  [[ -f ${BIN:?} ]] && { "$BIN"; return; }
  return 12
}

build() {
  [[ $OPTS =~ f ]] && { file_build "$@"; return; }
  # Recursive search for project root dir
  while [[ $PWD != / ]]; do
    dir_build "$@" && return || ignore 10
    cd ..
  done
  # NOTE: not much sense to apply after recursive traversing
  [[ $GWD ]] && { cd "$GWD" && dir_build "$@"; return; }
  return 13
}

build "$@"
((!_run)) || run "$@" || ignore 12
onexit  # success

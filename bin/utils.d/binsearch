#!/usr/bin/env python3
# Boyer-Moore-Horspool algorithm

import sys


def bstrsearch(origin, chunk):
    L = len(chunk)
    T = [L] * 256
    for i, b in enumerate(chunk[:-1]):
        T[b] = L - 1 - i

    skip = 0
    while L <= len(origin) - skip:
        i = L - 1
        while origin[skip + i] == chunk[i]:
            if i == 0:
                return skip
            i = i - 1
        skip += T[origin[skip + L - 1]]


if __name__ == "__main__":
    if len(sys.argv) == 2:
        origin = sys.stdin.buffer.read()
        fchunk = sys.argv[1]
    elif len(sys.argv) == 3:
        with open(sys.argv[1], 'rb') as f:
            origin = f.read()
        fchunk = sys.argv[2]
    else:
        raise Exception

    with open(fchunk, 'rb') as f:
        offset = bstrsearch(origin, f.read())

    if offset is None:
        sys.exit(1)

    print(offset)

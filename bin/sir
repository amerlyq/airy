#!/bin/bash
#
#   $ sir [args:br] [target:all64] [=][filter:Simple*] [vg]{ --vgdb-arg --as-no } ..
#
# Small: w/o logs. Capital: with logs.
# Delete:   [dD]    keep libs / delete all
# Build:    [bB]    prbar+pretty / std logs
# Run:      [rR]    show dots+pretty / std gtest
# Valgrind: [vV]    normal / extended
# Gdb:      [gG]    normal / extended
# Cppcheck: [cC]    normal / extended
# []{ ... }         pass options to checker
#
# TODO: filter like '=..*', options as '+curl', flags as '-blr' or '-b -l -r'
#       So all opts need process in cycle in sourced script, put them in appropriate vars and return.
#       All other parts of this script -- under 'if' -- could be splitted also.
# TODO: Invalid option: -..,  Option -.. requires an argument.
#       Add ability to root_searcher be executed in current dir, building submodule only

SCRIPT_PATH=$(readlink -m ${BASH_SOURCE[0]})
SCRIPT_DIR=${SCRIPT_PATH%/*} # Alternative not garantied: ${0%/*}
SIR="$SCRIPT_DIR/sir.d"
PREFIX_DIR="$(pwd)"

ROOT_DIR="${PREFIX_DIR}"
while true; do
    # echo "ROOT=$ROOT_DIR"
    [ -z "${ROOT_DIR/$HOME}" ] && { echo "Root dir not found."; exit 1; }
    if [ -f "$ROOT_DIR/CMakeLists.txt" ]; then
        [ -f "${ROOT_DIR%/*}/CMakeLists.txt" ] || break
    fi
    ROOT_DIR="${ROOT_DIR%/*}"
done

BUILD_DIR="$ROOT_DIR/build"
TARGETS_DIR="$ROOT_DIR/targets"
[ -d "$TARGETS_DIR" ] || TARGETS_DIR="$ROOT_DIR/useflags"
[ -d "$TARGETS_DIR" ] || TARGETS_DIR="$ROOT_DIR/scripts/useflags"
# echo "$ROOT_DIR"



# TODO:
# This msg MUST NOT appear if project has no options by design
# I must be able to compile any CMake project, not only mine
# So this big make system must separate on several modules
# CMake mine, CMake others with mine configs (dirs or file), ./compile, etc
# [ -d "$TARGETS_DIR" ] || { echo "No 'targets' dir in project."; } #exit 1;

# BIN_DIR="$BUILD_DIR/bin"
# BIN_PR="$BIN_DIR/ut"
BIN_DIR="$BUILD_DIR"
BIN_PR="$BIN_DIR/${ROOT_DIR##*/}.bin"

if [ -d "$TARGETS_DIR" ]; then
    FLAGS="${1:-all64}"
    OPTS="${2:-br}"
else OPTS="${1:-br}"; fi

# [ -f "$TARGETS_DIR/$FLAGS" ] || { echo "No 'flag' in target dir for project.";  } #exit 1;
GARGS="${3:+"--gtest_filter=$3* ${@:4} --gtest_repeat=1"}"
# --gtest_repeat=1000 --gtest_break_on_failure --gtest_output=«xml:out.xml» --gtest_shuffle



# Change to find only first flag? So double could be used
#ALT: doContain() { [ -z "${2##*$1*}" ]; }
has_opt (){ [ "${OPTS/$1}" != "$OPTS" ]; }
has_opti(){ [ "${OPTS/[${1,,}${1^^}]}" != "$OPTS" ]; }
# Instead of this functions you can disassemble args to chars and do fl_${i}='', to set vars
# Then use smth like this:  PR=${fl_V:+'make actions'}
fumake() { cmake -E chdir "$BUILD_DIR" cmake $BUILD_OPTIONS "$ROOT_DIR" && cd "$BUILD_DIR" && make install; }


if has_opt d ; then
    find $BUILD_DIR -maxdepth 1 \
         ! -iname 'build'       \
         ! -iname 'libs'        \
         -exec rm -Rf '{}' ';'
    echo "Deleted all but 3rd party libs"
fi

if has_opt D ; then
    rm -Rf "$BUILD_DIR"
    echo "Deleted completely"
fi


# Build project
if has_opti b ; then
    #
    [ "$PREFIX_DIR" != "$ROOT_DIR" ] && echo -en "\033[1;33;40m DIR \033[0m $ROOT_DIR\n"
    mkdir -p $BUILD_DIR

    if [ -f "$TARGETS_DIR/$FLAGS" ]; then
        BUILD_OPTIONS=$(cat "$TARGETS_DIR/$FLAGS" | "$SIR/decorate-options" )
        if [ -z "$BUILD_OPTIONS" ]; then
            echo "ERROR: empty build options. Continue with defaults."
        fi
    fi

    [ -f "$BIN_PR" ] && mv -f "${BIN_PR}" "${BIN_PR}.old"
    if has_opt B; then # Building with logs
        echo -e $BUILD_OPTIONS
        fumake
    else # Building with progressbar
        if has_opt w; then FFLG='w'; fi
        exec 3>&1 # create file desc
        ELOG=$( { fumake 1> >("$SIR/filter-pgbar" 1>&3) \
               2> >(echo -e $("$SIR/filter-build" "$PREFIX_DIR" $FFLG ) 1>&2); \
           } 2>&1)
        exec 3>&- # release file desc

        if [ "$ELOG" == "" ]; then
            echo -en "\033[1;37;42m OK \033[0m\n"
        else
            echo -en "\033[1;37;41m FAILED \033[0m\n"
            echo "$ELOG" #| column -t -c 3
        fi
    fi

fi

if has_opti c ; then
    echo -en "\033[1;30;43m CPPCHECK \033[0m\n"
    if has_opt C; then "$SIR/check-cppcheck" "$PREFIX_DIR" "--check-config"
    else "$SIR/check-cppcheck" "$PREFIX_DIR" ; fi
    # rats --language c --warning 2 .
fi

# App execution
PR_NM="$BIN_PR"
if [ -f "${PR_NM}" ]; then
    rm -f "${PR_NM}.old"
    if (has_opti v || has_opti g) && ! has_opti r; then OPTS="${OPTS}r"; fi
else
    PR_NM="${PR_NM}.old"
    if has_opti b; then
        OPTS="${OPTS/[rR]}"
    fi
fi

# Run tests
if has_opti r; then

    PR="$PR_NM $GARGS"
    if has_opti v; then
        echo -en "\033[1;35;40m VALGRIND \033[0m"
        CHK="$SIR/check-valgrind"
        PR="$CHK '$PR_NM' '$GARGS'"
        if has_opt V; then PR="$PR --quiet"; fi
        #  initiates your program and stops just before starting it, much like GDB does, waiting for connection and commands.
        #  http://stackoverflow.com/questions/4243126/program-crashes-with-0xc000000d-and-no-exceptions-how-do-i-debug-it
        VGDB="--vgdb=full --vgdb-error=0"
        if has_opti g; then
            PR="$PR $VGDB"
            eval $PR &
        fi
    fi
    if has_opti g; then
        # You need for gcc: -g -O0  # To request debugging information
        #   Many C compilers are unable to handle the `-g' and `-O' options together
        echo -en "\033[1;37;40m GDB \033[0m"
        GDBC="-ex 'set print elements 2048'" # Setting number-of-elements to zero means that the printing is unlimited. (def: 200)
        if has_opti v; then GDBC="$GDBC -ex 'set non-stop off' -ex 'target remote | vgdb'"; fi
        CHK="gdb -q -cd '$BIN_DIR' $GDBC --args"
        PR="$CHK '$PR_NM' '$GARGS'"
        if has_opt r; then OPTS="${OPTS/r}R"; fi
        # On gdb output you can pipe to simple valgrind filter (w/o line removing) to get colored output
    fi

    [ "${PR_NM/%.old}" != "$PR_NM" ] &&  echo -en "\033[1;37;41m OLD \033[0m"
    cd "$BIN_DIR"

    # compact log
    if has_opt R ; then
        echo $PR
        eval $PR
    else
        eval $PR 2>&1 | "$SIR/filter-gtest" "$PREFIX_DIR"
    fi
    if [ ${PIPESTATUS[0]} -eq 139 ]; then
        echo -en "\033[1;37;40m SEGFAULT \033[0m\n"
        exit 1
    fi
    if has_opti g && has_opti v; then vgdb -c v.kill; fi
fi

if has_opti p ; then
    echo -en "\033[1;30;43m PROFILER \033[0m\n"
    "$SIR/check-gperftools" "$PREFIX_DIR"
fi

# Valgrind-Log
if (has_opti l && (! has_opti b || (has_opti b && has_opti r))) && [ -f "${PR_NM}.log" ]; then
    if has_opt L ; then FLT=less; fi   #FLT="-v -e '\\.' -e '^\\s*$'"
    cat "${PR_NM}.log" | "$SIR/filter-valgrind" "$PREFIX_DIR" | ${FLT:-'cat'}
fi


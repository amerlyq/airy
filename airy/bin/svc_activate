#!/bin/bash -eu
set -euo pipefail

# THINK: rename to 'r.systemd-cfg' or cross-pltf wrapper 'r.svc-cfg'
# BAD: systemd units can't be used for init.d and upstart
#   * split script into several: r.{systemd,initd,upstart}-cfg
#   * access init scripts by proxy of r.svc -- linked by mkdef
#   SEE: http://unix.stackexchange.com/questions/196166/how-to-find-out-if-a-system-uses-sysv-upstart-or-systemd-initsystem
# THINK: embed 'envsubs' directly into 'linkcp'
# BAD: remove implicit loading from './unit' -- it's unobvious

dst=/etc/systemd/system
from=./unit
sudo=sudo
envsubs=0
A=''  # system-wide

# copy/enable/ENV/re-*/run/user
opts=; while getopts 'ceEf:rRu' o; do case $o in :|'?') exit 1
;; u) A=--user; sudo=''; dst=~/.config/systemd/user
      # ALT:CHECK:(faster startup) /etc/systemd/user
;; f) from=$OPTARG
;; E) envsubs=1
esac; opts+=$o; done; shift $((OPTIND - 1))
has(){ [[ $opts =~ [$*] ]]; }
(($#)) || { echo "No svc list"; exit 1; }


# NOTE: find out current init system
if hash systemd-notify &>/dev/null \
  && systemd-notify --booted; then

doreload(){ $sudo systemctl $A daemon-reload; }
isenable(){ systemctl $A is-enabled "$@" &>/dev/null; }
doenable(){ $sudo systemctl $A enable "$@"; }
reenable(){ $sudo systemctl $A reenable "$@"; }
isrun(){ systemctl $A is-active "$@" &>/dev/null; }
dorun(){ $sudo systemctl $A start "$@"; }
rerun(){ $sudo systemctl $A restart "$@"; }

else # WARN:BAD: 'if distro ubuntu' -- messed 14.10, systemd 16.04
# ALT: if ! /etc/init.d/"$1" status | grep -qsw 'running'; then

doreload(){ return 0; }
isenable(){ return 1; }
doenable(){ $sudo update-rc.d "$@" defaults; }
reenable(){ $sudo update-rc.d -f "$@" remove; doenable "$@"; }
isrun(){ return 0; }
dorun(){ $sudo service "$@" restart 2>&1; }
rerun(){ dorun "$@"; }

fi


# MAYBE: for file searching move to sep script or cfgsetup func
rel_search(){ local f=$1
  if [[ ${f:0:1} == / ]]; then f=$f
  elif [[ -f $from/$f ]]; then f=$from/$f
  elif [[ -f ./$f ]]; then f=$f
  else { echo "Not found '$f'"; exit 1; }
  fi && printf '%s\n' "$(readlink -e "$f")"
}

copyall(){ local t tmp have_changed=0
  tmp=${TMPDIR:-/tmp}/svc
  trap "rm -rf '$tmp'" RETURN
  for f in "$@"; do
    f=$(rel_search "$f")
    if ((envsubs)); then
      t=${tmp:?}/${f##*/}
      env-subs -p "$f" "$t"
      f=$t
    fi
    t=${dst:?}/${f##*/}
    # NOTE: for diff to work -- always do 'envsubs'
    if ! diff -q "$t" "$f" &>/dev/null; then
      # ALT:TRY: $ systemctl link *.service
      linkcp -c "$f" "$t"
      have_changed=1
    fi
  done
  ((!have_changed)) || doreload
}

enableall(){ for f in "$@"; do
  if ! isenable "$f"; then doenable "$f"
  elif has f; then reenable "$f"
  else echo "-> @ $f"; fi 2>&1
done;}

runall(){ for f in "$@"; do
  if ! isrun "$f"; then dorun "$f"
  elif has R; then rerun "$f"
  fi 2>&1
done;}


# EXPL: split in stages -- to take dependency into account
has c && copyall "$@"
has e && enableall "$@"  # OR:ALSO: && $sudo systemctl $A disable "$f"
! has rR || runall "$@"

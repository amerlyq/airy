#!/bin/sh -eu

# FIND: preprocessors for files to replace my env-subs
#   => E.G. ~/.Xresources, autoconf, etc
# DEV: multipass replacement
#   => switch to replace only list of vars and don't touch others
#   => then in second pass replace all one more time
# ENH: split to 'env-subs' which extracts env and calls 'list-subs' with args for actual replacement
#   * 'list-subs' must work on /dev/stdin or 'VAR=5 ... -- file'
#   => this will allow to do 'env-subs' on subset
# DEV: optionally allow removing headings
#   IDEA: impl for ${VAR+\n$VAR}, etc
#   * for /^%{MULTILINE_BLOCK}/ remove heading newline
#   * for key = %{VALUE} remove heading space or even whole option
#   NEED: specify what is treated as heading in each case
# DEV: prefer working with stdin/stdout as pipe w/o supplying '-'

lp='%[{]'
mp='[A-Z_][A-Z_0-9]*'
rp='[}]'

# [Marker patterns]: l=left m=middle r=right
# d=dryrun i=inplace p=mkdir-p
opts=; while getopts 'dipl:m:r:' o; do case $o in :|'?') exit 1
;; [lmr]) declare ${o}p=$OPTARG
esac; opts+=$o; done; shift $((OPTIND-1))
has(){ [[ $opts =~ [$*] ]]; }

f=$1
t=${2:--}

has i && t=$(mktemp)
has d && t=-
[[ $t == - ]] && t=/dev/stdout
has p && mkdir -p "${t%/*}"

# WARN: unrestricted recursive substitution
# FIXME: -- endless loop for USER='%USER%' -- set depth limit ?
# ALT:BAD:(both empty and undef): if (length(v)==0)
gawk -vl="$lp" -vm="$mp" -vr="$rp" '{
  while(match($0, l m r)) {
    k = substr($0, RSTART, RLENGTH)
    k = gensub(l"("m")"r, "\\1", "1", k)
    if (!(k in ENVIRON)) {
      print "No env: "k > "/dev/stderr"
      exit 4
    }
    gsub(l k r, ENVIRON[k])
  }; print
}' "$f" > "$t"
# FIXME: if [[ -L $t ]] -> error / preremove / write-into

has d || ! has i || mv -f "$t" "$f"

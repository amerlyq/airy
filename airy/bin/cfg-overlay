#!/bin/bash
#%USAGE: ./$0 [<flags>...] [--] <tags>...
#%
#%VIZ. <tags> syntax (overlay modifiers)
#% * <tag>    (default mode) = not required for file to exist in both places
#% *?<tag>..  (optional) = silent ignore if file not found
#% * <tag>!   (override) = search inside only overlay path
#% *!<tag>..  (disable)  = THINK:DEV: skip this tag and suppress previous tags with same name
# DEV: preprocess escaping of user input e.g.  tag\! -> as "tag!"|mode=+
#% * <tag>!0  (override) = use only Nth of all paths (?as temporary fix?)
#% * <tag>+   (append)  = search order: {base -> path}, DEV: file must exist in both places
#% * <tag>-   (prepend) = search order: {path -> base}, DEV: file must exist in both places
#%
## Experimental BAD:(brittle): when base/path frequently changes
#  * <tag>!-1-1  (desc interval 3,2,1)
#  * <tag>!1--1  (asc  interval 1,2,3)
#  * <tag>!1,3   (selection sequence)
#
#%INFO: <env vars> $CFG_OVERLAY_{BASE,PATH,MODE,SUBST,PRINT}
#% -E! = ignore env vars (DFL, otherwise any "export" will cause system-wide disaster)
#% -E~ = fallback to env vars (USE: only enable on demand, when you really expect it)
#% -E+ = append env vars (after all flags)
#%THINK:DEV: reverse env composition
#% -F!E = ignore flags, use env
#% -F~E = fallback to flags
#% -F+E = append flags after env
#%
## INFO: performance: ~4ms total, THINK:DEV: self-compiling C util
#  * 2.3ms -- bash startup
#  * 0.4ms -- {args + func} parsing
#  * 0.3ms -- file searching
#  * 1.0ms -- print to tty
### ALT: create special overlay filesystem which possesses all necessary qualities of customized merge/override per file
# [_] TODO:FAIL on duplicate tags found (interchanging {<tag>, !<tag>} sequences are allowed)
#
set -euo pipefail -o noglob
# MAYBE: check $BASH_VERSION >= 4.4

die(){ echo "Err:(${0##*/}): $*" >&2; exit 1; }

# ALT:BAD: subshell performance: +2.2ms
#   IFS=: read -r -d '' -a dpaths < <(IFS=:; printf '%s:\0' "$*")
# ALT:BAD: ":some" => two elements
#   shopt -s extglob; a+=( ${*//+(:)/:} )
papp(){ local -rn a=$1; shift; local p IFS=:
  for p in $*; do [[ -z ${p:+x} ]] || a+=("$p"); done
}

# NOTE: allowed regex must be very tight -- otherwise some wrong tags will be parsed as similar ones
tag_rgx='^([?])?([-_./[:alnum:]]+)(([[:punct:]])([-,[:digit:]]+)?)?$'
# tag_rgx='^([[:punct:]])?([-_./[:alnum:]]+)(([[:punct:]])([-,[:digit:]]+)?)?$'
fmt_print='%s\n'
env_mode='!'
ov_mode='+'
ov_base=()
ov_path=()
ss_mask=()
query_tagnames=0
query_uniqpath=0
verbose=0

# [_] MAYBE: instead of -q/-Q use -L/-P OR -qL/-qP

#%INFO: <flags>
opts=; declare -A opta
while getopts 'b:E:hM:o:p:qQs:v' o; do case $o in :|'?') exit 1
;; h) exec sed -rn '1d;/^(.*\s)?#%/s///p' "$0"  #% h = help
;; v) verbose=1                 #% v = verbose (only for debug)
;; q) query_tagnames=1          #% q = query tag names with stripped control pref/sfx
;; Q) query_uniqpath=1          #% Q = query base+path with dups and empty removed
;; E) env_mode=$OPTARG          #% E = env merge modifier, DFL=!, VIZ. {~=fallback +=append !=ignore}
;; p) opta[fmt_print]=1; fmt_print=$OPTARG       #% p = printf format for generic results, DFL=%s\n, e.g. [@%s\0]
;; s) opta[ss_mask]=1; ss_mask+=( "$OPTARG" )    #% s+= search substitute masks, DFL=({}), e.g. [some/{}.conf]
;; b) opta[ov_base]=1; papp ov_base "$OPTARG"    #% b+= overlay basis , DFL=(<empty>), e.g. [/airy/cfg]
;; o) opta[ov_path]=1; papp ov_path "$OPTARG"    #% o+= overlay paths (user's personal), DFL=(<empty>), e.g. [/private/cfg:/public/cfg]
;; M) opta[ov_mode]=1; ov_mode=$OPTARG           #% M = default modifier for overlay composition, DFL=+
esac; done; opts+=$o; shift $((OPTIND-1))        #%   VIZ. {-=prepend +=append !=override(strict), ~=fallback(loose)}
                                                 #%   ('+=append' by default is user-friendly -- allows to extend base configs)
#%-----
#% base = unchangable part of underlying *airy* system, outside of user's control, can change with every update
#% path = part of user's own public/private repos, provides full access, can be frozen whenever needed
#%

[[ $env_mode == [~+!] ]] || die "unknown env vars modifier '$env_mode'"

if [[ $env_mode != '!' ]]; then
  # ALT:(${#ov_base}):BAD: user can pass [-b ':'], which is technically empty
  # ALT:($opts =~ b):BAD:NEED sync flag letters above and below
  [[ -z ${opta[ov_base]+x} || $env_mode == [+] ]] && papp ov_base "${CFG_OVERLAY_BASE-}"
  [[ -z ${opta[ov_path]+x} || $env_mode == [+] ]] && papp ov_path "${CFG_OVERLAY_PATH-}"
  [[ -z ${opta[ss_mask]+x} || $env_mode == [+] ]] && papp ss_mask "${CFG_OVERLAY_SUBST-}"
  [[ -z ${opta[ov_mode]+x}   && ${CFG_OVERLAY_MODE+x}  ]] && ov_mode=$CFG_OVERLAY_MODE
  [[ -z ${opta[fmt_print]+x} && ${CFG_OVERLAY_PRINT+x} ]] && fmt_print=$CFG_OVERLAY_PRINT
fi


debugprint(){ :; } && ((verbose)) &&
debugprint(){ local -rn a=$1
  echo "[$1]" >&2
  for v in "${a[@]}"; do printf ' * %s\n' "$v"; done
}

compose_by_modifier(){ local -rn a=$1; local -r mod=$2
  case $mod
  in !) a=( "${ov_path[@]}" )
  ;; +) a=( "${ov_base[@]}" "${ov_path[@]}" )
  ;;[-~]) a=( "${ov_path[@]}" "${ov_base[@]}" )
  ;; *) die "unknown overlay modifier '$mod'"
  esac
}

# DEV: sequence; desc interval
select_by_designator(){ local -rn a=$1; local -r sfx=$2
  while [[ -n ${sfx:+x} ]]; do
    [[ $sfx =~ ^[0-9]+$ ]] && a=( "${a[sfx]}" ) && break
    [[ $sfx =~ ^[0-9]+-[0-9]+$ ]] && a=( "${a[@]:(${sfx%%-*}):(${sfx#*-}-${sfx%%-*})}" ) && break
    die "unknown suffix format '$sfx'"
  done
}

remove_duplicates(){ local -rn a=$1; local -A dups; local i v
  for i in "${!a[@]}"; do v=${a[$i]}
    if [[ ${dups["$v"]+x} ]]; then
      unset a[$i]
      continue
    else dups["$v"]=1; fi
  done
}

select_dirs(){ local -r var=$1 mod=$2 sfx=$3
  compose_by_modifier "$var" "$mod"
  select_by_designator "$var" "$sfx"
  remove_duplicates "$var"
  debugprint "$var"
}

gen_names(){ local -r var=$1 tag=$2; local -rn a=$var
  if [[ ${ss_mask[@]:+x} ]]
  then a=( "${ss_mask[@]//\{\}/$tag}" )
  else a=("$tag"); fi
  debugprint "$var"
}

# ALT:BAD: bad performance: +4.0ms and "find" isn't flexible enough for subdir names
#   find -H "${dpaths[@]}" -maxdepth 1 -xtype f \( -false "${fnames[@]}" \) -print -quit
find_existing(){ local -r var=$1; local -rn a=$var da=$2 fa=$3
  for d in "${da[@]:?}"; do
    for f in "${fa[@]:?}"; do
      [[ -f $d/$f ]] || continue
      a+=( "$d/$f" )
    done
  done
  debugprint "$var"
}

# ALT:BAD: brittle globbing, may require 'shopt -s extglob'
#   case $tag in *?[-!+]?*) sfx=${tag#*!}; tag=${tag%$sfx}; mod=${tag:(-1)}; tag=${tag%?}
parse_tag(){ local expr=$1; local -rn _opt=$2 _nm=$3 _mod=$4 _sfx=$5
  [[ $expr =~ $tag_rgx ]] || die "tag '$expr' has wrong format"
  _opt=${BASH_REMATCH[1]}
  _nm=${BASH_REMATCH[2]}
  _mod=${BASH_REMATCH[4]:-$ov_mode}
  _sfx=${BASH_REMATCH[5]}
  ((!verbose)) || printf '%s=[%s|%s|%s]\n' "$_nm" "$_opt" "$_mod" "$_sfx" >&2
}

search(){ local tag=$1 opt nm mod sfx dpaths fnames found
  parse_tag "$tag" opt nm mod sfx
  select_dirs dpaths "$mod" "$sfx"
  [[ ${dpaths[@]:+x} ]] || die "empty search list for '$tag' tag (-b/-o)"

  gen_names fnames "$nm"
  find_existing found dpaths fnames

  if [[ ${found[@]:+x} ]]; then
    [[ $mod == "~" ]] && found=("${found[0]}")
    printf "$fmt_print" "${found[@]}"
  elif [[ $opt != '?' ]]; then
    die "tag '$tag' not found"
  fi
}


debugprint ov_base
debugprint ov_path

if ((query_uniqpath)); then
  # THINK:DEV: allow [-M !1,3 ] to specify "$sfx" for queries
  select_dirs dpaths "$ov_mode" ''
  [[ -z ${dpaths[@]:+x} ]] || printf "$fmt_print" "${dpaths[@]}"
  exit
fi

(($#)) || die "empty requested tags list (\$@)"

if ((query_tagnames)); then
  # DEV: substitute tag/mod/opt/sfx in fmt_print
  for tag; do
    parse_tag "$tag" _ tag _ _
    printf "$fmt_print" "$tag"
  done
  exit
fi

for tag; do
  search "$tag"
done

#!/bin/bash
#%USAGE: ./$0 [-M{!+-}] [-b /airy/cfg] [-o /private/cfg:/public/cfg] [-s {}.conf] <tag|tag[!+-]>...
#%INFO: correct tags match ~ /^[?]?(.+)(\W([-,0-9])?)?/
#% * last char is optional control non-word
#%   <= MAYBE:DEV: escaping of user input e.g.  tag\? -> as "tag?"|mode=+
#% * after that is optional selection suffix
#%VIZ. overlay fallback syntax
#% * <tag>    (default mode)
#% * <tag>!   (override) = search only inside overlay path
#% * <tag>!1  (override) = use only Nth of all paths (as temporary fix)
#% * <tag>+   (append  = search default -> overlay)
#% * <tag>-   (prepend = search overlay -> default)
## Experimental BAD: brittle when -b/-o changes
#% * ?<tag>.. (DEV: default, no error even if not found)
#  * <tag>!-1-1  (desc interval 3,2,1)
#  * <tag>!1--1  (asc  interval 1,2,3)
#  * <tag>!1,3   (sequence)
# MAYBE: generate errors if +/- found only in base OR in path ? (assuming +/- always requires existing of both)
#   BAD: default "<tag>" will generate error if found only in single place
#   ?? tweak behavior of default <tag> => append but w/o error if found in single place ??
#     BAD: unsymmetrical: can't apply prepend w/o error
#%
set -euo pipefail -o noglob

papp(){ declare -rn a=$1; local dpaths p; shift
  IFS=: read -r -d '' -a dpaths < <(IFS=:; printf '%s:\0' "$*")
  for p in "${dpaths[@]}"; do [[ -z ${p:+x} ]] || a+=("$p"); done
}

# TEMP:
CFG_OVERLAY_BASE=~/.local/airy/bitlbee/cfg
CFG_OVERLAY_PATH=~/aura/erian/mods/bitlbee/cfg

papp ov_base "${CFG_OVERLAY_BASE-}"
papp ov_path "${CFG_OVERLAY_PATH-}"
papp ss_mask "${CFG_OVERLAY_SUBS-}"
ov_mode=${CFG_OVERLAY_MODE-+}

while getopts 'b:hM:o:s:' o; do case $o in :|'?') exit 2
;; h) exec sed -rn '1d;/^(.*\s)?#%/s///p' "$0"  #% h = help
;; b) papp ov_base "$OPTARG"    #% b+= overlay basis, DFL=(<empty>), e.g. [/airy/cfg]
;; o) papp ov_path "$OPTARG"    #% o+= overlay paths, DFL=(<empty>), e.g. [/private/cfg:/public/cfg]
;; s) ss_masks+=( "$OPTARG" )   #% s+= search substitute masks, DFL=({}), e.g. [some/{}.conf]
;; M) ov_mode=$OPTARG           #% M = default overlay mode, DFL=+
esac; done; unset o; shift $((OPTIND-1))
(($#)) || { echo "Err: need args"; exit 1; }


search(){ local nm=$1 mode=$ov_mode sfx dpaths fnames found

  case $nm
  in *?[-!+]?*) sfx=${nm#*!}; nm=${nm%$sfx}; mode=${nm:(-1)}; nm=${nm%?}
  ;; *?[-!+]) mode=${nm:(-1)}; nm=${nm%?}
  esac

  case $mode
  in !) dpaths=( "${ov_path[@]}" )
  ;; +) dpaths=( "${ov_base[@]}" "${ov_path[@]}" )
  ;; -) dpaths=( "${ov_path[@]}" "${ov_base[@]}" )
  ;; *) echo "Err: wrong mode '$mode'"; exit 1
  esac

  while [[ -n ${sfx:+x} ]]; do
    [[ $sfx =~ ^[0-9]+$ ]] && dpaths=( "${dpaths[sfx]}" ) && break
    [[ $sfx =~ ^[0-9]+-[0-9]+$ ]] && dpaths=( "${dpaths[@]:(${sfx%%-*}):(${sfx#*-}-${sfx%%-*})}" ) && break
    echo "Err: unknown suffix format '$sfx'"; exit 1
  done
  # echo DP: "${dpaths[@]}"

  if ((${#ss_masks[@]})); then
    for m in "${ss_masks[@]}"; do
      fnames+=( "${m//\{\}/$nm}" )
    done
  else fnames=( "$nm" ); fi
  # echo FN: "${fnames[@]}"

  [[ ${dpaths[@]:+x} && ${fnames[@]:+x} ]] || exit 5

  # NOTE: "find" isn't flexible enough for names in subdirs and has bad performance: 0.6s -> 1.0s / 100 runs
  for d in "${dpaths[@]}"; do
    for f in "${fnames[@]}"; do
      [[ -f $d/$f ]] || continue
      found+=( "$d/$f" )
    done
  done
  [[ ${found[@]:+x} ]] || exit 6

  printf '%s\n' "${found[@]}"
}

search "$@"

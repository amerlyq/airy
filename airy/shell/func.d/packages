# vim: ft=sh
source ~/.shell/profile
source ~/.shell/func.d/system
trap_errors
cwd_script

# Re-install even if git pull is up-to-date (for broken builds)
# u=update U=update_always
while getopts 'mrsuU' o; do case $o in :|'?') die 1
esac; cfgOptAdd "$o"; done; shift $((OPTIND - 1))

mkdir -vp "${CURR_DIR_PKG:?}"

do_if() {
  local cmd grp obj=P pkgs=() bQuiet=0 OPTIND=1

  # USE 'pacman -Ql <pkg>' to list files  ALT: pkgfile
  while getopts "qac:d:f:l:p:P:y:Y:" o; do case $o
  in :|'?') die 1 "Need value for '-${o}'" >&2
  ;; a) obj=$o  # always
  ;; [dflpPyY]) obj=$o; grp=$OPTARG
  ;; c) cmd=$OPTARG
  ;; q) bQuiet=1
  esac; done; shift $((OPTIND-1))

  # Statistics NEED: ./odd-pkgs
  if [[ $cmd == true || $cmd =~ (pacman|pacaur|yaourt) ]]
  then printf '%s\n' "$@" >> "$cache/install.txt"; fi
  [[ ${AIRY_DRY_RUN-} ]] && return

  # Skip ignored pkgs
  if [[ $cmd =~ pacman ]]; then
    declare -n ign=PKG_IGNORE
  elif [[ $cmd =~ (pacaur|yaourt) ]]; then
    declare -n ign=AUR_IGNORE
  fi
  local ignt=" ${ign[@]+${ign[*]}} "

  for ((i=1;i<=$#;++i)); do
    [[ $ignt =~ " ${!i} " ]] && set -- "${@:1:i-1}" "${@:i+1}"
  done

  # NOTE: with 'grp' check whole group as whole
  #   without 'grp' check each arg individually
  if ! cfgOpt uU && [[ ${grp-} ]]; then
    if has_such "${obj:?}" "${grp:?}"
    then ((bQuiet)) || echo "I: $* ($obj=$grp)"; return 0
    else pkgs+=("$@"); fi
  else while (($#>0)); do
    if ! cfgOpt uU && has_such "${obj:?}" "$1"
    then ((bQuiet)) || echo "I: $1"
    else pkgs+=("$1"); fi; shift
  done; fi

  ((!${#pkgs[@]})) || ${cmd:?} "${pkgs[@]}"
}

mod_have(){ do_if -c 'true' "$@"; }
pip_inst(){ do_if -c 'sudo pip3 install --upgrade' "$@"; }
cab_inst(){ do_if -c 'cabal install' "$@"; }
iskip(){ declare -n a="$1"; (( ${#a[@]} ))||return 0
  printf -- '--ignore '; (IFS=,;printf '%s\n' "${a[*]// /\\ }")
}


if distro ubuntu; then
  has_pkg(){ dpkg -l "$@" &>/dev/null; }  # CHECK: if working
  pkg_inst(){ do_if -c 'sudo /usr/bin/apt-get --yes install' "$@"; }
  # +++ REF:(checkinstall): https://www.dwheeler.com/essays/automating-destdir.html
  #   sudo checkinstall -D --pkgname=dlt-daemon --default  # ... make install PREFIX=/usr DESTDIR=/local
  pkg_make(){ sudo checkinstall --default "$@"; }
  deb_wget(){ wget_inst -d "$1" && sudo dpkg -i "$CURR_DIR_PKG/${2:-${1##*/}}"; }
  deb_inst(){ do_if -c 'deb_wget' "$@"; }
  ppa_add(){
    local addr=${1#ppa:}
    addr=${addr#*http://}
    addr=${addr%% *}
    grep -qrF "$addr" /etc/apt/sources.list /etc/apt/sources.list.d/ && return 0
    sudo /usr/bin/add-apt-repository ${2---yes} "$1"
    sudo /usr/bin/apt-get update
  }
  gem_inst(){ do_if -c 'sudo gem install' "$@"; }

elif distro arch; then
  has_pkg(){ pacman -Qq "$@" &>/dev/null; }
  _ipacman(){ local c=("$1"); shift
    c+=( -S --needed --noconfirm )
    [[ $1 == --asdeps ]] && { c+=("$1"); shift; }
    do_if -c "${c[*]}" "$@"
  }
  pkg_inst(){ _ipacman 'sudo pacman' "$@"; }
  pkg_make(){ sudo make install "$@" || exit; }  # FIXME: replace by arch-specific
  has_pr yaourt && ayr_inst(){ _ipacman 'yaourt' "$@"; }
  if has_pr pacaur; then
    aur_inst(){ _ipacman 'pacaur --aur' "$@"; }
    loc_inst(){ do_if -c 'pkg_make' "$@"; }
    # WARN: pkgs not from AUR can break pacaur
    pkg_make(){ local p d m=$PWD
      p=$(readlink -e "${1:?}"); shift
      ( set -Eu; source "$p"; set -Eu
        d=$CURR_DIR_PKG/$pkgname
        mkdir -p "$d" && cd "$d"
        # cd "$(dcache "pacaur/$pkgname")"

        # NOTE:(copy): pkgver and updpkgsums changes PKGBUILD
        #   OR:(symlink): always commit updated PKGBUILD after changes
        linkcp -ct "$PWD" "$p"
        linkcp -t "$PWD" "$m/patches"/*.{diff,patch}

        # WARN:(-f): removed 'force' to mitigate idle rebuild
        #   => enforce rebuild by incrementing 'pkgrel=1' or 'epoch' in PKGBUILD
        # THINK: using '-C' for clean builds (re-dld all src)
        # BAD: $?=0 when coflict on install
        if cfgOpt U
        then makepkg -si --force --noconfirm "$@"  # REF: $ makepkg [ENVVAR=...]
        else makepkg -si --needed --noconfirm "$@"
        fi
        # updpkgsums &&  # REM: 'makepkg' has flag for this
        # source PKGBUILD  # EXPL: updated on build values for pkgver, etc
        # paccache -df "$pkgname"  # REM: prefer to keep old versions
        # BAD:(yes): -- can answer some wrong question
        # sudo sh -c 'yes | pacman -U --needed "$@"' '' \
        #  "${pkgname}-${pkgver}-${pkgrel}-"*.pkg.tar.xz
        # NOTE: remove '--noconfirm' -- to read answer from stdin
        # BET: wrap in 'expect' to answer only question about conflict
        # BUT: you need 'expect' installed on clean system...
        # $ expect -c 'spawn pacman -Syu
        #     expect { -re "^in conflict.*" { send "yes\r"; interact } }'
        # ALSO:BAD: replace on conflict not always good
        #   => if user temporarily replaced pkg (neovim -> neovim-git)
        # ALT: wait fail, manually remove package, then 'make continue'
        # sudo pacman -U --needed --noconfirm \
        #   "${pkgname}-${pkgver}-${pkgrel}-"*.pkg.tar.xz
      ) # WARN:(|| return): suppresses errors in subshell -- don't use it
      # SEE:(set -E subshell): http://unix.stackexchange.com/questions/48533/exit-shell-script-from-a-subshell
    }
  elif has_pr yaourt; then aur_inst(){ ayr_inst "$@"; }
  fi
  gem_inst(){ do_if -c 'gem install' "$@"; }
fi

# DEV: sep 'abyss -i' for these functions
pkg_build() {
    # It can be, that 'autoreconf' can replace my own vehicle.
    local prdir=$1; shift; cd "$prdir"

    cabal=$(find . -maxdepth 1 -name '*.cabal' -print -quit)
    if [[ $cabal ]]; then
      cabal install "$cabal"
    elif [[ -f ./CMakeLists.txt ]]; then
      mkdir -p ./build && bdir="$_"
      cmake -E chdir ./build cmake "" "$prdir" || return
      cd ./build && pkg_make

    elif [[ -f ./Makefile ]]; then make && pkg_make
    elif [[ -f ./setup.py ]]; then sudo python setup.py install
    elif [[ -f ./build.sh ]]; then ./build.sh && pkg_make
    elif [[ -f ./configure.ac ]]; then
      # ALT: auto inst necessary *.h, etc which 'NOT FOUND'
      #   $ sudo auto-apt update && auto-apt -y run ./configure && checkinstall -D
      mkdir -p ./build && cd ./build
      [[ -f ../autogen.sh ]] && ../autogen.sh || autoreconf --install || return
      ../configure $@ && make && pkg_make

    else echo "Error: unsupported build system. Build manually."; fi
}


wget_inst() {
  local dobuild=1 link fl prdir; case "$1" in -d) dobuild=0; shift ;; esac
  fl=$CURR_DIR_PKG/${1##*/} && prdir=${fl%.tar.gz}
  [[ "${1//'://'}" == $1 ]] && link="https://sf.com/$1" || link="$1"

  if [[ -d "$prdir" ]]; then rm -rf "$prdir"; fi
  wget -c "$link" -O "$fl" --trust-server-names \
    --user-agent="Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) \
Gecko/20100101 Firefox/12.0" #--max-redirect=2

  if ((dobuild)); then
    atool -X "$prdir" "$fl"
    pkg_build "$prdir";
  fi
}

# DEV: replace/merge by 'git-up'
git_pull() { [[ -d $1 ]] && cd "$1" || return
  git fetch origin master && if [[ $(
    git rev-list HEAD...origin/master --count
  ) == 0 ]]; then git_is_the_same=1; fi

  if git diff-files --quiet --ignore-submodules --
  then git pull --rebase --verbose
  else git stash && git pull --rebase --verbose && git stash pop
  fi
}

# TODO: rewrite, so pull on -d worked only with -u
# ALSO: need to choose where to copy
git_inst() { # $0 -d pr_name
  local dobuild=1 link prdir; case "$1" in -d) dobuild=0; shift ;; esac
  prdir=${1##*/} && prdir=$CURR_DIR_PKG/${prdir,,}
  [[ ${1//'://'} == $1 ]] && link="https://github.com/$1" || link="$1"

  #--depth 1 -- disabled by cause of automerges
  if [[ -d $prdir ]]; then git_pull "$prdir"
  else git clone --depth 1 "$link" "$prdir" && cd "$prdir"; fi

  if ! cfgOpt uU && ((${git_is_the_same-})); then
    echo "C: Up to date, no re-build"
    return 0
  fi
  unset git_is_the_same
  ((!dobuild)) || pkg_build "$prdir"
}


hg_inst() {
  local dobuild=1 link prdir; case "$1" in -d) dobuild=0; shift ;; esac
  prdir=${1##*/} && prdir="$CURR_DIR_PKG/${prdir,,}"
  [[ "${1//'://'}" == $1 ]] && link="https://bitbucket.com/$1" || link="$1"

  if [[ -d $prdir ]]; then cd "$prdir" && hg pull
  else hg clone "$link" "$prdir" && cd "$prdir"; fi
  ((!dobuild))|| pkg_build "$prdir"
}

ALT:(dot-mgmt)
  TRY: https://github.com/thoughtbot/rcm

!! NOTE: all [airy] system uses only local ./_build paths
!! NOTE: use $ sudo -k $ to test applying continuously

BAD: env-subs breaks when VAR don't exists = like $DISPLAY by SSH
BUT: we can't define it to :0 -- as that var is essential for setup
  and setup _must_ break when smth isn't right
WARN: how to be on clean system from console -- for initial setup ?

pkglst
  2017-03-12 [X] rename private file ./pkgs -> ./mods
  !!! [_] remove sourcing ./pkgs file from 'profile' with reading by 'readarray'
    = (long operation -- sourced in each cfgsetup)
  [_] TODO: mark as obsolete (or another word instead of 'obsolete' -- SEE how AUR marks such old cases)
    VIZ: surf uzbl vimb eclipse java latex sql tizen webex synergy urxvt i3 tray
  [_] TODO: check AIRY_MODS on errors (err on inexistant pkgs and warn on duplicates)
    => keep 'r.airy-find-pkgs' script, but replace it by direct access to paths in ./pkg/* by ./run
  [_] apply unique to non-sorted lists -- to reorder some items in top of list
    E.G. AIRY_MODS=( xorg ... sorted list | unique )
    BET: use 'tsort' and raise err on repetition
  [_] airy dirs structure
    2017-03-12 [X] ls ./airy/* -- flat list
    2017-03-12 [X] _build
    [_] _obsolete  # ALT: use tags: obsolete instead and filter-out from auto-tag 'active'
    [_] _site  # aux gen from mods
    2017-03-12 [X] _doc  # notes + tasks
    2017-03-12 [X] airy   # mng 'airy' by itself -- add to ./pkgs
  2017-02-09 [X] TODO: install, notes => redistribute
  [_] TODO: vim diff between list ./pkg/* and file ./pkgs to easily see and add new pkgs
    => embed into makefile
  [_] TODO: compare all pacman pakages from AIRY_MODS with installed on system
    and suggest to user to remove excessive ones
    (after reducing AIRY_MODS to maintain cleaner system)
  2017-02-09 [X] FIND: soft to sort deps graphs by before/after -- maybe there are some in AUR ?
    $ sed 'deps' | tsort
      https://en.wikipedia.org/wiki/Tsort
    ALT: https://sourceforge.net/projects/dep-trace/
  [_] DEV extract 'deps:' and apply 'tsort' on them :: split ./airy/ctl scripts
    [_] gather '-a' all mods from all locations
    [_] sort mods intervening
      (? HOW to make mutual deps after/before for identically named pkgs ?)
    [_] create table: name, repo/name, fullpath
    [_] sort table topologically
    [_] reuse these parts of funcs orthogonally everywhere in airy
    [_] after tsort by deps graph, use numeric stable sort by priority 'coef'
      = so, pacman/vim/ranger will be at the top
  [_] DEV: individual 'deps:' in setup/install/update/recache
    [_] 'wide' mode : gather all 'deps:' in single list before processing
    [_] 'depth' mode : use 'deps:' separately
    [_] THINK: individual deps per script's execution ?
  [_] split 'deps:'
    * required (r.xorg in ./setup -- BUT! not always, really) and optional (r.n in ./run )
    * necessary at 'setup' and at 'runtime'
  [_] TODO!!! reorder pkg: firstly -- the most necessary tools (zsh,vim,ranger)
    = so even if system breaks, it must become somewhat more usable then default to fix all troubles
    => ENH: append to AIRY_MODS instead of overwrite
      * HACK:(non-robust): make reasonable default group with necessary deps in default system ~/.shell/profile
        BUT: I can't enforce 'xorg' to be present on all systems
          ? => therefore reasonable default is impossible ?
  [_] TODO: move 'defaults' in its own module and add as last entry of list
    when using 'r.airy -d' (NEED: replace '-d' for recache by smth else)
    [_] WARN: must be added after reading cached list, not before !!
      BUT: all mods must be gathered from all locations
  [_] BET: poll 'defaults' script after each *mod* to populate symlink immediately
    [_] Compare *mod* with user defaults config
    $ cat private/defaults
      # <mod> <sym1> [<sym2>..]
      vim editor
      st r.t
    [_] THINK: use general 'defaults' in *airy* and augment/override by user
    [_] Implement fallback in xmonad for defaults if not found
      r.t -> st (from user defaults, if found) -> any found term
        => must be evaluated on the sight -> as each sys change may tweak resulting app to launch
      BUT: how to use such defaults in general for any other app point ?
        Call all apps from general wrapper which evaluates fallbacks ?
    [_] ALT: after clean-up immediately populate all 'r.*' links from defaults
      BAD? affects only 'defaults' and ignores all other 'r.*' even if them exist
      ALT: more stability: do pacman -Syy, then install vim/ranger/etc, and only then pacman
      BET: user PKGBUILDs to pinpoint removed/added files per mod


filter-mods
  [_] script 'cache-mods' to gen all mods *db*
  [_] CHG: filter-mods :: grep *db* instead of using 'find -regex'
    [_] match mods by //name and //sub/path
    [_] allow explicit ./rel and /full paths to mods -- even if not in *db*
  [_] FIXME: check wrong entries in AIRY_MODS/SKIP (like mistake with 'browsers')
    ~ err on any entry not found in cached *db*
  [_] boolean ops priority :: exp-skip > exp-list > imp-skip > imp-list
    # list -- skip => interception
    path/mod -- path/ => path/mod
    path/mod -- path/mod => _none_
  [_] THINK: find errors: *mods* with same name, but different goal
    + user private settings must be allowed as pre/post hooks
      => THINK: sep private user mods (as any other repo)
        [_] make explicit user settings only as ./pre , ./post hooks
          OR: extension ./setup-pre, ./setup-post and complete override by ./setup
        [_] ALT: use number prefix like in 'config.d' for relative reordering
          +++ determine order between all hooks/extensions/overrides
          * < 50-* = pre hooks
          * = 50-* = airy mods (assign as automatic DFL value, read from VAR in *airy*)
          * > 50-* = post hooks
          BET: multiple hook points 20/50/80 for hooks between op levels
            = (symlinks, gens, etc) -- *mod*-specific, if general isn't possible
          BET: sfx instead of prf :: *-40 for sorting
        [_] TRY:ALSO: sep numbering/ordering for install/setup/update/recache
        [_] rename private ./mods -> ./hooks ?
    - but diff mods with same name -- aren't allowed


maint
  2017-02-09 [X] encapsulate deploy system into independent 'airy' mod
  2017-02-04 [X] rename 'setup' to 'maint' OR 'ctl' ALT: use root Makefile
  2017-02-09 [X] ./maint must be simple wrapper and actually call ./airy/run
    => applies r.airy to each mod inside ./pkg dir
  2017-01-30 [X] MOVE colorizing stuff in ./func.d OR:BET: ./bin/pretty
  2017-02-20 [X] MOVE ./func.d -> *airy*
  [_] one list install to accelerate process
    simply check status of apt-get =100
  Options
    [$] Simultaneously -i -u -- doing all
    2017-02-09 [X] ./setup -U -- do only ./update w/o ./setup
    2017-02-09 [X] untie install-u and setup-u for short comprehensive orthogonal options
    [_] make opt '-c' for cleanup-only mode
      = symlinks/configs/fonts-links/fontcache/etc
      = also all modules which need '-r' to reset
      [_] do cleanup also in mode '-a'
  [_] make opt '-w/-d' for width/depth traversing
    width: -full- scenario per mode to fail earlier
    depth: all mods per -single- op
      * separate groups for setup/install/update/aliases
      * aggregate pkg_inst, etc to ./install | ./update
      * parallel execution for individual ./update
      * gather all aliases to dump
  [_] ENH return err if single-word *mod* in AIRY_MODS isn't unique throughout all mods
    * check only AIRY_MODS config
    * allowed to have multiple mods with same name in different locs (treated as the same mod)
      ? how to adequately order them ?
    * when prepending dash -- exclude previously added mod
      E.G. ( mod1 mod2 ... -mod1 ) == ( mod2 ... )
  2017-02-09 [X] move sourcing from 'cfgsetup' to 'system'
  2017-02-09 [X] use it's own flags set/handler instead of 'cfgsetup'
  [_] THINK: DFL no flags -- what to do by default ?
    only update 'packman' pkgs ? but we have 'pacman -Syu'
    !!! [_] BET: show info/status/statistics !!!
      * show pkgs status as before
      * count ./bin/* and $ aliases | wc -l
      * show dfl airy paths from profile
  2016-08-19 [X] NEED: log last run into file ~/.cache/airy/mods/setup.log


structure
  2017-02-09 [X] MOVE ./bin -> ./ctl and populate prgs from ./bin with unchanged names
  [_] Add VAR 'tags' to generate symlinked categories into ./_build
    2017-01-30 [X] ALT:TEMP: for each 'setup' add '# tags: .. .. ..' after /^source ~\/.*cfgsetup/
    [_] cfgsetup = apply additional tag :: [in]active | [dis/en]abled | [un]used
      [_] ALT: link all ./pkg/* w/o mod file in root --> ./_build/{wrong|trash|empty|bad}
    [_] ALSO: search all non-'pretty' for that regex
      -- must source / traverse all mods and not only choosen ones from AIRY_MODS
    [_] WTF: when mods in diff dirs has same name and same tags? it's impossible to add them into same path name
  Abstraction: defaults -> ./mod -> ./pkg
    2017-02-09 [X] rename ./cfg -> ./pkg (for named main/aur pkgs only)
    2017-01-27 [X] rename ./my -> ./mod
      ALT: ./gen[eral] | ./abs[tract] | ./choice | ./case
    [_] link by ./airy/defaults general ./mod with choosen ./pkg
    [_] show error if some ./mod was added, but its default wasn't =set or wasn't =installed
    [_] create category symlinks to choose variant ./pkg/{..} -> ./mod/$mod/use/*
      THINK:BAD: excessive systemd cohesion -- we will be restricted by linked mods
      BUT: we need symlinks somewhere anyways -- MAYBE in ./_build/use
    [_] allow augmenting by user-specified defaults in his profile / mods
  [_] BET: use file ( ./mod | ./airy | ./AIRYPKG ) = like PKGBUILD with functions
    + each function -- works w/o sudo -- and only locally for user 'nobody'
      = only generates arguments for r.airy funcs
    + in future can be adapted/converted into PKGBUILD or *.deb
    BAD:ALT:(suboptimal): store all control scripts inside //mod dir in each *mod*
  [_] THINK: use ./tmpl OR ./etc
  2017-02-09 [X] THINK: user's mod dir -- link into ./_build/user OR even ~/.config/airy -- as any other pr
  [_] create DFL ./tmpl/profile for *airy*
    -- can be deprecated by per-mod profile segments
    USE profile 'override' by hooks from user mods
    # To keep template fileset with mods for new accounts
    * one very simple with small set of features
    * one rich with all settings
  [_] profile ./{tmpl/\,}defaults instead of ./cfg/setup + mkdef
    * Place there list of all symlinks to create
    * Each ./my/* will source this file and will actually create symlinks
    [_] TODO: use DFL version in airy and override/augment by user's version
    ALT:THINK: use xdg-open for system-wide permission protected links
  2017-02-09 [X] keep all mods inside flat ./mod directory instead of tree in ./cfg
    ? 2017-02-09 [X] and create symlinks for categories tree inside ./_build ?
    [$] ALT: keep categories tree as it is and create symlinks into ./mod
    ? ALSO:THINK: sep ./mymod for contents of ./bin and sparse functions ?
      => also *mod* in ./mymod  work as switch proxy to multiple providers (like browsers)
    ? beside ./mod need ./_obsolete dir
    ? [_] ALT:USE symlinks to *mod* instead of 'AIRY_MODS'
      + no need for recursive 'find'
      + explicit list -- and user directly see which links were broken
      + sep rel symlins list can be commited to own repo
      - git <v2.10.2 on Windows will replace symlinks by text files
        = so I can commit relative symblinks without problem

  [_] gather all artifacts into '_build' dir instead of ~/.cache/airy/
    [$] link /airy/_build into ~/.cache/airy and /airy/mod into ~/.config/airy
    [_] add support for XDG_... env vars into 'cfgsetup' to determine symlink targets
  [_] instead of using ./prf/* files -- use separate pieces of profile in each private *mod*
    * AIRY_MODS is placed inside of *airy* mod
    * all profile pieces can be combined into single ./profile with non-exported environment for *airy*
    * even regular *mod* can contain pieces of profile inside of it
    * differs from ./env -- because ./env is always sourced into interactive sessions
  [_] THINK: instead of mod-per-pkg (impossible, actually) use mod-per-idea
    < I already use multiple pkgs per mod anyway
    < in other cases I choose single 'main' from alternatives list
    < sometimes I install additional non-preffered alternatives
    +? no need for 'defaults' script -- all is specified through pkgs list
    syntax:
      mod -- use defaults
      mod:-b -- defaults w/o 'b'
      mod:a -- only 'a' from alts
      mod:a,b -- prefer 'a', inst 'b' as secondary
      mod:+a,-b -- defaults and 'a', w/o 'b'
      mod:@ -- all
      mod:@,-b -- all w/o 'b'


setup
  2015-07-01 [X] FIX: /tmp/aura must be changed -> /tmp/$USER
    -- check if $USER available from bare script := see .xprofile
  [_] In each script replace ~/.config to $XDG_CONFIG_HOME with fallback
    ALSO: set this shell var in cfgsetup like TMPDIR
  [_] create ./wmkeys to populate current *wm* hotkeys
    => convert general format to wm-specific one
    * use general function names, with wm-specific impl
  [_] TODO: instead of sourcing ~/.shell/profile use r.airy-registry
    + no need to source whole profile, as I can grep necessary value only
      ? BUT how to be with multiline or array to pass them outside ?
    * 2017-04-10 [X] optional params for defaults fallback
    * 2017-04-10 [X] switches for order of overriding


install
  [_] TRY: extend 'do_if' to check if 'pkg' installed by name using pacman/pacaur
    + to always install/gather conflicting packages even w/o '-u'
    + AUR pkgs will be updated only by 'pacaur -Syu' w/o duplicating requests in each 'install'
    ~ then '-I' can be removed from 'r.airy -a' (watch over its misusage)
    + OR replace '-u' by '-r' to _reinstall_ packages only on direct demand from user
  [_] DEV: extend '-P' key in 'do_if' to auto-choose appropriate 'has_pkg' for pacman/gem/pip/etc
  [_] BAD: 'git_inst' don't respect 'do_if' keys
    FIND: /\v_inst \zs-\w '?[^ '}]+['} ]*/
  [_] FIX: 'loc_inst' can't auto-derive pkg name '-P' from the same arg ./PKGBUILD
  [_] do_if -> system
  [_] do_if must accept commands from stdin
    = Aim -- in all ./setup files to simplify upgrade sections
  [_] No duplicates: simple '-p' argument (pkg_inst -p name) duplicates package name
    = if name -- list, repeat this check of name for each package
    = Add '-P' key for explicit consideration of package
  2016-07-14 [X] pkg_inst and aur_inst -> don't do anything, if already installed -- even on '-u'
    Because it must be done by '-Ss'
  [_] CHG: use pacaur instead of pacman on pkg update


update
  [_] pacman/pacaur -- specify ignore list -- accumulate it throughtout all *mods*
    USE: --ignore pkg1,pkg2,...
    = android-*/mingw, texlive, libreoffice-fresh, ?firefox, wxhexeditor
    SEE: pacaur -Syu
    ALT: use 'ignore' or 'skip' file in private dir


linkcp
  [_] THINK: replace 'cp' part of functionality by 'coreutils/install'
  2017-01-23 [X] remove 'sudo' from linkcp
  2017-01-23 [X] rename all 'link' func into 'linkcp' script
  ! [_] harden system perms security by using linkcp copy into sys dirs instead of symlinks
  2017-02-09 [X] MOVE: linkcp, svc_activate into 'airy' in ./bin
  [_] THINK: optimize ./bin <Tab> time -- scripts can be copied instead of symlinks
    BAD: scripts can be dependent on in-dir stuff through 'readlink'
  [_] THINK: split into 'mlink' and 'mcopy' ?
  2017-02-04 [X] quiet linking on '-q'
  2017-02-05 [X] DEV: generalize file list to support batch format instead of linkmask
    ::: added '-s' for name substitution to be combined with prefix
  [_] DEV: disallow '-o/-C' any symlink overwrite / clobbering -- strict mode
  [_] DEV: reuse 'rel_search' func from svc_activate
  [_] THINK: embed 'envsubs' from svc_activate directly into 'linkcp' for copy mode
  2017-02-05 [X] TODO: convert 'linkmask' group to function like 'dcache' ::: r.airy-cache-links


cache_section
  [_] ALSO: gather 'env' files like 'alias'
    linkmask "$PWD/env"  'env/%d%n'


cache-alias
  2017-02-13 [X] BUG: if exists -- replaces it, BUT adds duplicate section at the end anyways
  [_] DEV: generalize to cache any file types beside storing shell aliases
  [_] cache/generate 'pathes' from general and user private parts (like aliases)
  [_] FIXME:(restrict): don't source other files named 'aliases' beside in ./mod dir
  [_] THINK: keep short 'mod' name instead of 'path' to allow mods moving
    => can be changed back to 'full path' when all mods placed in single dir
  [_] TODO:DEV: dump aliases and functions individually for each shell after configure
    => faster startup from single file
  [_] BAD: if $f was manually edited -- NEED to regenerate anyway
    SEE: http://fahdshariff.blogspot.com/2012/12/sed-mutli-line-replacement-between-two.html

  2017-01-27 [X] Add alias file for some cfgs -- and on ./setup gather >> ~/.cache/airy/aliases
    + dump all files into single one
      + reduce startup time
      !! shell-specific unportable aliases (ZSH)
      !! 'return' to interrupt sourcing will affect whole dump
      ::: wrap each sourced file into function and call it immediately
        => ALT:(non-robust): instead of 'return' from sourced files use 'if..fi' guards
    ~ file list with whole pathes
    ~ dir with symlinks to aliases


PKGMOD
  [_] BAD: package can't touch any /home or /tmp path
    https://wiki.archlinux.org/index.php/Arch_packaging_standards#Directories
    ? is it enough for me to use system-wide dirs and cache ?
  [_] TRY: generate PKGBUILD for each *mod* through my scripts set
    + this allows clean uninstall previous versions based on $pkgver
      >> remove cleaning for ./systemd/user and ./bin symlinks
    +++ can resolve deps graph between my own moduls
      >> support any order of mods in AIRY_MODS
    NEED: my own local AUR mirror for my mods only
      * pacman-like already built -- generate on first ./setup and rebuild all on changes
      * BET: aur-like build-on-demand -- but need access to
    ALT: generate single package //airy-$USER.pkg.tar.xz from whole 'airy'
      + no need for my own AUR local mirror
        => install by simple $ makepkg && pacman -U
      + package is individual for an
  [_] convert pkgbuild to deb
    http://www.overclock.net/t/1339466/converting-an-aur-slackbuild-script-for-use-in-debian
    http://archlinux.org.ru/forum/topic/15919/


other
  [_] TODO Sep mods 'airy-vim' and 'airy-zsh' as standalone -> to replace prezto, etc
  2015-09-21 [X] Replace name and email in devq work
  2015-06-05 [X] Insert vim installation and update check ALSO in vim_install (one-button)
    then delete it from list and try install again
  2015-09-21 [X] Move install profile choosing (fast with apt-get only, or full with compile)
    to git_install script, checking for flag and skipping if there isn't one
    ::: Concept is replaced with smart re-build only on diff
  2015-09-21 [X] Проблема группирования -- по объекту (bash,vim,git) или по
    стратегии (cfg, deploy, notes) решается через 'ln -r' симлинки в репе
    ::: По объекту группировка выгоднее если есть шоткаты быстрого доступа (..r, .cm)
  2015-09-21 [$] Зависание установки geeknote из-за необходимости вводить пароль и логин
    = Сделать его устанавливаемым только вручную!
    ::: Отказ от использования в пользу гит репозитория
  2015-06-05 [X] Некоторые конфиги имеет смысл запускать только после установки программ!
    choose_default -- после всех соотвествующих дефолтов (zsh, etc.)
    vim -- после установки vim'а...
    erian/install.sh -- which will install repos -- after all configs
  2015-09-21 [X] Сделать автоматическое изменение локальных кредентиалов пользователя в репах
    ::: DONE by erian -- simply clone all repos from its install script
  2015-09-21 [$] пароли для dir620 -- in profile
    хотя если я всё равно буду подключаться по SSH -- то проще использовать приватные ключи.

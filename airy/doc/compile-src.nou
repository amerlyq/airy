NOTE: c/c++ shebang/cache-compiling/interpreting
  https://root.cern.ch/cint
  https://root.cern.ch/cling
  http://bellard.org/tcc/

TECH:
  https://ef.gy/executable-scripts-in-c++

TODO
  [_] BET: in each binary -- embed code for self-compiling on timestamp
    => fork+exec compiler, then exec to newly built binary
    => compile self-comp code into libairy.a or airy.o and link it to each prg
  [_] BET: script wrapper to compile with timeout
    << otherwise each lang will require its own impl for auto-recompile
    * all symlinks in ~/.bin point to this single wrapper script
    * it can be written in C, not necessary bash -- so my prototype is still relevant
    * compiled binaries and their sources are stored into ~/.config/airy/bin-{build\,src}
    * multi-sources are stored in dir /name.ext/* with .ext to determine compiler
  [_] DEV: switch embedded and standaloneDEV: switch embedded and standalone
    [_] by -D define when compiling
  [_] DEV: sep lib.a with my own 'timeout', 'timestamp', and 'self-compile'


% exec argv with timeout
  SEE:DEV: http://code.metager.de/source/xref/gnu/coreutils/src/timeout.c
  ALT:(maximumtime): http://skarnet.org/software/s6-portable-utils/s6-maximumtime.html
  ALT:(fork): https://linux.die.net/man/3/posix_spawnp
  ALT:(timeout): http://stackoverflow.com/questions/282176/waitpid-equivalent-with-timeout
   ATT: https://ldpreload.com/blog/signalfd-is-useless?reposted-on-request
       https://news.ycombinator.com/item?id=9564975
   https://eklitzke.org/unix-system-call-timeouts
  http://stackoverflow.com/questions/5237482/how-do-i-execute-external-program-within-c-code-in-linux-with-arguments
  + http://stackoverflow.com/questions/282176/waitpid-equivalent-with-timeout
      http://man7.org/linux/man-pages/man2/signalfd.2.html
  ++ https://www.linuxprogrammingblog.com/code-examples/signal-waiting-sigtimedwait
      https://www.mkssoftware.com/docs/man3/sigwaitinfo.3.asp
  time
    http://stackoverflow.com/questions/14682824/measuring-elapsed-time-in-linux-for-a-c-program

#!/bin/bash -eu

dbin=${TMPDIR:-/tmp}
dlib=${TMPDIR:-/tmp}
autocompile=1  # embed self-compiling code
chk_tstamp=1
staticlib=0
chk_src=0
quiet=0

while getopts 'cflL:Nt:p:q' o; do case $o in :|'?') exit 1
;; c) chk_src=1
;; f) chk_tstamp=0  # force
;; l) staticlib=1; autocompile=0
;; N) autocompile=0
;; t) dbin=$(readlink -e "$OPTARG")
;; L) dlib=$(readlink -e "$OPTARG")
;; p) prf=$OPTARG
;; q) quiet=1
# ;; o) out=$OPTARG  # compile all src in one exe
esac; done; shift $((OPTIND - 1))

# NOTE: parse interpreter: // airy:gcc ...
# DFL: prepend USE:(append): // airy:gcc {} ...
parse_shebang() { local sub=0 shebang
  shebang=$(sed -rn '/^\W*\sairy(:\S*)\s(.*)/{s//\1 \2/p;q};5q' "$p")
  while IFS=$' ' read -ra a; do
    [[ ${#a[@]} > 0 && -n ${a[0]} ]] || continue
    interp=${a[0]}
    a=( "${a[@]:1}" )  # RFC w/o reassign

    # HACK: s/placeholder/src/g
    #   WTF if $p=dir ? use sep comp file ? OR use shebang from main.*
    for i in "${!a[@]}"; do case ${a[i]}
    in '{p}' | '{}') sub=1; a[i]=$p
    ;; '{b}') sub=1; a[i]=$nm
    ;; '{d}') sub=1; a[i]=${out%/*}
    esac; done

    # FIXME: 'airy:=' must discard all other args beside general -I, -L
    cflags+=( "${a[@]}" )
  done <<< "$shebang"
  ((sub)) || cflags+=( "$@" )  # RFC move outside
}

build() { local p d nm out cflags interp
  p=$(readlink -e "$1")
  nm=${p##*/}; nm=${nm%.*}
  ((!staticlib)) && out=$dbin/${prf-}${nm} || out=$dlib/lib${prf-}${nm}.a

  if [[ -d $p ]]; then
    d=$p
    set -- "$d"/*
  else
    d=${p%/*}
    set -- "$p"
  fi

  if ((chk_src)) && ((!staticlib)) && [[ -f $out && -s $out && -x $out ]]; then
    # NOTE: err if original file is different now
    if [[ ! $("$out" -src-path) -ef $p ]]; then
      echo "original file is different or absent" >&2
      exit 5
    fi
  fi

  # DEV: cmp recursively all files with bin
  if ((chk_tstamp)) && [[ $p -ot $out ]]; then
    ((quiet)) || echo "(=)  ${out##*/}"
    return 0
  fi

  # TODO: move into r.gcc-make augmented with c/cpp-specific general makefile
  # SEE:(flags): https://wiki.gentoo.org/wiki/GCC_optimization/ru
  # https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html
  cflags=( -march=native -O3 -pipe -pedantic -Wall -Wextra -Werror -Wl,--as-needed )
  cflags+=( -ggdb -fvar-tracking-assignments -Wl,--trace )  # -gz -gcolumn-info
  cflags+=( -I "$d" -L "$dlib" -DSRC_PATH="$p" )

  # REF: https://gcc.gnu.org/onlinedocs/cpp/Invocation.html
  #   <= for preprocessing hacks
  ((staticlib)) && cflags+=( -DBUILD_LIB -c -o "${out%.*}.o" ) \
  || cflags+=( -D'main(...)=main(__VA_ARGS__) asm ("_main"); int main(__VA_ARGS__)' -o "$out" )

  # EXPL: trailing 'dynamic' to not force static libc.a
  ((autocompile)) && cflags+=( -Wl,-Bstatic -lselfcompile -Wl,-Bdynamic )

  parse_shebang "$@"

  # BET: makefile to track and re-generate all static libraries  BUT:BAD: too long
  #   ALT: use make only for logic of compiling different extensions per single file
  #   BET:IDEA: ~/.cache/airy/build/{bin,lib,Makefile} and gen Makefile recipes as 'alias' file -- so all deps will be in single file
  #   http://stackoverflow.com/questions/2734719/how-to-compile-a-static-library-in-linux
  # SEE: linker libs order
  #   http://stackoverflow.com/questions/45135/why-does-the-order-in-which-libraries-are-linked-sometimes-cause-errors-in-gcc
  if ((autocompile)); then
    tmp=/tmp/src.path
    # BAD: parallel 'compile-src' clobber /tmp/src.path file
    printf '%s\x00' "$p" > "$tmp"
    trap "rm -f '$tmp'" INT HUP QUIT TERM ERR EXIT

    # USAGE: extern uint8_t data[]     asm("_binary_src_path_start");
    # BAD: $tmp must be name in current dir to get short symbol name
    # ALT: compile from stdin
    # http://stackoverflow.com/questions/1003644/is-it-possible-to-get-gcc-to-read-from-a-pipe
    # https://gcc.gnu.org/ml/gcc-help/2007-01/msg00119.html
    cflags+=( -Wl,--format=binary -Wl,"${tmp##*/}" -Wl,--format=default )
  fi

  # BUG: if not removed *.o -> resulting binary is wrong
  #   BET: try using makefile
  if [[ ! -v interp || $interp == : ]]; then
    case "${p##*/}"
    in *.c  ) interp=( gcc )
    ;; *.cpp) interp=( g++ )
    # ;; *.hs ) ghc -O -o "$out" "$@"
    esac
  elif [[ $interp == :?* ]]; then
    interp=( "${interp:1}" )
  else exit 7; fi

  case $interp
  in gcc) interp+=( -std=gnu11 )
  ;; g++) interp+=( -std=gnu++14 )
  esac

  (cd "${tmp%/*}" && "${interp[@]}" "${cflags[@]}") || false

  # FIXME: use only for gcc/g++
  ((staticlib)) && ar rcs "$out" "${out%.*}.o"

  ((quiet)) || echo "(+)  ${out##*/}"
}

# FIXME: don't build unconditionally on each ./setup -m (use make for deps)
for f in "$@"; do build "$f"; done

#!/usr/bin/make -sf
#%SUMMARY: run once all specified subpaths in mod dirs
#%WARN: mod recipes conflict (merge) with target aliases of the same name
#%
#%USAGE: $ ./$0 [options] [--] [help | reset | all | <mod> | {<mod>,all}/{all,cleanup,install,setup,update,recache}]
#%VAR:
#% * flags=-u      # pass these flags to all chosen subpaths at subpaths (separate set of timestamps)
#%   -- ALSO: for individual subpaths use "<subpath>_flags=-u"
#% * skip=...      # {space|comma}-separated list of modnames to skip their operations (BAD: no per-subdir granularity)
#% * subpaths=...  # space-separated list of relpaths to subpaths inside mod dirs
#% * tsdir=/path   # abspath to timestamps directory (DFL=/tmp/$USER/airy/ts)
#%   -- HACK: in pj root override by static location to prevent rebuild from zero after reboot
#%
#%USAGE: actions
#% * [custom]: $ ./$0 firefox       # = run once only firefox
#% * [always]: $ ./$0 -W firefox    # = rerun firefox
#% * [w/deps]: $ ./$0 -B firefox    # = rerun firefox (with all deps)
#% * [ignore]: $ ./$0 -o firefox    # = all beside firefox
#% *  [reset]: $ ./$0 -t firefox    # = skip firefox (when error) (FAIL: aliased tgt do not propagate to actual ones)
#% * [dryrun]: $ ./$0 -n firefox    # = only print commands (BAD: must disable "silent")
#%
#%ALG: !FIXME!
#% - generate recipes only from cmdline targets (=performance=)
#% - divide by barrier each batch of VAR=subpaths recipes (e.g. all "install")
#% - impose order upon the barriers lining up to VAR=subpaths (e.g. all "install" before all "setup")
#% - provide partial inter-deps ordering for each batch inside barrier (e.g. a/setup -> b/install)
#% - run configuration script of the same name in each recipe
#% - error if unknown or don't exists
#%
.DEFAULT_GOAL = all
MAKEFLAGS += -rR
.SUFFIXES:
this := $(lastword $(MAKEFILE_LIST))
$(this): ; @:
_phony := $(shell sed -rn 's/^([A-Za-z0-9-]+):(\s.*|$$)/\1/p' '$(this)'|sort -u)
.PHONY: .FORCE $(_phony)
$(subst ,, ) := $(subst ,, )
, := ,

# [_] BUG: can't "skip=ctags,snow" after "install" stampfile in "install.post" step only
#
# WARN: if "cleanup" script updated -- it will be run triggering whole chain
# TRY:DEV: add deps of 'setup' -> ./cfg/* etc used in "setup" but then it must be declarative file!
#   => i.e. we need smth similar to PKGBUILD file with lists and "install/setup/recache" will be generally the same
# TODO: dev script "mods-all-deps" and add inter-deps to recipes for multithread execution
#  ::: actually isn't strictly required -- when processing install/setup steps in batch
#  !!! aur_inst may corrupt file -- use flock ???
#    => ALT: pass $(mktemp) per-thread file through env var and then merge outputs
# BUG: necessary "#deps:" aren't installed unconditionally or with error !!! NEED:ERR: add them
#   !!! can't automize :: "defaults" may depend on all optional pkgs to choose from, but must not install them
#   i.e. difference between "requires" and "after" -- requires at least one of any, but after all of them
#    - using intermediate alias :: <airy> :deps: r.t | <r.t> :deps: anyof(st,urxvt,etc)
# BET? check all deps to be present inside @modlist and fail with normal error
#  => but then we can't simply call "some/setup" even if its deps are already installed
#    !! especially if we want to avoid re-setup for its deps mods !!
# MAYBE: use parallel
# FAIL: dependency on whole "mod" results in out-of-order install/setup
#   MAYBE:(option): deps={install,ignore,error} to choose behavior
.NOTPARALLEL:

####################
### Options
#
# NOTE: env vars as primary configuration
export AIRY_TMPDIR ?= $(or $(TMPDIR),/tmp/$(LOGNAME))/airy
export LISTS_STORE_DIR ?= $(AIRY_TMPDIR)

flags :=
skip :=
# NOTE: each subpath is barrier when installing targets in batch
subpaths := cleanup install setup update recache
tsdir := $(AIRY_TMPDIR)/ts

####################
### Barriers
#

# ALT: use instead of dir previx $ vpath --%-- $(tsdir) && touch '$(tsdir)/$@'
&barrier = $(tsdir)/--$(subst $( ),\$( ),$(subst /,!,$(1)))--
&barrier.hook = $(patsubst --%--,hook.%,$(notdir $(1)))
&barrier.pre = $(call &barrier,$(1).pre)
&barrier.post = $(call &barrier,$(1).post)
&@barriers = $(&barrier.pre) $(&barrier) $(&barrier.post)
@barriers := $(call &barrier.pre,all) $(foreach 1,$(subpaths),$(&@barriers)) $(call &barrier.post,all)

# ARGS: <subpath>
define defbarrier =
$(&barrier.pre): $(_prevbar)
$(&barrier): $(&barrier.pre)
$(&barrier.post): $(&barrier)
$(eval _prevbar := $(&barrier.post))
endef

# NOTE: use barriers as real stampfiles to prevent stored lists deletion by "install.pre"
#  -- to continue after errors interrupt chain in the middle of "install"
# USE: $ make -B all/install $ to restart fully
_prevbar := $(call &barrier.pre,all)
$(foreach p,$(subpaths),$(eval $(call defbarrier,$p)))
$(call &barrier.post,all): $(_prevbar)
$(@barriers):
	@echo '$(@F)'
	@$(value $(call &barrier.hook,$@))
	@touch '$@'

####################
### Cmdline args
#
@targets := $(filter-out $(_phony) $(@barriers),$(MAKECMDGOALS))

# NOTE: generate recipes -- for cmdline targets or default required list
#  !! each recipe is generated for all subpaths at once !!
#  ENH: filter directly by subpath matching e.g. "airy/setup" or "airy/.*"
#  BUT: we can't use "airy/[^/]+" because subpath may be nested
@modlist := $(filter-out all/%,$(@targets))
@modlist := $(foreach t,$(@modlist),$(firstword $(subst /, ,$t)))
@allmods := $(shell r.airy-mods-all)
_unknown := $(filter-out all $(@allmods),$(@modlist))
$(if $(_unknown),$(error no such mod(s) {$(_unknown)}; SEE:VIZ: $$ r.airy-mods-make help))
@modlist := $(or $(@modlist),$(shell r.airy-mods-required))
@modlist := $(filter-out $(subst $(,), ,$(skip)),$(@modlist))

# ATT: verify allowed subpaths _before_ expanding "*/all"
#   i.e. ignore errors for nonexistent subpaths resulting from "all" expansion
#   == /all => must expand into only allowed entries -- or errors must be ignored only for /all
@allsubs := $(shell r.airy-mods-subpaths --relative $(subpaths) -- $(@modlist))
_unknown := $(filter-out $(@allsubs),$(filter %/,$(@targets:%/=%)))
$(if $(_unknown),$(error no such subpath(s) {$(_unknown)}; look into respective mods dirs))

@recipes := $(or $(@targets),all)
@recipes := $(foreach r,$(@recipes),$(if $(findstring /,$(r:%/=%)),$r,$(r:%/=%)/all))
@recipes := $(foreach r,$(@recipes),$(if $(filter all/%,$r),$(@modlist:%=%/$(r:all/%=%)),$r))
@recipes := $(foreach r,$(@recipes),$(if $(filter %/all,$r),$(subpaths:%=$(r:%/all=%)/%),$r))
@recipes := $(filter $(@recipes),$(@allsubs))

@scripts := $(shell r.airy-mods-subpaths --pipesep $(subpaths) -- $(@modlist))
@scripts := $(filter $(@recipes:%=\%|%),$(@scripts))

# DEBUG:
# $(foreach s,$(@allsubs),$(info $s))
# $(foreach m,$(@modlist),$(info $m))
# $(foreach r,$(@recipes),$(info $r))
# $(foreach s,$(@scripts),$(info $s))
# $(error ?)

####################
### Functions
#
# [_] FIXME: clarify inter-deps between all all/* */all and barriers
# - BAD: all/setup will call all/install due to barriers -- can't only all/setup
# - !! possible only after restructuring
# - $(call &barrier.post,all) -- all cmdline phony tgts must depend on it
#     FAIL: if cmdline tgts are actual stampfiles -- can't insert intermediate deps

# ARGS: <mod> <subpath> <stamp-path>
define defaliases =
.PHONY: $(1) $(1)/ $(1)/all $(1)/$(2)
$(1) $(1)/: $(1)/all
$(1)/all: $(1)/$(2)
all/$(2): $(1)/$(2)
$(1)/$(2): $(call &barrier.post,all)
$(call &barrier,$(2)): $(3)
endef

# HACK:($ timestamp): store "guesstimate" time into timestamps to presort unordered part of deps on next install
#  BET: create wrapper to store average time between current and previously stored
_tspfx := @
_tsdlm := !
&stampfile = $(subst $( ),\$( ),$(tsdir)/$(_tspfx)$(subst /,$(_tsdlm),$(1)))

# ARGS: <script-abspath> <modname> <subpath>
define defrecipe =
$(call defaliases,$(2),$(3),$(&stampfile))
$(1): ; @: #prevent-sink-all-rule
$(&stampfile) : $(1) | $(tsdir)
	@echo '>>> $$< <<<'
	@timestamp -o '$$@' -- '$$<' $(flags) $($(subst /,_,$(3))_flags)
endef

# DEBUG:
#  $(eval $(call defrecipe,te st,setup))

&abspath = $(subst |,\$( ),$(abspath $(subst $( ),|,$(subst |,/,$(1)))))
# &mod_dir = $(lastword $(subst /, ,$(firstword $(subst |, ,$(1)))))
# ALT:BAD:(dare consequences): dangling "setup" -> "." instead of ""
# &modname = $(lastword $(subst /, ,$(dir $(1))))
# &modname = $(word $(words $(subst /, ,$(1))),'' $(subst /, ,$(1)))
&modname = $(firstword $(subst /, ,$(lastword $(subst |, ,$(1)))))
&subpath = $(patsubst $(&modname)/%,%,$(lastword $(subst |, ,$(1))))

$(foreach 1,$(@scripts),$(eval $(call defrecipe,$(&abspath),$(&modname),$(&subpath))))


####################
### Hooks
#

ifneq (0,$(words $(filter %/install,$(@recipes))))
hook.install.pre  := r.pacman-any-install -x
hook.install.post := r.pacman-any-install
endif


####################
### Auxiliary
#
$(tsdir): ; mkdir -p '$@'

.PHONY: all all/all $(subpaths:%=all/%)
all: all/all
all/all: $(subpaths:%=all/%)
$(subpaths:%=all/%) : all/% : $(call &barrier.post,%)

reset: | $(tsdir)
	find -H '$(tsdir)' -xdev -mindepth 1 -maxdepth 1 -type f \( -name '$(_tspfx)$(_tsdlm)?*' -or -name '--?*--' \) -delete
	rmdir '$(tsdir)'

help:
	@echo "VIZ:(targets): {$(_phony)}"
	sed -rn '/^(.*\s)?#%/s///p' '$(this)'
	@echo "VIZ:(total=$(words $(@modlist)) requested mods): {$(@modlist)}"
	@echo
	@echo "VIZ:(rest of mods from total=$(words $(@allmods))): {$(filter-out $(@modlist),$(@allmods))}"

# ATT: "make" treats existing files in cwd as implicit targets => no error even if no target
#   => generate explicit error when target not found
% :: .FORCE
	echo "Err: no such target '$@'" >&2 && exit 1

#!/bin/bash -eu

queue=${TMPDIR:-/tmp}/airy-cache-mods

# c=cache, f=from, i=incremental, r=reset
opts=; while getopts 'c:f:irs' o; do case $o in :|'?') exit 1
;; c) queue=$(readlink -f "$OPTARG")
;; f) from=$OPTARG
esac; opts+=$o; done; shift $((OPTIND - 1))
has(){ [[ $opts =~ [$*] ]]; }
(($#)) && cmd=( "$@" ) || exit

mods=()
mappend(){ readarray -tO "${#mods[@]}" mods; }

if has i; then
  has r && rm -f "$queue"
  if [[ -s $queue ]]; then
    has s && sed -i '1d' "$queue"
    mappend < "$queue"
  fi
  [[ -s $queue ]] && head="{{{ continue... }}}" || head="{{{ Incremental }}}"
else head="{{{ Non-incremental }}}"; fi

if ! has i || [[ ! -s $queue ]]; then
  # CHECK: can be bad in nested scripts -- by catching unused stdin
  [[ -t 0 ]] || mappend
  [[ -s ${from-} ]] && mappend < "${from-}"
  has s && mods=( "${mods[@]:1}" )
  has i && printf "%s\n" "${mods[@]}" > "$queue"
fi

for i in "${!mods[@]}"; do [[ ${mods[i]} ]] || unset mods[i]; done
for m in "${mods[@]}"; do
  "${cmd[@]}" "$m"
  has i && sed -i '1d' "$queue"
done

! has i || rm -f "$queue"

if [[ $(jobs -p) ]]; then
  printf "{{{ %s }}}\n" "Waiting jobs to complete"
  jobs -l && wait
fi
echo "{{{ DONE }}}"

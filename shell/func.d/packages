# vim: ft=sh:ts=2:sw=2:sts=2:fdm=marker:fdl=1
source ~/.shell/profile
source ~/.shell/func.d/system
trap_errors
cwd_script

# Re-install even if git pull is up-to-date (for broken builds)
while getopts 'mrsu' o; do case $o
in :|'?') die 1
esac; cfgOptAdd "$o"; done; shift $((OPTIND - 1))

mkdir -vp "${CURR_DIR_PKG:?}"
airy_cache_pwd_mod

do_if() {
  local cmd='' grp='' obj=p pkgs=() bQuiet=0 OPTIND=1

  # USE 'pacman -Ql <pkg>' to list files  ALT: pkgfile
  while getopts "ac:d:f:l:p:qy:Y:" o; do case $o
  in a) obj=$o  # always
  ;; [dflpyY]) obj=$o; grp=$OPTARG
  ;; c) cmd=$OPTARG
  ;; q) bQuiet=1
  ;; :|'?') die 1 "Need value for '-${o}'" >&2
  esac; done && shift $((OPTIND-1))

  if ! cfgOpt u && [[ $grp ]]; then
    if has_such "${obj:?}" "${grp:?}"
    then (($bQuiet)) || echo "I: $* ($obj=$grp)"; return 0
    else pkgs+=("$@"); fi
  else while (($#>0)); do
    if ! cfgOpt u && has_such "$obj" "$1"
    then (($bQuiet)) || echo "I: $1"
    else pkgs+=("$1"); fi; shift
  done; fi

  ((!${#pkgs[@]})) || ${cmd:?} "${pkgs[@]}"
}

pip_inst(){ do_if -c 'sudo pip3 install --upgrade' "$@"; }
cab_inst(){ do_if -c 'cabal install' "$@"; }


if distro ubuntu; then
  pkg_inst(){ do_if -c 'sudo /usr/bin/apt-get --yes install' "$@"; }
  pkg_make(){ sudo checkinstall --default "$@"; }
  deb_wget(){ wget_inst -d "$1" && sudo dpkg -i "$CURR_DIR_PKG/${2:-${1##*/}}"; }
  deb_inst(){ do_if -c 'deb_wget' "$@"; }
  ppa_add(){
    local addr=${1#ppa:}
    addr=${addr#*http://}
    addr=${addr%% *}
    grep -qrF "$addr" /etc/apt/sources.list /etc/apt/sources.list.d/ && return 0
    sudo /usr/bin/add-apt-repository ${2---yes} "$1"
    sudo /usr/bin/apt-get update
  }
  gem_inst(){ do_if -c 'sudo gem install' "$@"; }

elif distro arch; then
  pkg_inst(){ do_if -c 'sudo pacman -S --needed --noconfirm' "$@"; }
  pkg_make(){ sudo make install $@ || exit; }  # FIXME: replace by arch-specific
  if has_pr yaourt; then
    ayr_inst(){ do_if -c 'yaourt -S --needed --noconfirm' "$@"; }
  fi
  if has_pr pacaur; then
    aur_inst(){ do_if -c 'pacaur -S --needed --noconfirm' "$@"; }
    loc_inst(){ do_if -c 'pkg_make' "$@"; }
    # WARN: pkgs not from AUR can break pacaur
    pkg_make(){ local p d
      p=$(readlink -e "${1:?}")
      ( set -e
        source "$p"
        d=$CURR_DIR_PKG/$pkgname
        mkdir -p "$d" && cd "$d"
        # cd "$(dcache "pacaur/$pkgname")"
        linkcp -ct "$PWD" "$p"
        # WARN:(-f): removed 'force' to mitigate idle rebuild
        #   => enforce rebuild by incrementing 'pkgrel=1' in PKGBUILD
        # THINK: using '-C' for clean builds (re-dld all src)
        makepkg -si --needed --noconfirm
        # updpkgsums &&  # REM: 'makepkg' has flag for this
        # source PKGBUILD  # EXPL: updated on build values for pkgver, etc
        # paccache -df "$pkgname"  # REM: prefer to keep old versions
        # BAD:(yes): -- can answer some wrong question
        # sudo sh -c 'yes | pacman -U --needed "$@"' '' \
        #  "${pkgname}-${pkgver}-${pkgrel}-"*.pkg.tar.xz
        # NOTE: remove '--noconfirm' -- to read answer from stdin
        # BET: wrap in 'expect' to answer only question about conflict
        # BUT: you need 'expect' installed on clean system...
        # $ expect -c 'spawn pacman -Syu
        #     expect { -re "^in conflict.*" { send "yes\r"; interact } }'
        # ALT: wait fail, manually remove package, then 'make continue'
        # sudo pacman -U --needed --noconfirm \
        #   "${pkgname}-${pkgver}-${pkgrel}-"*.pkg.tar.xz
      ) || return
    }
  elif has_pr yaourt; then aur_inst(){ ayr_inst "$@"; }
  fi
  gem_inst(){ do_if -c 'gem install' "$@"; }
fi


pkg_build() {
    # It can be, that 'autoreconf' can replace my own vehicle.
    local prdir=$1; shift; cd "$prdir"

    cabal=$(find . -maxdepth 1 -name '*.cabal' -print -quit)
    if [[ $cabal ]]; then
      cabal install "$cabal"
    elif [[ -f ./CMakeLists.txt ]]; then
      mkdir -p ./build && bdir="$_"
      cmake -E chdir ./build cmake "" "$prdir" || return
      cd ./build && pkg_make

    elif [[ -f ./Makefile ]]; then make && pkg_make
    elif [[ -f ./setup.py ]]; then sudo python setup.py install
    elif [[ -f ./build.sh ]]; then ./build.sh && pkg_make
    elif [[ -f ./configure.ac ]]; then
      # ALT: auto inst necessary *.h, etc which 'NOT FOUND'
      #   $ sudo auto-apt update && auto-apt -y run ./configure && checkinstall -D
      mkdir -p ./build && cd ./build
      [[ -f ../autogen.sh ]] && ../autogen.sh || autoreconf --install || return
      ../configure $@ && make && pkg_make

    else echo "Error: unsupported build system. Build manually."; fi
}


wget_inst() {
  local dobuild=1 link fl prdir; case "$1" in -d) dobuild=0; shift ;; esac
  fl=$CURR_DIR_PKG/${1##*/} && prdir=${fl%.tar.gz}
  [[ "${1//'://'}" == $1 ]] && link="https://sf.com/$1" || link="$1"

  if [[ -d "$prdir" ]]; then rm -rf "$prdir"; fi
  wget -c "$link" -O "$fl" --trust-server-names \
    --user-agent="Mozilla/5.0 (Windows NT 6.1; WOW64; rv:12.0) \
Gecko/20100101 Firefox/12.0" #--max-redirect=2

  if ((dobuild)); then
    atool -X "$prdir" "$fl"
    pkg_build "$prdir";
  fi
}

# DEV: replace/merge by 'git-up'
git_pull() { [[ -d $1 ]] && cd "$1" || return
  git fetch origin master && if [[ $(
    git rev-list HEAD...origin/master --count
  ) == 0 ]]; then git_is_the_same=1; fi

  if git diff-files --quiet --ignore-submodules --
  then git pull --rebase --verbose
  else git stash && git pull --rebase --verbose && git stash pop
  fi
}

# TODO: rewrite, so pull on -d worked only with -u
# ALSO: need to choose where to copy
git_inst() { # $0 -d pr_name
  local dobuild=1 link prdir; case "$1" in -d) dobuild=0; shift ;; esac
  prdir=${1##*/} && prdir=$CURR_DIR_PKG/${prdir,,}
  [[ ${1//'://'} == $1 ]] && link="https://github.com/$1" || link="$1"

  #--depth 1 -- disabled by cause of automerges
  if [[ -d $prdir ]]; then git_pull "$prdir"
  else git clone --depth 1 "$link" "$prdir" && cd "$prdir"; fi

  if ! cfgOpt u && ((git_is_the_same)); then
    echo "C: Up to date, no re-build"
    return 0
  fi
  unset git_is_the_same
  ((!dobuild)) || pkg_build "$prdir"
}


hg_inst() {
  local dobuild=1 link prdir; case "$1" in -d) dobuild=0; shift ;; esac
  prdir=${1##*/} && prdir="$CURR_DIR_PKG/${prdir,,}"
  [[ "${1//'://'}" == $1 ]] && link="https://bitbucket.com/$1" || link="$1"

  if [[ -d $prdir ]]; then cd "$prdir" && hg pull
  else hg clone "$link" "$prdir" && cd "$prdir"; fi
  ((!dobuild))|| pkg_build "$prdir"
}

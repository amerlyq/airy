%%%% Reverse execution
BAD: often not available
TODO: find where available

reverse-continue [ignore-count]
rc [ignore-count]
  Beginning at the point where your program last stopped, start executing in
  reverse. Reverse execution will stop for breakpoints and synchronous
  exceptions (signals), just like normal execution. Behavior of asynchronous
  signals depends on the target environment.
reverse-step [count]
  Run the program backward until control reaches the start of a different
  source line; then stop it, and return control to GDB.
  Like the step command, reverse-step will only stop at the beginning of a
  source line. It “un-executes” the previously executed source line. If the
  previous source line included calls to debuggable functions, reverse-step
  will step (backward) into the called function, stopping at the beginning
  of the last statement in the called function (typically a return
  statement).
  Also, as with the step command, if non-debuggable functions are called,
  reverse-step will run thru them backward without stopping.
reverse-stepi [count]
  Reverse-execute one machine instruction. Note that the instruction to be
  reverse-executed is not the one pointed to by the program counter, but the
  instruction executed prior to that one. For instance, if the last
  instruction was a jump, reverse-stepi will take you back from the
  destination of the jump to the jump instruction itself.
reverse-next [count]
  Run backward to the beginning of the previous line executed in the current
  (innermost) stack frame. If the line contains function calls, they will be
  “un-executed” without stopping. Starting from the first line of a
  function, reverse-next will take you back to the caller of that function,
  before the function was called, just as the normal next command would take
  you from the last line of a function back to its return to its caller 5.
reverse-nexti [count]
  Like nexti, reverse-nexti executes a single instruction in reverse, except
  that called functions are “un-executed” atomically. That is, if the
  previously executed instruction was a return from another function,
  reverse-nexti will continue to execute in reverse until the call to that
  function (from the current stack frame) is reached.
reverse-finish
  Just as the finish command takes you to the point where the current
  function returns, reverse-finish takes you to the point where it was
  called. Instead of ending up at the end of the current function
  invocation, you end up at the beginning.

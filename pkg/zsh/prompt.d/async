# vim: ft=zsh:ts=2:sw=2:sts=2
# @ref: MIT, (c) amerlyq, 2015
# @brief Compute slow commands in the background.
#   NOTE Must be the last commands of function for prompt refresh to work.

function prompt_update {
  typeset -g _prompt_async_pid=''  # Reset PID
  for c in $_prompt_async_calls; do
    # THINK: directly use typeset -g instead of source env=$(< $tmp/f1 < $tmp/f2)
    [[ -s $_prompt_tmp/$c ]] || continue
    # alias typeset='typeset -g'
    source $_prompt_tmp/$c
    # unalias typeset
  done
  # DEV: don't reset prompt if files empty or if values are the same as before
  #   => CHECK: maybe will fix some tmux errors ?
  # FIXED:(segfault): https://github.com/zsh-users/zsh-syntax-highlighting/issues/230
  zle && zle .reset-prompt
}

function prompt_async_exec {
  local update=${1:?} timer pids=()
  # NOTE: 'timeout' is expensive, 'sleep+kill' need fork,
  # ALSO: '{{ cmd; }|{ sleep 5; kill 0; }}' don't work

  # EXPL: terminate itself w/o waiting for next prompt to kill
  #   * if terminal left alone or user launched long session with ranger/etc
  #   * send signal to update prompt before killing to reset $pid variable
  { sleep 10; kill -USR1 $update; kill 0; } & timer=$!

  for c in $_prompt_async_calls; do
    _prompt_async_call_$c >! $_prompt_tmp/$c & pids+=($!)
  done

  # EXPL: wait all jobs beside sleep ALT: array[$array[(i)value]]=()
  # wait ${${${(v)jobstates##*:*:}%=*}/$timer}
  wait $pids
  # EXPL: suppress err on 'kill nonexistent' and msg 'was killed'
  { kill $timer && wait $timer; kill -USR1 $update; } 2>/dev/null
}

function prompt_async {
  # Re-establish trap each time (if user have changed it)
  trap prompt_update USR1

  # EXPL: terminate all stale async jobs if too slow
  if ((_prompt_async_pid)); then
    local dt=$(( SECONDS - _prompt_async_start ))
    if (( dt > 30 )); then
      kill -- $_prompt_async_pid 2>/dev/null
      kill -USR1 $$  # Reset PID and load all data which ready
    fi
  fi

  # EXPL: terminate all async jobs if too slow
  ((_prompt_async_pid)) && return

  prompt_async_exec $$ &!
  typeset -g _prompt_async_pid=$!
  typeset -g _prompt_async_start=$SECONDS
}

#!/bin/bash

PROJ_ROOT_DIR="${1:-`pwd`}"
ARGS="${@:1}"
HFL=/tmp/headers.lst
HDIRS=/tmp/hd_dirs.lst
SFL=/tmp/sources.lst

# Find dirs with headers
ffarg(){ printf "\( \
    -path './build' -prune -o -path './libs' -prune -o \
    -path './scripts' -prune -o -path './cmake' -prune -o \
    -iname '*.${1}' -o -iname '*.${1}pp' \)\n"; }

eval "find . $(ffarg 'h') -printf '%h\n'" | sort -u | sed '1d' > "$HDIRS"
eval "find . $(ffarg 'h') -type f" | sort -u > "$HFL"
eval "find . $(ffarg 'c') -type f" | sort -u > "$SFL"


# { cat "$HFL"; cat "$SFL"; } | while read line; do
#     file -i $line
#     CHARSET="$(file -bi "$line" | awk -F "=" '{print $2}')"
#     if [ "$CHARSET" != utf-8 ]; then
#         iconv -f "$CHARSET" -t utf8 "$file" -o temp
#         cat temp > "$file"
#     fi
#     file -i $line
# done

# -j4 --enable=warning,style,performance,portability

# --verbose --suppress=variableScope
cppcheck -q -f  --template=gcc --error-exitcode=2   \
    --enable=all --inconclusive --platform=unix64   \
    --std=c99 --std=c++03 --report-progress $ARGS   \
    --includes-file="$HDIRS" --file-list="$SFL"     \
    --suppress=missingIncludeSystem         \
    -i libs/ -i build/ "$PROJ_ROOT_DIR" # --xml-version=1 . 2> cppcheck_report.xml

if [ $? -eq 2 ]; then exit 1; fi


# --check-config  | To see which .h cppcheck can't find
# --check-library

# --inconclusive | For perfect program. Enables all verifyings.

# Если нужно проверить код, который был написан для Win32, используя Linux, нужно обязательно указать платформу:
# unix32, unix64 — все *nix (включая Linux)
# win32A, win32W, win64 — Windows с кодировкой ASCII/UNICODE

# Можно использовать сразу два стандарта:
#$ cppcheck --std=c99 --std=posix ./source

# posix — для ОС, совместимых со стандартом POSIX (включая Linux);
# c89, c99, c11(default) — язык Си
# c++03, c++11(default)  — язык Си++

# Best man
# http://habrahabr.ru/post/210256/
# http://martin-moene.blogspot.com/2014/04/search-with-cppcheck.html

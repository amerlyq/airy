Текстовые объекты
| `action`[ia][wWsp()<>{}"'`]  |  [inner, outer]  [word, WORD, sentence, paragraph, _bracket-block_]
  : `i` (inner -- only block), `a` (outer -- with spaces and brackets)
Небольшие примеры, что бы было понятнее. Символами [ и ] выделен выделенный блок.
  Команда   Текстовый объект
  iw        Это [тестовое] предложение.
  aw        Это [тестовое ]предложение.
  iW        Это[ тестовое ]предложение
  aW        Это[ тестовое ]предложение.
  is        ...предложение. [Это тестовое предложение.] Это...
  as        ...предложение. [Это тестовое предложение. ]Это...
         конец предыдущего параграфа
  ip        [Это параграф. Содержащий два предложения.]
         следующий параграф.
         конец предыдущего параграфа
  ap        [Этот параграф. Содержит два предложения
        ]следующий параграф
  i( or i)  1 * ([2 + 3])
  a( or a)  1 * [(2 + 3)]
  i< or i> The <[tag]>
  a< or i> The [<tag>]
  i{ or i}  some {[ code block ]}
  a{ or a}  some [{ code block }]
  i"        The "[best]"
  a"        The[ “best”]
  i`        The `[best]`
  a`        The[ `best`]

;   This is test sentence.
; 0  |^     ge.  e w

  ge — перескакивает к концу предыдущего слова
  gE — перескакивает к концу предыдущего слова, игнорируя символы пунктуации
  g_ — перескакивает к последнему не пробельному символу строки
Для получения подробной информации по фильтрации выполните :h filter.

Когда вы набираете текст, то довольно часто приходится набирать одни и те же слова.
  : При нажатии Ctrl+p Vim будет искать продолжение слова, которое мы набираем, в набранном ранее тексте.
  : Ctrl+x и Ctrl+l завершит набранный текст до конца строки.
  : Если вы не уверены в правильности написания слова, можно включить проверку
  : орфографии :set spell и при нажатии комбинации Ctrl+x и Ctrl+K Vim выполнит поиск в словаре.

Метки [m`']..
< http://vim.wikia.com/wiki/Using_marks
 Для быстрого перехода в разные места документа или между документами, можно выставлять метки.
  [a-z]/[A-Z] Works through one/all buffers in current/all(new) sessions
   So you can open file with `V after restarting Vim.
    Некоторые метки Vim ставит автоматически:
  {0-9} — 10 последних позиций в закрытых файлах (0 последний файл, 1 предпоследний и т.д.)
  < и > — левая и правая позиции помеченного текста.
  ( и ) — начало и конец текущего предложения
  { и } — начало и конец текущего параграфа
  [ и ] — первый и последний символы скопированного или изменённого текста
  . — позиция последней замены
  ' или ` — позиция перед последним переходом
  " — позиция перед последним выходом из файла
  ^ — позиция последней стоп-вставки
  :marks  list all the current marks

Для установки ручной метки используйте m{a-zA-Z} (после m следует либо a,b..z или A, B..Z). Для перехода между метками используются ' и `.
  ' — устанавливает курсор на первый не пробельный символ в отмеченной строке
  ` — устанавливает курсор на место где была установлена метка

Существует различие между строчными и заглавными символами меток:
  {a - z} — локальный файл
  {A - Z} — сохраняется и доступно между сессиями (ассоциированы с файлами)
    Можно использовать метку L для ведения рабочего журнала и T для своего расписания и быстро обновлять информацию в них.
  Например можно легко перейти к позиции курсора перед закрытием файла, набрав `"
  (в настройках Vim легко сделать, что бы при открытии файла курсор автоматически перемещался в эту позицию)

Для получения списка всех меток можно набрать команду :marks. Для удаления меток используется :delmarks.
 :delmarks a b c удалит метки a, b и c, для удаления всех меток используйте :delmarks!

# Tags
  Ctrl - ] = Click while Ctrl is selected, press g and click
  stag = to open tag in new window
  Ctrl -W ] = In new window
  tselect to list all the tag matches e.g :tselect function1 will list all locations where func1 is defined
  :stselect for opening in new window. Ctrl-w g]

  Returning after a tag jump
  pop 'expression'
  Ctrl-t
  Ctrl - right click
  g - right mouse button

Folding
 После закрытия vim все свертки забываться, для сохранения сверток в открытом
 файле используется команда :mkview, для загрузки - loadview.
  | zf{motion} or {Visual}zf | Operator to create a fold (zf5j, zf/some)
  | zf'a | fold to a mark
  | zF | create a fold for N lines
  | zd | Delete one fold at the cursor
  | zD | Delete folds recursively at the cursor
  | zE | Eliminate all folds in the window
  | zo | Open one fold
  | z) | Open all folds recursively
  | zc | Close one fold
  | zC | Close all folds recursively
  | za | When on a closed fold: open it and viceversa
  | sA | When on a close fold: Open it recursively and vice versa
  | zR | Open all folds
  | zM | Close all folds
  | zn | Fold none: reset foldenable. All folds will be open
  | zN | Fold normal: set 'foldenable'. All folds will be as they were before
  | zi | Invert 'foldenable'
  | [z | Move to the start of the current open fold
  | ]z | Move to the end of the current open fold
  | zj | Move downwards to the start of the next fold
  | zk | Move upwards to the end of the previous fold

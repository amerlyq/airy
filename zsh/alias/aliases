# vim:ft=zsh
[[ -n ${ZSH_NAME-} ]] || return 0  ## Global aliases. Zsh only
# ATTENTION: disallow aliases after commands requiring args

alias hh='fc -l 1 | grep -E '

# Expand in any place of cmdline.
# Space at the end to allow expanding next command

## Consumers
alias -g NZ='&>/dev/null'
alias -g N1='1>/dev/null'
alias -g N2='2>/dev/null'
alias -g N2C='2> >(sed -u "s/^/\o033[31m/; s/\$/\o033[0m/")'
alias -g N+='2>&1'
# REF: https://unix.stackexchange.com/questions/265061/how-can-i-pipe-only-stderr-in-zsh
#  OR:(3.26: Why is my output duplicated): http://zsh.sourceforge.net/FAQ/zshfaq03.html#l43
alias -g N-='2>&1 >&- >/dev/null'  # suppress stdout and pipe stderr (NICE: +mult_ios)
alias -g N%='3>&2 2>&1 1>&3 3>&-'  # swap stdout and stderr (BAD: +mult_ios)
alias -g NN='|stdbuf -oL -eL tee /dev/tty'
alias -g N0='|tr \\n \\0'
alias -g 0N='|tr \\0 \\n'

## Viewers
if (($+commands[$PAGER])); then
  alias -g L='| "$PAGER" '
  alias -g LL='|& "$PAGER" -r '
fi
if (($+commands[gnuplot])); then
  alias -g PL0="| gnuplot -p -e \"set xlabel 'index, n'; set ylabel 'value, -'; plot '-' using 1 with linespoints lw 2 pt 7 notitle\""
  alias -g PL1="| gnuplot -p -e \"plot '-' using 1:2 with linespoints lw 2 pt 7 noenhanced\""
  pl1(){ gnuplot -p -e "set xlabel '$1'; set ylabel '$2'; plot '-' using 1:2 with lines lw 2 title '$3' noenhanced"; }
fi

# USAGE: $ r.rsync-ssh --dry-run --delete-after --no-t --  ./ lc:/me/vd G ' <f' | cut -d' ' -f4- LP
alias -g LP="X zsh -c 'command ln -svT --backup=numbered -- "'"$1:A" "$0/${1//\//⁄}"'"' "'"$(d=/tmp/res && mkdir -p "$d" && echo "$d")"'

# Line trim W/H to term size (w/o two prompts and errcode)
alias -g CW='| expand | cut -c-"$(tput cols)"'
alias -g CH='| head -$(($(tput lines)-5)) | expand | cut -c-"$(tput cols)"'

if (($+commands[$EDITOR])); then
  # alias -g V='| $EDITOR -R - '  # USE ':set noro' to edit
  # ALSO: -c "fencs= fenc=utf8 nobinary nobomb"
  alias -g V='| $EDITOR - -c "setl noro ma bt=nofile nowrap"'
  alias -g VN='V -c "setf nou"'
  alias -g VQ='V -c "cgetb|copen"'
    # ALT: ag --vimgrep ... |sort| nvim -q/dev/stdin
  alias -g VG='V -c "set cole=0 fdl=1|setf ag_grp"'
  alias -g V@='|vipe| '
  # ALT:(vipe): V :w!tee
  # SEE: http://stackoverflow.com/questions/3219479/how-to-write-buffer-content-to-stdout
  # NOTE: You cannot simply put vim inside a pipe, because then Vim cannot display its UI.
  #   $ { FROMCMD | vim - 8>&1 >&9 | tac | tac | TOCMD; } 9>&1
fi

## Utils
# BUG: shows command from ~+2 history
alias -g A='; alert'  # USAGE: $ <cmd> A OR $ A <cmd> -- notify-send on long-running cmds.
alias -g D.='$(date +%Y%m%d_%H%M%S)'
alias -g D@='$(date +@%s)'
# BAD: can't be used as file name due to contained '/' symbol
alias -g D!='$(printf "%08x" $(date +%s)|xxd -r -p|basenc --z85|rev)'

## Filters
alias -g H='|head'
alias -g H1='|head -1'
alias -g H2='|head -2'

alias -g T='|tail'
alias -g T1='|tail -1'
alias -g T2='|tail -2'

# ALSO:(rest):
alias -g R='|tail -n +11'
alias -g R1='|tail -n +2'
alias -g R2='|tail -n +3'

alias -g C='|wc --lines'
alias -g Cb='|wc --bytes'
alias -g Cc='|wc --chars'
alias -g Cm='|wc --max-line-length'
alias -g Cw='|wc --words'
alias -g CC='|cat'
alias -g Cn='|nl -s"  " -w4'
alias -g Cs='|tr \\n \\0 | command du --files0-from=- --dereference-args --bytes --total'
alias -g Cz='|tr \\0 \\n'
alias -g Csum='|paste -sd+|bc'  # NOTE: slower than awk, can't float as perl
# ALT: |perl -nle '$s+=(split)[1];END{print $s}'
alias -g TC='|column -Lt'
alias -g TT='|column -Lts'"$'\t'"
alias -g TR='|LC_ALL=C tree --noreport -aAC --dirsfirst --fromfile=-'
alias -g W='|while read line; do'
alias -g NE='|grep -v "^\s*\$"'
alias -g S='|noglob sed -u -rn'

alias -g SS='|LC_ALL=C sort'
alias -g SN='SS -n'
alias -g SU='SS -u'
alias -g SN-='SS -rn'
alias -g SU-='SS -ru'
for i in {1..9}; do
  alias -g S$i-="SS -sk$i,$i"
  alias -g S$i="SS -sk${i}r,$i"
  alias -g S${i}n-="SS -sk${i}n,$i"
  alias -g S${i}n="SS -sk${i}rn,$i"
  alias -g S${i}u="SU -k$i,$i"
done
alias -g SC='SS|uniq -c|sort -srn -k1,1'
# ALT: |perl -e 'print sort{length($a) <=> length($b)} <>'
alias -g SL='|awk "{print length,\$0}"|sort -ns|cut -d" " -f2-'

for i in {1..9}; do
  alias -g C$i="|awk '{print\$$i}'"
  alias -g C/$i="|awk -F/ '{print\$$i}'"
  alias -g C\$$i="|awk '{print\$(NF-$i)}'"
  alias -g C//$i="|awk -F/ '{print\$(NF-$i)}'"
done
alias -g C\$="|awk '{print\$NF}'"
alias -g C/\$="|awk -F/ '{print\$NF}'"
alias -g C:="|awk -F':\\\\s' '{print\$1}'"
alias -g C::="|awk -F':\\\\s' '{print\$NF}'"

# Prints columns 1 2 3 ... n.
function slit { awk "{ print ${(j:,:):-\$(${^@})} }"; }
alias -g CN='|slit'

alias -g U='|uniq'
alias -g Uc='|uniq -c'
alias -g Uo="|awk '!a[\$0]++'"

if (($+commands[r.filter-block])); then
  for i in {1..4} {-1..-4}
  do alias -g B$i="|r.filter-block -b $i "; done
fi

# Pipes
if (($+commands[grep])); then
  # foreach c ($(<<<'q i F x C2')) alias -g G${c: -1}="G -$c"; end
  alias -g  G="|${aliases[grep]:-grep} -E"
  alias -g GF="|${aliases[grep]:-grep} -F"
  alias -g G2='G -C2'
  for i in i q v w x; do alias -g G$i="G -$i"; done
fi

if (($+commands[xargs])); then
  # BAD:(alias resolves anywhere):
  #   cat $(ls Z); a=(q C2); for i in q C2; do ..
  # NEED: use xargs only if 0<$#
  # NOTE: allow aliases resolution after xargs
  alias -g X0='|xargs -r0n1 '
  alias -g XA='|xargs -rn1 -d\\n '
  alias -g X='|sed -n /./p XA '
  alias -g X{}='X -I{} '
  # NOTE: xargs fork faster then parallel shell
  # | xargs -0 -rn1 -P$(nproc) -I{} "$@"
  # WARN:(broken pipe):  xargs | head -1  USE: parallel --dry-run

  # EXPL: add word from first column (until last ':' delim) into filenames from other columns
  #   => USAGE: distributing reverse-deps from $ r.find-elf | r.elf-deps
  # alias -g WX='|xargs -rL1 -d\\n bash -c '"'"'d=${1+$0}; l=${1-$0}; mkdir -p "${d:=/tmp/dep}" && cd "$d" && tee -a ${l##*: } <<< "${l%: *}"'"'"
fi

if (($+commands[xsel])); then
  alias -g YN='|xsel -ib'
  alias -g Y='|tee >/dev/tty|xsel -ib'
  alias -g Y+='|tee >/dev/tty|xsel -ab'
  alias -g Y:='xsel -ob'
  alias -g Y.='$(xsel -ob)'
fi

if (($+commands[fzf])); then
  # ALT:(fzf) https://github.com/garybernhardt/selecta
  # --multi --no-sort --reverse --cycle --no-hscroll
  alias -g F='|r.fzf -m'
  alias -g X@='F X '
  alias -g Y@='F Y '
  # alias -g Z:='Z@ -I{} '
fi

## Buffers
_xsel_tmp_buf=${TMPPREFIX:-${TMPDIR:-/tmp}}/zsh-output
alias -g YT='|stdbuf -oL -eL tee "$_xsel_tmp_buf"'
alias -g YT+='|stdbuf -oL -eL tee -a "$_xsel_tmp_buf"'
alias -g YT:='cat "$_xsel_tmp_buf"'
alias -g YT.='"$_xsel_tmp_buf"'

# alias -r @="printf \"$(xsel -ob)\n\""
#   { xsel: Can't open display: (null)
#   { : Inappropriate ioctl for device
# alias -g @="\"\$(xsel -ob)\""

# Re-run last cmd as sudo (ALT: sudo `!!`)
alias please='sudo $(fc -ln -1)'
alias kill='\kill'  # FIXED pid completion by process name

## Shorts

## Std-like
# alias agi='noglob agi'
psg() { ps uwwp ${$(pgrep -d, "${(j:|:)@}"):?no matches}; }
# if (( $+commands[links2] )) ; then

# Colored less in pipe
# http://www.greenwoodsoftware.com/less/faq.html
# https://wiki.archlinux.org/index.php/core_utilities#Colored_output_when_reading_from_stdin
# zmodload zsh/zpty
# pty() {
#     zpty pty-${UID} ${1+"$@"}
#     if [[ ! -t 1 ]];then
#         setopt local_traps
#         trap '' INT
#     fi
#     zpty -r pty-${UID}
#     zpty -d pty-${UID}
# }
# ptyless() {
#     pty $@ | less
# }
## Open less on first word
#  ... | less +/pattern

# Show history
# Uncomment the following line if you want to change the command execution
# time stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"
# TODO: more history aliases (!even elapsed time per cmd (in zsh instance boundaries)!)
#   SEE: https://unix.stackexchange.com/questions/103398/datetime-stamp-when-running-history-command-in-zsh-shell
case ${HIST_STAMPS-}
in "mm/dd/yyyy") alias history='fc -fl 1'
;; "dd.mm.yyyy") alias history='fc -El 1'
;; "yyyy-mm-dd") alias history='fc -il 1'
;;            *) alias history='fc -l 1'
esac


[[ ~/.zshrc.zwc -nt ~/.zshrc ]] || zcompile ~/.zshrc


# # TEMP: for WSL2 and NUC
# export EDITOR=nvim
# # : "${XDG_RUNTIME_DIR:=/tmp}"
# ## BAD:OBSOL:USE: $ sudo systemd-run --system --scope -- su -l myuser
# # export XDG_RUNTIME_DIR="/run/user/$(id -u)"
# ## TEMP: override for "su - myuser"
# [[ -n ${DISPLAY:+x} ]] || export DISPLAY=":10.0"
# ## TEMP: override for "clipboard"
# [[ -n $SSH_CONNECTION && $PATH != *libexec/xc:* ]] && export PATH=/usr/local/libexec/xc:$PATH


export SSH_AUTH_SOCK=${XDG_RUNTIME_DIR:?}/gnupg/S.gpg-agent.ssh
[[ -n $SSH_CONNECTION ]] && export PINENTRY_USER_DATA='USE_CURSES=1'
# autoload -Uz add-zsh-hook
# function _gpg-agent-update-tty {
#   gpg-connect-agent UPDATESTARTUPTTY /bye >/dev/null
# }
# add-zsh-hook preexec _gpg-agent-update-tty

## Disable suspending on <C-s>, <C-q>
setopt noflowcontrol

## DFL:VIZ: interactive monitor shinstdin zle
setopt pipefail

## Directory
setopt autocd
setopt autopushd
setopt cdablevars
setopt extendedglob
setopt noclobber
setopt pushdignoredups
setopt pushdsilent
setopt pushdtohome
for i ({1..9}) alias "$i"="cd +$i"; unset i


############################################################
### History
# PERF=~20000cmds/year
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt extendedhistory
setopt histexpiredupsfirst
setopt histfindnodups
setopt histignorealldups
setopt histignoredups
setopt histignorespace
setopt histsavenodups
# setopt histverify
setopt incappendhistorytime


## FIXED: trim trailing newline from confl-triple-click
# SRC: https://unix.stackexchange.com/questions/693118/trim-trailing-newline-from-pasted-text-in-zsh
bracketed-paste() {
  zle .$WIDGET && LBUFFER=${LBUFFER%$'\n'}
}
zle -N bracketed-paste


## NOTE: store audit events from zsh history by days ⌇⡟⢏⠰⣔
# [_] CHECK:FAIL? shells local sessions don't sync immediately anymore -- only after shell was closed
# SEE: INC_APPEND_HISTORY or SHARE_HISTORY
zshaddhistory() { local f
  [[ ${1:0:1} == " " ]] && return 2  # [[ -o hist_ignore_space ]] &&
  print -sr -- ${1%%$'\n'}  # BAD: no dur and "-n" does not help to strip
  print -v f -P -- '%D{%Y/%Y-%m-%d}'
  f=/d/audit/$HOST/zsh/$f
  # BAD:PERF: checks directory existence on each command
  [[ -d $f:h ]] || mkdir -p $f:h
  fc -p $f  # BAD:(no ts/dur): print -rn -- $1 >> $f
}

# HACK:(split): cvt ZSH histfile to audit logs ⌇⡟⢔⣳⡀
#   $ gawk '/^: [0-9]{10}:[0-9];/{f=strftime("%Y/%Y-%m-%d",substr($0,3,10))} {print >> f}' ~/.zsh_history
# HACK:(sync): pre-populate history file on new system from all audit logs of old PC ⌇⡟⢏⠱⣻
# if [[ -n $HISTFILE ]] && [[ ! -f $HISTFILE ]] && [[ -d $_audit[d_log] ]]; then
#   (set +o clobber; <$_audit[d_log]/20??/20??-* > $HISTFILE)
# fi

############################################################
### TEMP

source /usr/share/doc/pkgfile/command-not-found.zsh

source() {
  [[ $1.zwc -nt $1 ]] || zcompile $1
  builtin source $@
}

source /d/airy/zsh/arc/amer-widgets.zsh
source /d/airy/zsh/arc/amer-key-mix.zsh
source /d/airy/zsh/arc/alias/aliases
# TEMP: import from !fish
source ~/.zsh_aliases

# TEMP: cdauto paths (OLD-style)
# TODO:CHG:(cdauto): cd /path/to/somefile(:h)
source /d/airy/sh/alias/cd
while read -r k p; do
  # SEE: https://vincent.bernat.ch/en/blog/2015-zsh-directory-bookmarks
  # USAGE: cd ~.a
  [[ ${k:0:1} == "." && -z ${${k:1}//[a-zA-Z0-9.]} ]] && hash -d -- "${k:1}"="${p#-l }"
  alias "$k"="cdauto $p"
done < <(sed -r 's/(^|\s+)#.*$//; /^\s*$/d' /d/airy/airy/pathes)

fm(){ local d f=${XDG_RUNTIME_DIR:?}/ranger/cwd
  # NOTE: exit ranger-nested shell && sync last PWD (inof ZSHEXIT)
  [[ -n ${RANGER_LEVEL-} ]] && exit  # && (set +C && pwd > "$f")
  command fm --choosedir="$f" "$@"
  [[ -s $f ]] && d=$(<"$f")
  if [[ -d ${d-} && $d != $PWD ]]; then builtin cd -- "$d" || return; fi
}

# FIXED:(<C-d>): should sync PWD even when exiting on <C-D> inof <,s>
zshexit(){  # _ranger_cwd
  local tmp=${XDG_RUNTIME_DIR:?}/ranger
  [[ -d $tmp && $RANGER_LEVEL ]] || return 0
  # [[ -d $tmp ]] || command mkdir -p "$tmp"
  (set +C && print -n -- "$PWD" > "$tmp/cwd")  # Disable clobbering
}


# Allow command line editing in an external editor.
autoload -Uz edit-command-line
zle -N edit-command-line

# Expand aliases
function glob-alias {
  zle _expand_alias
  zle expand-word
  zle magic-space
}
zle -N glob-alias

# control-space expands all aliases, including global
bindkey -M viins "^ " glob-alias


# NOTE: remove "/" from default set to prevent deleting whole path at once
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

## DISABLED: long running
# TIMEFMT='e=%*E u=%U s=%S memsh=%XkB memun=%DkB memmax=%MkB nswap=%W nmajflt=%F nmnrflt=%R nrecv=%r nsent=%s nctxyield=%w nctxforce=%c nm=%J'
TIMEFMT='%mE %P(%mU+%mS) | ram=%D+%XkB,%MkB fault=%F/%R ios=%I/%O/%k ctx=%w/%c'

# SRC: https://unix.stackexchange.com/questions/76227/how-to-make-cd-dir-filename-take-me-to-dir
autoload -Uz select-word-style
zle -N select-word-style
bindkey -M viins "\ew" select-word-style
# bindkey -M viins '\M-w' select-word-style


# SRC: https://stackoverflow.com/questions/8344699/how-to-repeat-the-last-part-of-a-previous-command
# USAGE: M-2 M-.
# SRC: https://stackoverflow.com/questions/34571398/altnumberdot-and-altcomma-in-zsh-and-bash
# USAGE: M-. M-. M-m -- go back in history and get last word
autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey "\em" copy-earlier-word

# FIXME: check why I don't have these by DFL
bindkey "^[0" digit-argument
bindkey "^[1" digit-argument
bindkey "^[2" digit-argument
bindkey "^[3" digit-argument
bindkey "^[4" digit-argument
bindkey "^[5" digit-argument
bindkey "^[6" digit-argument
bindkey "^[7" digit-argument
bindkey "^[8" digit-argument
bindkey "^[9" digit-argument


# SRC: https://stackoverflow.com/questions/48229336/insert-first-word-of-previous-command-in-zsh-command-line
bindkey "\e." insert-last-word
bindkey "\e_" insert-last-word

zle -N insert-first-word
## WTF: bindkey "^[," _history-complete-newer
bindkey "\e," insert-first-word


############################################################
### Prompt

# source /d/airy/zsh/arc/prompt.d/path

_set_prompt() {
  local color=1
  if [[ $debian_chroot ]]; then color=4
  elif [[ $SSH_CONNECTION ]]; then color=2
    if [[ $TMUX ]]; then color=4
    elif [[ $HOST =~ vbox ]]; then color=3
    fi
  elif [[ -z $TMUX ]]; then color=7
  elif [[ $RANGER_LEVEL ]]; then color=34
  elif [[ $MIUR_LEVEL ]]; then color=62
  fi

  local nest=
  [[ $debian_chroot ]] && nest+=C
  [[ $RANGER_LEVEL ]] && nest+=R
  [[ $MIUR_LEVEL ]] && nest+=M
  [[ $VIM ]] && nest+=V
  [[ $nest ]] && nest="%F{60}%B$nest%b%F{$color}"

  # local parts
  # [[ $UID -eq 0 ]] && parts="╔═╚╣╼┇" || parts="┌─└╢╼┇"
  # OR: ╭ ╰

  PROMPT="%(?..%F{1}%?↵%f
)%F{$color}┌${nest:-─}─%f %B%F{220}%d %F{238}%~%f%b
%F{$color}└%(!.#.╼)%f "
  ## OR:(disable blinking cursor on WSL2/NUC): append {"$'\e[2 q'"%} to 2nd line ::
  #   )%F{$color}┌${nest:-─}─%f %B%F{220}%d %F{238}%~%f%b%{"$'\e[2 q'"%}
}; _set_prompt


############################################################
### Plugins
_plugins=/d/plugins/zsh

# DEBUG: $ rm -f ~/.zcompdump; compinit
fpath=($_plugins/zsh-completions/src $fpath)

source $_plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
## BAD: conflicts with forward-char
# bindkey -M viins "^F" vi-forward-word
bindkey -M viins "^E" vi-add-eol

source $_plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
# source $_plugins/alias-tips/alias-tips.plugin.zsh

source $_plugins/zsh-autopair/autopair.zsh
autopair-init

# ATT: should be at the end of ZSHRC
source $_plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


autoload -Uz compinit
# -C (skip function check) implies -i (skip security check).
compinit -C -d "$_comp_path"
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zcompcache
zstyle ':completion:*' completer _expand _complete _files _correct _approximate
# zstyle ':completion:*' completer _complete _match _approximate


############################################################
# DEP=mcfly NICE: fzf-like Ctrl-R history by frecency/timestamp
# eval "$(mcfly init zsh)"
# eval "$(thefuck --alias '!' --enable-experimental-instant-mode)"

# HACK: #miur※⡢⣯⢁⢏ pre-fill prompt (inof running) by specified cmdline on ZSH startup
#   BET: print help notice  above shell-out to use $F / $S vars in cmdline
# if [[ -n ${ZSH_BUFFER-} ]]; then print -z "$ZSH_BUFFER" && unset ZSH_BUFFER; fi

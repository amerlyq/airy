INFO
  TUT Магия SSH / Хабр -- в картинках
    RU: https://habr.com/ru/post/331348/
    +++ https://dev.to/cpu/ssh-config-tips-and-tricks-54hk
  HACK: "Bastion" forwarding through multiple hops into LAN
    https://superuser.com/questions/96489/an-ssh-tunnel-via-multiple-hops
    WARN: don't forward "ssh-agent"
      https://blog.wizardsoftheweb.pro/ssh-agent-forwarding-vulnerability-and-alternative/
    KnownHost conflict -- when you have local and remote PC with same NAT IP
      https://superuser.com/questions/445253/how-to-edit-known-hosts-when-several-hosts-share-the-same-ip-and-dns-name
      https://superuser.com/questions/107679/forward-ssh-traffic-through-a-middle-machine


Reconnect w/o password until at least one session is alive
  ATTENTION:BUG: on '$ Gl' -- beware of http://rawsyntax.com/blog/faster-ssh-connections/
    ControlMaster auto
    # ALT: /tmp/%u/ssh/%r@%h:%p -- but you need to create this dir
    ControlPath ~/.ssh/sock/%r@%h:%p
    # ALT: yes
    ControlPersist 600

  ADD/REM/EXIT port forwarding to multiplexed session on the fly
    REF: https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Multiplexing
    $ ssh -O forward -L 8080:localhost:80 -S ~/.ssh/sock/user@example.org:22  user@example.org
    $ ssh -O cancel -L 8080:localhost:80 -S ~/.ssh/sock/user@example.org:22  user@example.org
    $ ssh -O exit -L 8080:localhost:80 -S ~/.ssh/sock/user@example.org:22  user@example.org
    ! ATT: escape sequence "~C" is not available for multiplexed sessions
    ! ATT: forwardings in "~#" are not included
    Check remote side socket is listening
      $ ss --all --unix -p G /tmp/xsel


Decrypt key
  $ ssh-keygen -pf ~/.ssh/id_rsa -N ""


Encrypt keys in PKCS#8 instead of MD5 passphrase
  !5 [_] READ REF https://wiki.archlinux.org/index.php/SSH_keys
    => to decide on CMP ssh-agent vs gnupg
  HACK TUT https://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html
    BAD: md5 $ ssh-keygen -p -f rou_rsa
    BET: $ cd ~/.ssh && openssl pkcs8 -topk8 -v2 des3 -in id_rsa -out id_rsa.new && chmod 600 id_rsa.new
    = everything must work as before

Safely storing passwd hash -- use slow cryptographic hashes
  https://codahale.com/how-to-safely-store-a-password/

Control Sockets
  To be able send many request w/o retype password to SSH
  You can do this cleanly with an ssh 'control socket'. To talk to an
  already-running SSH process and get it's pid, kill it etc. Use the 'control
  socket' (-M for master and -S for socket) as follows:
    $ ssh -M -S my-ctrl-socket -fnNT -L 50000:localhost:3306 jm@sampledomain.com
    $ ssh -S my-ctrl-socket -O check jm@sampledomain.com
  Master running (pid=3517) -- close persistent socket
    $ ssh -S my-ctrl-socket -O exit jm@sampledomain.com
  Exit request sent.
  Note that my-ctrl-socket will be an actual file that is created.


Allow password access
  /etc/ssh/sshd_config
    PasswordAuthentication no
    ...
    # ATT: at the end of file ('Match' affects all lines till end of file)
    Match address 192.168.1.0/24
      PasswordAuthentication yes
  $ sudo service ssh restart


Connect headless SSH
# THINK:MOVE: in ./airy/README.md?
  $ ssh bsrv 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_rsa.pub
  $ scp /usr/share/terminfo/s/st-256color bsrv:/tmp
  $ scp /usr/share/terminfo/t/tmux-256color bsrv:/tmp
  $ ssh -t bsrv 'for f in st-256color tmux-256color; do sudo mv -v "/tmp/$f" "/usr/share/terminfo/${f:0:1}/$f"; done'
  Disable ubuntu welcome garbage on ssh login
    sudo chmod -x /etc/update-motd.d/*
  Relogin: after 'chsh' to ZSH (kill shared connection)
  $ ssh -O exit bsrv
  = $ sudo ln -svf /bin/bash /bin/sh
  = $ v /etc/host
  = $ ./cfg/dev/chroot/prf/ubuntu-15.10

[_] TODO: automatic routing setup by netctl
[_] MOVE: |airy/net| but replace ips/dev names in notes
[_] FIXME: routing for svn


INFO
  [_] FIND: how routing works -- i.e. limitations, timeouts, general model
    [_] READ https://cromwell-intl.com/networking/routing.html
    https://networklessons.com/cisco/ccna-routing-switching-icnd1-100-105/ip-routing-explained
    https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper.htm
  [_] FIND: how linux kernel routes traffic
    i.e. "I know what goes on when you do..." $ curl example.com
  [_] NEED: low-level tools to generate sending frames and analyze returned ones by hands
    i.e. DEBUG network and learn how it works -- like you do with GDB
    FIND: how to send manually composed TCP/IP/MAC frames


REF
  https://bbs.archlinux.org/viewtopic.php?id=184434
  + https://stackoverflow.com/questions/29942760/linux-route-specific-traffic-through-ethernet
  https://superuser.com/questions/980509/route-only-specific-ip-series-traffic-from-eth0-and-rest-all-to-wlan0
  ++ READ https://unix.stackexchange.com/questions/101505/route-traffic-out-different-gateway-by-destination-network

  BET:REF: http://linux-ip.net/html/tools-ip-route.html
    !!! [_] READ http://baturin.org/docs/iproute2/
    NOTE:ALT: "change/replace" -- to modify / add if not exists
      BUG: can't select which rule to replace, can't reuse route fields in changed rule
        MAYBE: you can't "ip r change" only "dst" field E.G. "default" -> "172.16.*/16" (as "dst" may be route key in hashmap)

  ALT: iptables (untested)
  https://askubuntu.com/questions/104400/how-to-put-all-traffic-and-on-one-interface-and-some-traffic-on-another-interfac
    $ iptables -t mangle -A OUTPUT -p tcp --dport ssh -o eth0 -j MARK --set-mark 1
    $ ip rule add fwmark 1 table 1
    $ ip route add 0.0.0.0/0 table 1 dev wlan0

  Routing all traffic through ping / ICMP
    https://github.com/DhavalKapil/icmptunnel


ALG
  Routing all to WiFi but use company subnet for repo/jira/builds (172.16.* in /etc/hosts)
    G: arch linux traffic through another lan device
    https://bbs.archlinux.org/viewtopic.php?id=184434
    https://bbs.archlinux.org/viewtopic.php?id=231128
    https://bbs.archlinux.org/viewtopic.php?id=155020
    $ ip route show
      # default via 172.30.133.1 dev enp0s25 src 172.30.133.127 metric 202
      # default via 172.27.186.1 dev wlo1 src 172.27.186.103 metric 304
      # 172.27.186.0/24 dev wlo1 proto kernel scope link src 172.27.186.103 metric 304
      # 172.30.133.0/24 dev enp0s25 proto kernel scope link src 172.30.133.127 metric 202

    $ eth=$(command ip link | sed -rn '/^[0-9]+:\s+(e\w+):.*$/{s//\1/p;q}')
    $ gw=$(command ip r s exact 0.0.0.0/0 dev "${eth:?}" | sed -rn 's/.*via ([0-9.]+).*/\1/p')
    $ sudo ip route del default dev "${eth:?}"
    $ sudo ip route add 172.16.0.0/12 via "${gw:?}"
      <= for ethernet-only resources
    $ sudo ip route add 172.30.0.0/16 via "${gw:?}"
      <= for wifi-only resources
    $ sudo ip route flush cache
    $ ip route show
      # default via 172.27.186.1 dev wlo1
      # 172.16.0.0/16 via 172.30.133.1 dev enp0s25
      # 172.27.186.0/24 dev wlo1 proto kernel scope link src 172.27.186.103 metric 304
      # 172.30.133.0/24 dev enp0s25 proto kernel scope link src 172.30.133.127 metric 202
  Auto
    https://wiki.archlinux.org/index.php/dhcpcd#DHCP_static_route.28s.29
    $ man 8 dhcpcd-run-hooks
    https://www.daemon-systems.org/man/dhcpcd-run-hooks.8.html
    /usr/lib/dhcpcd/dhcpcd-hooks/40-vpnroute
      ip route del default dev enp0s25
      ip route add 172.16.0.0/12 via 192.168.1.1

      # OR: from router assigned gateway
      # ip route add 172.16.0.0/12 via 172.31.158.1
      # OR: by partial ranges (if some intranet resources accessible only by wifi)
      # ip route add 172.16.0.0/16 via 172.30.78.1
      # ip route add 172.30.0.0/16 via 172.30.78.1
  MacOS
    TUT https://gist.github.com/jessereynolds/1260554/6bf6c8bdd2b3afcd4486c041d604680764d4880b
    Add / remove intranet routing
      $ sudo networksetup -setadditionalroutes "Display Ethernet" 172.16.0.0 255.255.0.0 172.31.158.1
      $ sudo networksetup -setadditionalroutes "Display Ethernet"
    Reorder WiFi to be first before ethernet
      NOTE: analogous to removing second "default" gateway
      $ networksetup -listnetworkserviceorder
      $ sudo networksetup -ordernetworkservices "Wi-Fi" "Ethernet"
    Check default interface in use
      $ route get 8.8.8.8


Route WiFi to PC on same Router subnet
  https://wiki.archlinux.org/index.php/Internet_sharing
  SERVER
    $# sysctl net.ipv4.ip_forward=1
    OR: $# echo 1 > /proc/sys/net/ipv4/conf/enp0s25/forwarding
    /etc/sysctl.d/30-ipforward.conf
      net.ipv4.ip_forward=1
      net.ipv6.conf.default.forwarding=1
      net.ipv6.conf.all.forwarding=1
    WARN:SECU: keeping "iptables" permanently enabled is BAD
      !! anyone can impersonate Laptop simply by physically connecting
        into the same router/network when owner is absent
    $# iptables -t nat -A POSTROUTING -o wlo1 -j MASQUERADE
    $# iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
    $# iptables -A FORWARD -i enp0s25 -o wlo1 -j ACCEPT
    OR: nftables
    $# nft add table ip nat
    $# nft add chain ip nat prerouting '{ type nat hook prerouting priority 0 ; }'
    $# nft add chain ip nat postrouting '{ type nat hook postrouting priority 100 ; }'
    $# nft add rule nat postrouting oifname wlo1 masquerade
    $# nft list ruleset
      ---
    WARN: $# nft flush chain inet filter forward
    $# nft add chain inet filter forward '{ type filter hook forward priority 0 ; policy drop ; }'
    $# nft add rule inet filter forward ct state related,established accept
    $# nft add rule inet filter forward iifname enp0s25 oifname wlo1 accept
  CLIENT
    /usr/lib/dhcpcd/dhcpcd-hooks/40-vpnroute
      $# ip route del default dev eno1
      $# ip route add default via 192.168.1.3 dev eno1
      $# ip route add 172.16.0.0/12 via 192.168.1.1


DEBUG
  SEE
    https://wiki.archlinux.org/index.php/Network_Debugging
  Route lookup trie
    https://vincent.bernat.im/en/blog/2017-ipv4-route-lookup-linux
    $ cat /proc/net/fib_trie
    $ cat /proc/net/fib_triestat
    $ ip rule
    $ ip route show table local
  Reset network / routing
    $ sudo netctl restart eth_dhcp
    $ sudo netctl restart wifi_dhcp
  Reset default gateways (keep wifi/inet only)
    $ sudo ip route del default
    $ sudo ip route add default dev wlo1 via 172.27.186.1
  Dynamic gateway (via)
    https://ask.fedoraproject.org/en/question/47502/how-to-set-default-route-when-gateway-has-dynamic-ip/
  Visualization
    https://cumulusnetworks.com/blog/complex-topology-and-wiring-validation-in-data-centers/
  Package drop reason
    https://jvns.ca/blog/2017/09/05/finding-out-where-packets-are-being-dropped/
    $ sudo netstat -i
    $ ethtool -S enp0s25
    $ cat /sys/class/net/enp0s25/statistics/rx_dropped
    https://github.com/pavel-odintsov/drop_watch
    $ sudo ./dropwatch -l kas
    $ sudo perf record -g -a -e skb:kfree_skb
    $ sudo perf script
  Routing Problem with IP Forwarding
    https://serverfault.com/questions/596641/linux-ip-forwarding-trouble
      INFO: https://lartc.org/howto/lartc.kernel.html
      https://unix.stackexchange.com/questions/268928/routing-problem-with-ip-forwarding-on-ubuntu-14-04-and-virtualbox
    $# echo 0 > /proc/sys/net/ipv4/conf/eth0/rp_filter
    $# echo 0 > /proc/sys/net/ipv4/conf/eth1/rp_filter
  Troubleshoot Routing
    VIZ:HOWTO: http://www.microhowto.info/howto/index.html
    +++ 2019-10-16 [X] TUT:ALG: microHOWTO: Enable forwarding of IPv4 network packets
      http://www.microhowto.info/howto/enable_forwarding_of_ipv4_packets.html
    microHOWTO: Troubleshooting iptables
      http://www.microhowto.info/troubleshooting/troubleshooting_iptables.html
    microHOWTO: Troubleshooting the routing table
      http://www.microhowto.info/troubleshooting/troubleshooting_the_routing_table.html
      https://ubuntuforums.org/showthread.php?t=2175163
      Direct
        $ ip route get to 198.51.100.1 from 192.168.0.2 iif eth0
           198.51.100.1 from 192.168.0.2 via 203.0.113.1 dev ppp0  src 192.168.0.1
           cache <src-direct>  mtu 1500 advmss 1460 hoplimit 64 iif eth0
        NOTE: The main points to check are that the IP address of the next hop is
        correct (203.0.113.1 in this case) and that the packet is being sent
        onwards through the appropriate interface (ppp0).
      Reverse
        $ ip route get to 192.168.0.2 from 198.51.100.1 iif ppp0
           192.168.0.2 from 198.51.100.1 dev eth0  src 203.0.113.144
           cache  mtu 1500 advmss 1460 hoplimit 64 iif ppp0
        NOTE: You should also check the reverse path, because you will get no
        response to a ping unless it can be routed in both directions:
    microHOWTO: Troubleshooting SSH port forwarding
      http://www.microhowto.info/troubleshooting/troubleshooting_ssh_port_forwarding.html



HACK
  [_] READ:HACK: spoof DNS on LAN => redirect traffic
    https://null-byte.wonderhowto.com/how-to/hack-like-pro-spoof-dns-lan-redirect-traffic-your-fake-website-0151620/
  [_] MTU path discovery
    https://blog.cloudflare.com/path-mtu-discovery-in-practice/
  [_] Max mobile/vm net performance
    https://blog.cloudflare.com/optimizing-the-linux-stack-for-mobile-web-per/
    http://www.nateware.com/linux-network-tuning-for-2013.html
    http://solutionhacker.com/system-tuning-cheat-sheet/
  ++ [_] REF: route lookup in tree
    https://vincent.bernat.im/en/blog/2017-ipv4-route-lookup-linux

# vim:ft=sh

## DEV: git log only for current branch, showing merges as gray commits (like in bitbucket PR view)
# REF: How to find the nearest parent of a Git branch? - Stack Overflow
#   https://stackoverflow.com/questions/3161204/how-to-find-the-nearest-parent-of-a-git-branch
# FAIL: cannot handle more than 27 refs
# git show-branch -a | grep '\*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | sed '1{s/.*\[\(.*\)\].*/\1/;s/[\^~].*//;q}'
# CHECK: my prompt -- how can I decifer "remotes/origin/myfeature" even for detached HEAD ?
# BET: git merge-base --fork-point HEAD
# glg -m "$(git merge-base --fork-point HEAD)~..HEAD"
# glg -m --first-parent "$(git merge-base --fork-point HEAD)~...HEAD"

## Log
alias gfH='git fcommits'  # history for one file
alias gfB='git flines'    # blame formatted

alias glg='git lgraph'
alias glg.='glg -- .'
# WARN:NEED:(git pull --rebase): https://redfin.engineering/visualize-merge-history-with-git-log-graph-first-parent-and-no-merges-c6a9b5ff109c
#   <= otherwise first-parent of merge on "git pull" is reversed and history is wrong
alias gll='glg -m -M --first-parent'
alias glc='glg -m -M --no-merges'
alias glm='glg -m -M --merges'
alias gla='glg --all'
alias gla.='gla -- .'

## Statistics on all authors / committers in the repo
# NOTE: add '... -- dir/file' for blaming
alias glan='git --no-pager shortlog --summary --numbered --email --all'
alias glcn='glan --committer'

# REF: https://stackoverflow.com/questions/46750027/is-there-a-git-log-summary-that-includes-merge-only-and-non-merge-commits
glB(){ git log -m --first-parent "$(git merge-base "$1" HEAD)~..HEAD" "${@:2}"; }
glBR(){ glB "$(git branch --list --remote --sort '-refname' --format '%(refname:short)' -- 'origin/release/R??' | head -1)" "$@"; }
alias gdR='glBR --patch'
alias gdR.='gdR -- .'

alias glF='git log -p HEAD..origin'  # with fetched
# alias gll='git lmsg'
gln(){ git ldump -n ${1:-10}; } #or -1 for inf

alias ggs='glg --source --all -S'   # search <text> in all commits content
alias ggx='git rev-list --all | xargs git grep'
alias ggS='git log -S'
alias ggG='git log -G'
# BET:TRY:(zsh>=4.3.7): anonymous functions
#   https://vincent.bernat.ch/en/blog/2011-zsh-zshrc
# USAGE: (){ print -l $@; } a b c
ggg(){ git --no-pager log --pretty=format:'%H' -G "$1" \
| while IFS= read -r rev; do echo && git --no-pager lstd --graph -n1 "$rev" && echo
  git --no-pager grep --color -I -n -e "$@" "$rev" | cut -d: -f2-
  # --break --heading
done; }
ggh(){ git --no-pager log --pretty=format:'%H' -G "$1" \
| while IFS= read -r rev; do
  git --no-pager grep --color -I -h -e "$@" "$rev" | awk '{$1=$1}1'
done; }

# git grep -l --all-match -e <regexp1> # To search files with line
# git log -G Foo --since=2009.1.1 --until=2010.1.1 -- path_containing_change # To search commits changing line

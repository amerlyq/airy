# vim:ft=sh

## DEV: git log only for current branch, showing merges as gray commits (like in bitbucket PR view)
# REF: How to find the nearest parent of a Git branch? - Stack Overflow
#   https://stackoverflow.com/questions/3161204/how-to-find-the-nearest-parent-of-a-git-branch
# FAIL: cannot handle more than 27 refs
# git show-branch -a | grep '\*' | grep -v "$(git rev-parse --abbrev-ref HEAD)" | sed '1{s/.*\[\(.*\)\].*/\1/;s/[\^~].*//;q}'
# CHECK: my prompt -- how can I decifer "remotes/origin/myfeature" even for detached HEAD ?
# BET: git merge-base --fork-point HEAD
# glg -m "$(git merge-base --fork-point HEAD)~..HEAD"
# glg -m --first-parent "$(git merge-base --fork-point HEAD)~...HEAD"

declare -gA _gitfmt
_gitfmt[cd]='%C(green)%cd%C(reset)'
_gitfmt[ad]='%C(bold green)%ad%C(reset)'
_gitfmt[h]='%C(yellow)%h%C(reset)'
_gitfmt[ph]='%<(60)'
_gitfmt[s]='%C(white)%s%C(reset)'
_gitfmt[d]='%C(bold red)%d%C(reset)'
_gitfmt[aN]='%C(bold blue)[%aN]%C(reset)'
_gitfmt[std]="${_gitfmt[ad]} ${_gitfmt[h]} ${_gitfmt[ph]}${_gitfmt[s]}${_gitfmt[d]} ${_gitfmt[aN]}"
_gitfmt[timeline]="${_gitfmt[cd]}│${_gitfmt[ad]}│${_gitfmt[std]#${_gitfmt[ad]}}"

_gitfmt[Iad]='%C(bold reverse green)%ad%C(reset)'
_gitfmt[Ih]='%C(reverse yellow)%h%C(reset)'
_gitfmt[Is]='%C(15 8)%s%C(reset)'
# _gitfmt[Is]='%C(white black)%s%C(reset)'
_gitfmt[Id]='%C(bold reverse red)%d%C(reset)'
# _gitfmt[Iph]='%C(reverse black)%>(60)%C(reset)'
_gitfmt[IaN]='%C(bold reverse blue)[%aN]%C(reset)'
_gitfmt[Istd]="${_gitfmt[Iad]} ${_gitfmt[Ih]} ${_gitfmt[ph]}${_gitfmt[Is]} ${_gitfmt[Id]} ${_gitfmt[IaN]}"

_gitfmt[dt]='%Y%m%d %H%M%S'
_gitfmt[d_]='%Y%m%d_%H%M%S'
_gitfmt[DT]='%Y-%m-%d %H:%M:%S'
_gitfmt[D_]='%Y-%m-%d_%H:%M:%S'
_gitfmt[d.]='%Y%m%d'
_gitfmt[D.]='%Y-%m-%d'  # BET: --date=short
# _gitfmt[DB]="%s => $(r.vim-xtref %s)"  ## TRY: ts => Braille


## Log
alias gfH='git fcommits'  # history for one file
alias gfB='git flines'    # blame formatted

alias gLl='git log --date=short --format=format:"${_gitfmt[std]}"'
alias gLn='git log --date=short --format=format:"${_gitfmt[Istd]}%n"'
alias gLt='git log --date=short --format=tformat:"${_gitfmt[std]}"'
alias gLL='git log --date=format:"${_gitfmt[DT]}" --format=format:"${_gitfmt[std]}"'
alias gLN='git log --date=format:"${_gitfmt[DT]}" --format=format:"${_gitfmt[Istd]}%n"'
alias gLM='git log --date=format:"${_gitfmt[DT]}" --format=tformat:"${_gitfmt[std]}"'
alias gLT='git log --date=format:"${_gitfmt[DT]}" --format=format:"${_gitfmt[timeline]}"'
alias gLF='git log --date=iso8601 --format=format:"commit %H%nparent %P%ntreesh %T%nreflog %gd %gs %gN <%gE>%nauthor %ad %aN <%aE>%ncomitr %cd %cN <%cE>%nsigner %G? %GS%ndecorat %D%S%nsubject %s%nbody %b%nnotes %N%n" --graph'

alias glg='gLl --graph'
alias glg.='gLl --graph -- .'
alias glG='gLL --graph'

alias gl-='gLl --all --show-linear-break=---'
alias gla='gLl --graph --all'
alias gla.='gLl --graph --all -- .'
alias glA='gLL --graph --all'

alias glt='gLT --graph'
alias glT='gLT --graph --all'

alias gls='gLN --topo-order --graph --compact-summary'
alias glS='gLN --topo-order --graph --name-status'
alias gld='gLN --topo-order --patch-with-stat'

# --raw, --numstat, --shortstat, --dirstat, --summary, --name-only, --name-status, --check

alias glb='git show-branch'

# WARN:NEED:(git pull --rebase): https://redfin.engineering/visualize-merge-history-with-git-log-graph-first-parent-and-no-merges-c6a9b5ff109c
#   <= otherwise first-parent of merge on "git pull" is reversed and history is wrong
alias gll='glg -m -M --first-parent'
alias gli='gll "$(git rev-list --merges --max-count=1 HEAD)~..HEAD"'
alias glc='glg -m -M --no-merges'
alias glm='glg -m -M --merges'
alias glf='glg -p HEAD..origin'  # with fetched

## MAYBE:BET: invert "glg" and "glo" i.e. hide "orphans" by default
# only current tree (exlude orphan branches)
alias glo='glg -- $(git branch --contains $(git rev-list HEAD | tail -1))'
# only orphan commits
alias glO='glg $(git reflog --format=format:%h)'


## Statistics on all authors / committers in the repo
# NOTE: add '... -- dir/file' for blaming
alias glan='git --no-pager shortlog --summary --numbered --email --all'
alias glcn='glan --committer'

# REF: https://stackoverflow.com/questions/46750027/is-there-a-git-log-summary-that-includes-merge-only-and-non-merge-commits
glB(){ git log -m --first-parent "$(git merge-base "$1" HEAD)~..HEAD" "${@:2}"; }
glBR(){ glB "$(git branch --list --remote --sort '-refname' --format '%(refname:short)' -- 'origin/release/R??' | head -1)" "$@"; }
alias gdR='glBR --patch'
alias gdR.='gdR -- .'

# alias gll='git lmsg'
gln(){ git ldump -n ${1:-10}; } #or -1 for inf

alias ggs='glg --source --all -S'   # search <text> in all commits content
alias ggx='git rev-list --all | xargs git grep'
alias ggS='git log -S'
alias ggG='git log -G'
# BET:TRY:(zsh>=4.3.7): anonymous functions
#   https://vincent.bernat.ch/en/blog/2011-zsh-zshrc
# USAGE: (){ print -l $@; } a b c
ggg(){ git --no-pager log --pretty=format:'%H' -G "$1" \
| while IFS= read -r rev; do echo && git --no-pager lstd --graph -n1 "$rev" && echo
  git --no-pager grep --color -I -n -e "$@" "$rev" | cut -d: -f2-
  # --break --heading
done; }
ggh(){ git --no-pager log --pretty=format:'%H' -G "$1" \
| while IFS= read -r rev; do
  git --no-pager grep --color -I -h -e "$@" "$rev" | awk '{$1=$1}1'
done; }

# git grep -l --all-match -e <regexp1> # To search files with line
# git log -G Foo --since=2009.1.1 --until=2010.1.1 -- path_containing_change # To search commits changing line

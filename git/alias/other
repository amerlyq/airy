# vim:ft=sh
# Most of aliases contained at
#   ~/.cache/zsh/.zprezto/modules/git/alias.zsh
# NOTE: similar to prezto: create funcs with full names, and then alias them

# Show file content from old revision
# git show 1b17fd56:./async

alias gc1='git clone --depth=1 --single-branch'
[[ -z ${ZSH_NAME-} ]] || _alias_ -b 'noglob ' gc1

alias gc1b='gc1 --branch'  # USE: $ gc1b v3.14 for single tag
gcI(){ [[ -d $1 ]] && return
  git init "$1" && REPO="$1" r.git-my-repo "${2:--m}" &&
    git -C "$1" commit --allow-empty -m "Initial empty commit" &&
    git -C "$1" tag -a -m 'Initial repo root tag' ROOT
}

## --- Git ---
alias gw.='git reset --soft HEAD~'
alias gir1='gir HEAD~'
alias g\?='git help'
# Re-defined
alias gca='ga && gcm'
# SEE: http://gitolite.com/git-pull--rebase
# http://stackoverflow.com/questions/6284887/whats-the-difference-between-git-fetch-then-git-rebase-and-git-pull-reb
# It's like: git rebase --onto @{u} $(git merge-base HEAD @{u}@{1}) OK, that syntax ("@{u}@{1}")
alias gl='git pull --rebase --verbose'
alias glu='gss && gl && gsp'
alias gbl='git branch -vv'
alias gbL='git branch -va'
alias gbu='gbl --no-merged'
alias gbU='gbL --no-merged'
alias gbum='gbu master'
alias gbUm='gbU master'

alias gpD='git push origin --no-verify --delete'
alias gpCD='gpD $(git-branch-current 2>/dev/null)'

# Additional
alias gs-='git for-each-ref --format="%(refname:short) %(push:track) --> %(upstream:short)" refs/heads'
alias ga='git add --all'
alias ga.='ga .'
alias giU='giu --patch'
alias gcff='git commit --fixup'
gcfd(){ local d=$(date -Rd "$1"); GIT_COMMITTER_DATE="$d" git commit --amend --date="$d" --reuse-message HEAD; }
alias gcss='gcs --stat'
alias gcsd='gcs --diff-filter=d --pretty=short --show-signature'
alias gcst='git --no-pager log --pretty=tformat:%ad%n%cd HEAD~..HEAD'
alias gcom='gco master'
alias gc-='gco -'
alias gc_='gco tmp'

alias gCd='git diff $(gCl)'
alias grm='git rebase master'
alias gro='git rebase --onto'  # gro master HEAD~1  #: <dst> <point>
alias grM='git rebase --preserve-merges'
alias grim='gri --preserve-merges'  # BUG: with -i can be weird!
alias gria='gri --autostash --autosquash'
gmo(){ git merge origin/"$1" "${@:2}"; }

alias gf='git fetch --verbose --progress --prune --tags'
alias gfa='gf aura'
alias gfo='gf origin'
alias gfA='gf --all'
alias gwRc='gwR origin/"$(git-branch-current 2> /dev/null)"'
alias gSF='gSf --recursive'
alias gSFc='gSF git clean -ndx'
alias gSFC='gSF git clean -fdx'
alias gSIf='gSI --force'

alias gmf='gm --ff-only'
alias gmc='gm --continue'
alias gms='gm --squash'
alias gpC='gpc --no-verify'

# BUG: recursion?
# gri(){ [[ "$1" =~ [0-9]+ ]] && git rebase -i HEAD~$* || git rebase -i $@; }
# compdef grI=git-rebase
# alias gcv='git commit --no-verify'

# New
alias gtn='git name-rev --name-only'  # Shows related to release tag name
alias gtt='git tag --sort=-creatordate --format="%(HEAD)%(creatordate:format-local:%Y-%m-%d %H:%M:%S)%09%(refname:strip=2)%09%(contents:subject)"'
# alias gtt='git tag'

alias gWa='git worktree add'  # <path> [<commit-ish>]
alias gWb='git worktree add -b tmp "&tmp" master'
alias gWs='git worktree add --no-checkout --detach'  # i.e. for sparse checkout READ git-read-tree
alias gWl='git worktree list'
alias gWL='git worktree list --porcelain'
alias gWm='git worktree move'  # FAIL: for submodules
alias gWr='git worktree repair'
alias gWx='git worktree remove'

# NOTE:
#   gwc / gwC | clean | --dry-run / --force
#   gfa && gwRF  | do on each client after 'push -f'
#   giA -- Partial commit: select several hunks from files 'y' and diskard others 'd'.
#        USE: 'git add -N <file>' before if untracked
#   gp[aA] -- push all/+force ATTENTION: all deleted on server branches will recreate from user

# Utils
alias gk='gitk --all --max-count=200 --branches --remotes --tags &'
alias gv='v -R +Gitv +tabonly -- " "'
alias gvs='v +Gstatus +only'

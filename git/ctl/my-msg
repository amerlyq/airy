#!/usr/bin/env perl
#
# SPDX-FileCopyrightText: 2019 Amerlyq <amerlyq@gmail.com> and contributors
#
# SPDX-License-Identifier: MIT
#
#%SUMMARY: generate git index description to use as auto-commit message
#%FORMAT(>): e.g. [mods,.] 6 files (A3 M3)  +1679/-1  20191123_230146
#%IDEA: rapid development first, clean-up PR history later
#%USAGE: $ cd /path/to/repo && ./$0 [--split] [--index] [--commit]
#%   OR: $ ./$0 | git commit -F-
#
# REF
#   IDEA: https://github.com/presslabs/gitfs
#   ALT: https://en.wikipedia.org/wiki/Versioning_file_system
#   USE:(hook): https://gist.github.com/bartoszmajsak/1396344
#     https://medium.com/@nicklee1/prepending-your-git-commit-messages-with-user-story-ids-3bfea00eab5a
#
#   ALT: other auto-committing software
#     our beautiful fake histories
#       https://joeyh.name/blog/entry/our_beautiful_fake_histories/
#     propellor.git - property-based host configuration management in haskell
#       https://git.joeyh.name/index.cgi/propellor.git/
#
# MAYBE: git config commit.template
#   IDEA: always populate message by template by "[@tops...] <usermsg>"
#
# IDEA: derive msg relative to PWD
#   i.e. when comitting from inside @/devq/pj/wm[/src] -> generate "[wm] msg" .instead-of. "[pj] msg"
#   ALT: use current PWD as prefix when using "gc@/gcd" command
#
# IDEA: suggest one of possible messages based on heuristic analysis of diff content
#   e.g. if it contains my evrywhere-notches or some keywords, etc.
#   => suggest as <Tab> completion or open git commit message editor (vis) with list of commented lines to edit
#
# IDEA: if you only added https:// links (with or w/o xtrefs) -- use "add 5 refs" message instead of diff +/- lines
#
# NICE: when committing group of files -- embed mtime into extended commit message in .toml or keyval FMT
#   i.e. use table FMT(mtime path)
#   ALT: place table into git annotations BUT they can be removed ...
#   TRY: keyval FMT:(~RFC822) to parse/add values to commit messages
#     https://git-scm.com/docs/git-interpret-trailers ⌇⡠⠈⡞⣋
#
# [_] BET: git command to auto-split existing changes <⡆⢶|⡊⠶>
#   into multiple commits
#   and auto-name in similar way to gitfs
#
# IDEA: commit message must help with easier decisions about rewriting history
# TODO: tops=$(git add -- .; git diff-index --name-only --cached HEAD | sed 's|/.*||' | sort -u; git reset)
#   $ for d in "${(@f)tops}"; do git add "$d"; git stash push --keep-index --include-untracked; r.git-my-msg --index --commit; git stash pop; done
#   * split into multiple commits current dirty repo (for easier history rewrite)
#     <= per each flat dir | per each action ($mod) inside each dir
#   * ... current index
#   * generate full msg from arbitrary diff / commit range
#
# DEV:IDEA: auto-expanded ZSH alias => (gcm '[git] add |... +3') with cursor in the middle of the message
#   ALT: open lightweight vis(1) editor with prepared message and positioned cursor
#   $ r.git-my-msg --index | git commit --template=/dev/stdin
#
# THINK:NICE:ARCH: use *feature-project-task* hierarchy with transparent mapping on architecture
#   !! then my auto-msg "[feature] chg project/task" will be directly reflecting what you did like any proper commit msg !!
#   ALSO: flat hierarchy can reuse both cmpt and type :: /python/books/aaa.pdf => "[python] books+ aaa.pdf"
#
# IDEA:TRY: suggest commit message from the first line of largest hunk in diff
#   => NICE: single tasks added to ./TODO.nou will directly translate into separate commits
#   THINK: on !gc open editor with list of suggested commit messages as commented lines
#     - by feature-type DFL uncommented
#     - by basename only
#     - by diff first line
#     - by content function name
#     - by diff first found added xtref
#     - ...
#     - empty featurename
#     NEED: always open in !vis (fast startup time)
#     USAGE: uncomment the most suitable line or write your own
#
# FIXME:CHG: don't print "2 groups" when enumerating "only 2 files"
#   e.g. [%] * chg syntax,autoload: keyval.vim, nou.vim  +11/-8
#
use warnings FATAL => 'all';
use autodie;
use strict;
use v5.14;  # for s///r
use List::Util qw(min uniq sum0);  # REF: https://perldoc.perl.org/List/Util.html
use POSIX qw(:sys_wait_h strftime);
use Cwd qw(cwd);
use File::Spec::Functions qw( rel2abs canonpath );
use Getopt::Long qw(GetOptions :config bundling permute
no_auto_abbrev no_getopt_compat no_ignore_case no_pass_through);


# VIZ:BAD:(non-orthogonal): many other combinations don't have any sense
#   * generate full msg from active index OR !current! workdir (dirty repo)
#   * append everything in current workdir to index and autocommit (with optional message)
#
my %opts = (
    index => 1,
    level => 0,
    diff => 1,
    directory => cwd,
);
GetOptions(\%opts   #%OPTIONS:
# , 'add|a!'          #% a = add      | add all files in current workdir (implies: -i) WARN: appends to index
, 'index|i!'        #% i = index    | describe only current git index
, 'diff|d!'         #% d = diff     | flip flag to append diff tail DFL=append
    => sub { $opts{diff} = !$opts{diff} }  # BAD: non-intuitive behavior
, 'greatest|g!'     #% g = greatest | use single folder with greatest number of changes DFL='[%]'
, 'level|l=i'       #% l:= level    | derive names from nesting level DFL=0
, 'prefix|p=s'      #% p:= prefix   | override component prefix DFL=<auto:{top-dir|.|%}>
, 'commit|c!'       #% c = commit   | immediately commit description (implies: -i)
, 'modtime|t!'      #% t = modtime  | use as author's date the most recent changed index file modtime (usewith: -c)
# , 'message|m=s'     #% m:= message  | additional hint message to insert into description
# , 'relative|r!'     #% r = relative | describe only current folder (TBD)
, 'workdir|w!'      #% w = workdir  | describe only current git index (disables: -i)
    => sub { $opts{index} = 0 }
, 'directory|C=s'   #% C = directory  | git repo directory
, 'help|h|?'        #% h = help
    => sub { print &help; exit }
) or die $/,&help;  #%


########################################
# ALT: use ARGV as list of files/dirs to add to current commit (if specified)
#   NOT:BET: use explicit "git add" + "my-msg --index" -- the same effort anyway
# BET: join and use ARGV as commit message hint for future rebasing
$opts{message} = join(" ", @ARGV);
$opts{directory} = canonpath(rel2abs($opts{directory}));
my @git = ('git', '-C', $opts{directory}, '--no-pager');

sub help { open STDIN,'<',$0; grep { $_ } map { $1.$/ if /^(?:.*\s)?#%(.*)/ } <STDIN> }
sub git {
    my $rc = system(@git, @_);
    exit WEXITSTATUS($?) if $rc and WIFEXITED($?) and WEXITSTATUS($?);
}


########################################
### Add
if ($opts{commit}) {
    git('add', '--all', '--', '.') if not $opts{index};
    $opts{index} = 1;
}


########################################
### Diff
my @cmd;
if ($opts{index}) {
    push @cmd, 'diff-index', '--cached';
    push @cmd, '--find-renames', '--find-copies', '--minimal', '--raw', '--numstat', '-z';
    push @cmd, 'HEAD';
} else {
    push @cmd, 'diff-files';
    push @cmd, '--find-renames', '--find-copies', '--minimal', '--raw', '--numstat', '-z';
}

my $usediff = 1;
# my $usediff = 1 if -t STDIN;

my $pid;
if ($usediff) {
    $pid = open(STDIN, "-|");
    exec(@git, @cmd, '--', ) or die if $pid == 0;
}



## BAD:SEE: my own way to get branch name from this folder
# branch=$(git symbolic-ref --short HEAD)
# branch=$(git rev-parse --abbrev-ref HEAD)
# push=$(git for-each-ref --format="%(refname:short) %(push:track)" refs/heads)
# git --no-pager show --no-patch --pretty=format:"%cr%x09%ae%x09%h%x09%D%n" --shortstat HEAD
# m=$(git merge-base --fork-point "$b" "$h")
# git branch -r --format='%(committerdate:unix)%09%(objectname)%09%(authoremail)' --sort=-committerdate


# NOTE:(--patch-with-raw): -- can be used to add changed-line-context to commit message
# NOTE: don't support complex tree designators ALT: use $ gitdiff() --cached --raw --numstat
# gitdiff(){ git diff-index -z --find-renames --find-copies --minimal --cached --raw --numstat "$@"; }
# gitdiff(){ git diff --no-color --find-renames --find-copies --irreversible-delete --textconv "$@"; }
# gitdiff --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]] --name-only "$b"..."$h" --
# gitdiff --cached --dirstat=cumulative / --name-status / --name-only
# MAYBE: --cc
# MAYBE: --submodule=short OR --ignore-submodules=none/untracked/dirty/all
# MAYBE: --ignore-space-change --ignore-all-space  --ignore-blank-lines
#   calculate diff size difference w/ and w/o blanks to show "blanks changed" number


# FORMAT(<): --numstat
# 1       2       README NUL
# 3       1       NUL arch/i386/Makefile NUL arch/x86/Makefile NUL
sub parse_raw_numstat {
    local $/ = "\0";
    my %diff;
    while (<STDIN>) {
        chomp;
        if (/^:\d{6}\s/) {
            # FMT: :100644 100644 <oldhash> <newhash> M
            my ($sm,$dm,$sh,$dh,$mod) = split /\s/, substr($_,1), 5;
            my $src = <STDIN>;
            chomp $src;
            my $dst = <STDIN> if $mod =~ /^[RC]/;
            chomp $dst if $dst;
            $diff{$src} = { mod => substr($mod,0,1), src => $src, dst => $dst };
        } else {
            my ($add,$del,$src) = split /\t/, $_, 3;

            # NOTE:FIXED: renamed binary files has multiline pattern = "- -\0src\0dst\0"
            if (not $src) {
                $src = <STDIN>;
                chomp $src;
                my $dst = <STDIN>;
                chomp $dst;
            }

            # WARN: for newly added binary files numstat "add/del" = "-/-"
            #   TEMP:HACK: treat whole file as single added/deleted line -- for @tops ordering on L229
            if ($add eq '-' or $del eq '-') {
                my $mod = $diff{$src}{mod};
                print "ERR: $_\n" if not $mod;
                $add = ($mod =~ /^[AM]/ ? 1 : 0) if $add eq '-';
                $del = ($mod =~ /^[DM]/ ? 1 : 0) if $del eq '-';
            }

            @{ $diff{$src} }{qw(add del)} = ($add, $del);
        }

        ## NOT(-z):FAIL:(rename): pretty --numstat
        # if (/^:/) {
        #     my ($inf,$src,$dst) = split /\t/, substr($_,1), 3;
        #     my ($sm,$dm,$sh,$dh,$mod) = split /\s/, $inf, 5;
        #     $diff{$src} = { mod => $mod, src => $src, dst => $dst };
        # } else {
        #     my ($add,$del,$obj) = split /\t/, $_, 3;
        #     my ($src,$dst) = split /\s=>\s/, $obj, 2;
        #     @{ $diff{$src} }{qw(add del)} = ($add, $del);
        # }
    }
    return %diff;
}

my %diff = parse_raw_numstat();


if ($usediff) {
    # ATT: die here if app exited with error
    waitpid $pid, 0;
    exit WEXITSTATUS($?) if WIFEXITED($?) and WEXITSTATUS($?);
}

if (not %diff) {
    print "Err: empty diff, nothing to describe", $/;
    exit 1;
}


########################################
### Stats
# MAYBE: use both src/dst -- because you affect both on rename
my %files;
$files{$_->{src}}++ for values %diff;
my @files = sort { $files{$b} <=> $files{$a} } keys %files;
my @binaries = grep { $_->{add} =~ /-/ or $_->{del} =~ /-/ } values %diff;

my %stat;
$stat{add} = sum0 (map { $_->{add} =~ /-/ ? 0 : $_->{add} } values %diff);
$stat{del} = sum0 (map { $_->{del} =~ /-/ ? 0 : $_->{del} } values %diff);
# NEED: git diff --patch | grep /^@@/
# $stat{hunk} += 1;


# per-topdir
# FIX: opts{level}
my %tops;
foreach my $src (keys %diff) {
    my $i = index($src, "/");
    # IDEA: use major :/file name as feature e.g. for ./ctl :: [.] => [ctl] dev smth
    my $top = $i == -1 ? "." : substr($src, 0, $i);
    # FIXME: if contains spaces and longer than 20 chars -- crop to "[Aaljsdljljsdf…] ..."
    ## BAD: counts files, not diff
    # ++$tops{$top};
    ## IDEA: sum diff with number of files and treat deletion as much less important
    $tops{$top} += $diff{$src}{add} + (0.4 * $diff{$src}{del}) + 1;
    $diff{$src}{top} = $top;
}
my @tops = sort { $tops{$b} <=> $tops{$a} or $a cmp $b } keys %tops;

# print $_,"=",$tops{$_},$/ for (@tops);  # DEBUG=


# per-basedir
my %dirs;
foreach my $src (keys %diff) {
    my $i = rindex($src, "/");
    my $dir = $i == -1 ? "." : substr($src, 0, $i);
    ++$dirs{$dir};
    $diff{$src}{dir} = $dir;
}
my @dirs = sort { $dirs{$b} <=> $dirs{$a} } keys %dirs;


# per-type
my @allmods = qw(M R A D C T U X B);
my %allmods = ( A => "add", C => "copy", D => "del", M => "chg", R => "move", T => "retype" );
foreach my $src (keys %diff) {
    my $h = $diff{$src};
    ++$stat{$h->{mod}};
}
## DEBUG
# foreach my $k (keys %stat) {
#     print $k,"=",$stat{$k},"\n";
# }
my @mods = grep { $stat{$_} } @allmods;


# TODO:ALG: heuristics
#   * top-level dirs in flat hierarchy === app architecture
#       [mods,.] 6 files (A3 M3)  +1679/-1  20191123_230146
#   * subdirs -- if low count
#   * list individual files in single dir == module details
#       [.] chg {README.md}  +7  20191124_002419
#   * statistcis on individual files == too much changes at once
#   * hunks in files === change details
#   * individual lines in file === edit details

# THINK: prepend by currently working story/ticket e.g. "ARCH-127 [mymod,bbd] ..."
#   ALT: use short feature-branch name -- because you must store that ticket name somewhere anyway

# FIXME: instead of semi-random order, sort @tops by number of changes
#   => then first two features [a,b,(+...)] will have the largest diff
# ALT:BET: if @tops > 1 feature :: use '[#]' or '[%]' marker -- to detect easily inside git history
#     => and place short list of @tops<4 into message :: '[%] chg git,find,android,gdb,(+3) 5 files'
#     BET: use '%' which means "intended group" (like strace(1)) -- in contrast to '#' meaning "unseized junkyard"
#   BUT: what about '[.]' or '[:]' or '[%]' for pj root files -- first one is relative to pwd, and last one -- like nou.vim
#   MAYBE: redefine nou.vim defaults to make ./rel/path always counted from file itself, and %/rel/path from $PWD
#     BAD: it conflicts with expand('%') in vim, and '[.]' will mean current file and not project root anyway
#   ALSO:NEED: detect primary feature even for @tops > 1
#     == often I add new feature [client] and fix integration in [ctl] to enable it but it's still part of [client] feature
# FORMAT ::= branch? [tops,..] files dirs?  +X/-Y  YYYYMMdd_hhmmss
#  files ::= {chg|add|del} {<files>,..} | {chg|add|del} <N> "files" | <N> "files" (M2 A3)
sub mkpfx {
    die if @_ < 1;
    return $opts{prefix} if defined $opts{prefix};
    return "%" if @_ > 1 and not $opts{greatest};
    return $_[0];
    # OPTION:(old): composite
    # $pfx .= "[". $tops[0];
    # $pfx .= ",". $tops[1] if @tops > 1;
    # $pfx .= ",(+". (@tops - 2) .")" if @tops > 2;
    # $pfx .= "]";
}

sub mkmods {
    # DEV: if folder didn't exist before -- use word :: "new", "create", "+"
    die if @mods < 1;
    return $allmods{$mods[0]} if @mods == 1;
    return "(". join(" ", map { $_ . $stat{$_} } @mods) .")";
}

sub mkcmpts {
    my ($max, @pfx) = @_;
    my $end = min($max - 1, $#tops);
    push @pfx, @tops[0 .. $end] if $max > 0;
    push @pfx, "(+". (@tops - $max) .")" if @tops > $max;
    return "" if @pfx < 2 or $opts{greatest};
    return join(",", @pfx) .": ";
}

# BAD: prints "[design] add 10 files 10 binary"
#   FIXME: subtract binaries from total files count
#   MAYBE: rename to e.g.
#     "[design] add 2 text 8 binary files"
#     "[design] add 2 files and 8 binary"
#     "[design] add 10 files (8 binary)"
sub mkstats { my @fls;
    push @fls, @files ." files" if @files;
    push @fls, @binaries ." binary" if @binaries;
    return join(" ", @fls);
}

sub mkpaths { my @subpaths = @files;
    s|^/?.+/|| for @subpaths;
    # OR: "," | ", " | " and "
    return join(", ", @subpaths);
}

sub mkbody {
    ## DISABLED:(@files > 2): with long paths result is a mess
    # * 2021-04-16 [%] * chg src,.: some.nou, docs.nou  +25/-22
    return mkstats() if @files > 1;
    return mkpaths();
}

# MAYBE: print only number of changed lines -- remove added/deleted whole files from count
#   i.e. $ git log --irreversible-delete
sub mkchgs { my @chgs;
    push @chgs, "+". $stat{add} if $stat{add};
    push @chgs, "-". $stat{del} if $stat{del};
    return "" if not @chgs;
    return "  ". join("/", @chgs);
}

## DISABLED: obstructs view more than helps -- better use proper "glG" alias with time
# BUT:OPT: can be useful for e.g. "aura commit-index" when I totally change author/committer dates
# NEED: timezone OR directly use timestamp BUT still need timezone
# sub mkts { return "  ". strftime("%Y%m%d_%H%M%S", localtime) }

# IDEA:(fine-tuning): if you add file to some "cmpt-type" subfolder -- use trailing "+"
#   e.g. "add file ./cmpt/tmpl/new.c" -> "[cmpt] tmpl+ new.c"
# IDEA: if this added file contains header with "%SUMMARY:" -- use it as message
#   <= because ctx-based msgs are much better than simple file name duplicated in git log
# BET? use middle-part "mod/[path/to]/file.txt" :: [mod] chg file.txt in {path/to/}
#   $text .= " in {". join(",", @dirs) ."}" if @dirs < 2;
sub mkmsg {
    # DEV:(opt): orthogonal options to enable each part of auto-message in addition to opts{message}
    return $opts{message} if $opts{message};
    # ALT: "[%]. chg ..." | "[%]* chg ..." | "[%] * chg ..." | "[%] *chg ..."
    # FIXME! always prepend "*" in the same place -- to be able to filter-out
    #   auto messages from git history and focus only on human-created ones
    ## DISABLED:(mkcmpts(1)): with long paths result is a mess
    # * 2021-04-16 [%] * chg src,.: some.nou, docs.nou  +25/-22
    my $msg = "* ". mkmods() ." ". mkcmpts(1) . mkbody();
    $msg .= mkchgs() if $opts{diff};
    return $msg;
}

my $text = "[". mkpfx(@tops) ."] ". mkmsg();


if ($opts{commit}) {
    # THINK:USE: --fixup=<commit> for "rebase --autosquash"
    my @commitargs = ('--verbose', '--message='.$text);
    if ($opts{modtime}) {

        # SRC: https://stackoverflow.com/questions/54487856/use-perls-qx-operator-with-a-list-of-arguments
        use IPC::Run qw( run );
        my @cmd = (@git, 'rev-parse', '--show-toplevel');
        run(\@cmd, \undef, \my $gittopdir);
        chomp $gittopdir;

        my $authordate = 0;
        foreach my $x (values %diff) {
            # BAD:(skipped): can't track modtime of deleted files
            next if $x->{mod} =~ /^[D]/;
            my $f = join('/', $gittopdir, (defined $x->{dst} ? $x->{dst} : $x->{src}));
            # print "= ",$f,$/;  # DEBUG=
            my $uts = (lstat($f))[9];
            print "ERR: $f$/" if not $uts;
            $authordate = $uts if $uts > $authordate;
        }
        push(@commitargs, '--date='.$authordate) if $authordate;
    }
    git('commit', @commitargs);
    # git('show', '--stat');
} else {
    print $text, $/;
}

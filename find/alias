# vim:ft=sh

## OBSOLETE: use |communty/fd|
## ALT: use "ag -l <regex>"
# f()  { find . -type f -iname "*$@*"; }
# fd() { find . -type d -iname "*$@*"; }
# ff() { find . -type f -regex $@; }
# fl() { locate ${1?<what?>} | sed "/\(\/[^/]\+\)\{${2:-5}\}/d" | sort -u; }
# alias ff='find ./ | grep -i '

# HACK: create tmp symlinks to list of found results
#%ONELINE: $ ff now -aX ln -svt /tmp/now -- {}
ffn(){ local d
  d=${TMPDIR}/ffn/$(date +%Y%m%d_%H%M%S)⁄${*//\//⁄}
  mkdir -p "$d"
  # MAYBE: add back-ref to immediate PWD if search is successful
  # ln -sT -- "$PWD" "$d/PWD"
  # OR:BET?USE: cmdline only in PWD symlink instead of dirname
  # ln -sT -- "$PWD" "${TMPDIR}/ffn/$(date +%Y%m%d_%H%M%S)⁄/!${*//\//⁄}"
  command fd -E .git -E _build\* -Htf "$*" -x \
    sh -c 'command ln -svT -- "$PWD/$1" "$0/${1//\//⁄}"' "$d" {}
}


alias ds='find . -name .git -prune -o -type f -printf "%7s %P\n" | sort -k1n,1 | tail'
alias dS='find -L . -name .git -prune -o -type f -printf "%7s %P\n" | sort -k1n,1 | tail'

# ALSO: @/airy/elf/ctl/categorize
alias fh="find . -name .git -prune -o -print | grep -Po '[.]\\K(?:[^./]{3}[.])?[^./]{1,16}$' |LC_ALL=C sort|uniq -c|sort -k1n,1|tail"

alias fUf='git ls-files --others'
alias fuf='git ls-files --others --exclude-standard'
alias fU='git ls-files --others --directory'
alias fu='git ls-files --others --directory --exclude-standard'
alias fu0='fu -z'

alias ful0="fuf -z | xargs -r0 zsh -c 'for f; do [[ ! -h \$f ]] || print -rNC1 -- \$f; done' ''"
alias fuL0="fuf -z | xargs -r0 zsh -c 'for f; do [[ -h \$f ]] || print -rNC1 -- \$f; done' ''"
alias fuE0="fuL0 | xargs -r0 zsh -c 'for f; do [[ \$(file --brief --mime-type -- \$f) == */x-empty ]] || print -rNC1 -- \$f; done' ''"
alias fuA0="ful0 | xargs -r0 zsh -c 'for f (\$@) print -rNC1 -- \${\${(M)\${f:A}:#*/.git/annex/objects*}:+\$f}' ''"
alias ful='ful0 | tr \\0 \\n'
alias fuL='fuL0 | tr \\0 \\n'
alias fuA='fuA0 | tr \\0 \\n'

alias fif0='git diff-index -z --cached --name-only --relative HEAD --'
alias fil="git diff-index --cached --relative HEAD -- | grep -E '^:[0-9]{6}\\s120000\\s' | cut -f2-"

# BET:MOVE: rename to "gf*" aliases
alias fwR='git ls-tree -r HEAD'
alias fwR0='fwR -z'
alias fw='fwR --name-only'
alias fw0='fwR0 --name-only'
alias fwl0='fwR0 | grep  -z "^120000" | cut -zf2-'
alias fwL0='fwR0 | grep -vz "^120000" | cut -zf2-'
alias fwa0="fwl0 | xargs -r0 zsh -c 'for f (\$@) print -rNC1 -- \${\${(M)\${f:A}:#*/.git/annex/objects*}:+\$f}' ''"
alias fwA0="fwl0 | xargs -r0 zsh -c 'for f (\$@) print -rNC1 -- \${\${\${f:A}:#*/.git/annex/objects*}:+\$f}' ''"
alias fwl='fwl0 | tr \\0 \\n'
alias fwL='fwL0 | tr \\0 \\n'
alias fwa='fwa0 | tr \\0 \\n'
alias fwA='fwA0 | tr \\0 \\n'

alias fa='command fd -E .snapshots -E .git -E "_build*" -E "="'
alias fa.='fa -g'
alias fa0='fa -0'
alias fa1='fa -d1'
alias fa2='fa -d2'

alias fA='fa -I --show-errors'
alias fA.='fA -g'
alias fA0='fA -0'
alias fA1='fA -d1'
alias fA2='fA -d2'

alias fe='fa -H -e'
alias fe0='fa -H0 -e'

alias fE='fa -Hte'
alias fX='fa -Htx'

alias ff='fa -Htf'
alias 'ff*'='ff -g'
alias ff0='ff -0'
alias ff1='ff -d1'
alias ff2='ff -d2'
alias ff.='ff -L'

alias fF='fa -tf'
alias fF.='fF -g'
alias fF0='fF -0'
alias fF1='fF -d1'
alias fF2='fF -d2'

alias fd='fa -Htd'
alias fd.='fd -g'
alias fd0='fd -0'
alias fd1='fd -d1'
alias fd2='fd -d2'

alias fD='fa -td'
alias fD.='fD -g'
alias fD0='fD -0'
alias fD1='fD -d1'
alias fD2='fD -d2'

alias fl='fa -Htl'
alias fl.='fl -g'
alias fl0='fl -0'
alias fl1='fl -d1'
alias fl2='fl -d2'

alias fL='fa -tl'
alias fL.='fL -g'
alias fL0='fL -0'
alias fL1='fL -d1'
alias fL2='fL -d2'


alias fs='fa -H -tf -tl'
alias fS='fa -tf -tl'

alias 'f*'='fs -g'
alias f0='fs -0'
alias f1='fs -d1'
alias f2='fs -d2'

alias f.='fs -L'
alias 'f.*'='f. -g'
alias f.0='f. -0'
alias f.1='f. -d1'
alias f.2='f. -d2'
alias f.m='fs --changed-within'

# NOTE: can't be used in aliases composition
alias f='_f(){ command fd -E .snapshots -E .git -E "_build*" -E "=" -H -tf -tl -- "$*"; }; _f'
[[ -z ${ZSH_NAME-} ]] || _alias_ -b 'noglob ' f

alias fnp='find \( -name .git -o -name "_build*" \) -prune -o \( -type f -o -type l \)'
alias fn='fnp -printf "%f\\n"'
alias fnd='fn |LC_ALL=C sort|uniq -cd|sort -k1n,1'
# find duplicate annex symlinks i.e. "the same file with different name/path"
# ALT: for l ((^.git/)#*(@)) print -lraC2 -- ${${l:A:t}##*-} $l | awk '{++n[$1];a[$1]+="\n"substr($0,length($1)+1)} END{for(h in n){if(n[h]>1)print"["h"]"a[h]}}'
alias fnl="find -type l -exec readlink -v -- {} + | grep -o '[0-9a-f]\\+\$' |LC_ALL=C sort|uniq -cd|sort -k1n,1"
alias fna="find -type l -print -exec readlink -v -- {} \\; | awk -F- '{if(NR%2){n=\$0}else{print \$NF,n}}'"
# NOTE: same basename but different SHA (readlink basename) :: print fullpaths
alias fnD="find -type l -print -exec readlink -v -- {} \; | awk -F/ 'NR%2{p=\$0;b=\$NF;++N[b];next} {h=\$NF;if((b in f)&&(b!=H[h])){++d[b]};H[h]=b;f[b]=f[b]\"\\n\"p} END{for(b in d)print f[b]}'"
# NOTE: same SHA but different dir / basename (i.e. intentional duplicates for tag-dirs)
alias fnU="find -type l -print -exec readlink -v -- {} \; | awk -F/ 'NR%2{p=\$0;b=\$NF;++N[b];next} {h=\$NF;if((h in H)&&(b!=H[h])){++d[h]};H[h]=b;f[h]=f[h]\"\\n\"p} END{for(h in d)print f[h]}'"
# NOTE: similar normalized names (ignoring case and punctuation) NEED: also ignore [www.site.com] prefix and WN/vol-chapter-range suffix  i.e. check if "names are contained in one another" BAD: rm extension
alias fnS="for a in **/*(@); do b=\${(L)a:t}; b=\${\${\${b:r}#\[www.*.com\]}%%chapter*}.\${b:e}; print -l -- \$a \${b//[[:punct:][:space:]]/}; done | awk -F/ 'NR%2{p=\$0;b=\$NF;++N[b];next} {h=\$NF;if((h in H)&&(b!=H[h])){++d[h]};H[h]=b;f[h]=f[h]\"\\n\"p} END{for(h in d)print f[h]}'"
# e.g. find disk bad blocks
# fnD X stat -Lc'%s %n' | awk '{if(!(($1-s)%512))print"";s=$1}1'

## IDEA: compare if unique-basename list ($ fnd && f Y2) is also unique in some larger repo
#  << useful to directly match files metadata by their basenames
# $ f | awk -F/ 'FNR==NR{a[$NF]=$0;next} {if($NF in a){print$NF}}' .Y2 - SD

## TODO: use !skim narrowed to list of found files
# alias 'f/'='f -x'
# alias 'f/.'='f/ -g'
# alias 'f/0'='f/ -0'
# alias 'f/1'='f/ -d1'
# alias 'f/2'='f/ -d2'

## TODO: generate all aliases from matrix
# _chars=(type upper)
# declare -A type=([a]='' [f]=-tf [d]=-td [l]=-tl ['']='-td -tl')
# for c in "${_chars[@]}"; do
#   for b in ${!c[@]}; do
#     ...
#   done
# done
# unset _chars c

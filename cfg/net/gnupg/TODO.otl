export GPG_TTY=$(tty)
: Need for mutt if you don't use gpg-agent
export GPG_AGENT_INFO=""
: Don't use it for >v2.1, instead socket ~/.gnupg/S.gpg-agent
: Also you don't need to launch agent, as it will be used on demand from socket

: Keychain: ssh-agent autostart
eval $(keychain --eval -Q --quiet id_dsa id_rsa)
: SSH_AUTH_SOCK=$(gpg-connect-agent 'getinfo ssh_socket_name' /bye | grep '^D' | cut -d' ' -f2)
: [ -S "$SSH_AUTH_SOCK" ] && export SSH_AUTH_SOCK

Create and mount RAM disk
	mkdir mytmpdir
	mount -t ramfs -o size=1m ramfs mytmpdir
	...
	umount mytmpdir
	rmdir mytmpdir

SEE:
	http://www.spywarewarrior.com/uiuc/gpg/gpg-com-4.htm
	Hardening
		http://www.incenp.org/notes/2015/using-an-offline-gnupg-master-key.html
	> Mutt
		> https://gist.github.com/bnagy/8914f712f689cc01c267
		: https://gist.github.com/grugq/03167bed45e774551155
		: http://dev.mutt.org/trac/wiki/MuttGuide/UseGPG
	See how spoolfile located on imap:
		https://wiki.xmission.com/Hosted_Email:Mutt
	Sign network of trust public keys (SEE After Party)
		http://www.phillylinux.org/keys/terminal.html

	REF
		http://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/
		2015-10-01 [X] https://wiki.debian.org/Subkeys?action=show&redirect=subkeys
		https://help.ubuntu.com/community/GnuPrivacyGuardHowto
			: SEE recipes
		> https://alexcabal.com/creating-the-perfect-gpg-keypair/
			: article is read, but most of comments remained. Read them.

	SSH similar system for CA (short)
		>>> https://blog.habets.se/2011/07/OpenSSH-certificates

Setup
	Interactively generate 2048b key for 1 year (you can extend it later)
	: so, if you lost it, then expire and users will know it
		gpg --full-gen-key
		: OR gpg --gen-key  # for <v2.1
		< Extend/edit later: gpg --edit-key <..> (SEE: arch-wiki)
	Encrypt data
		echo "GMail: mySecretPassowrd" > ~/.mutt/.pass

		gpg --recipient <id(part)> --encrypt file
		echo "password" | gpg --encrypt -o ~/.acc_pass.gpg

		< For read-only fs (for rw -- only if keyring is not going to change)
		read -s -p "Passwd: " pp && echo "$pp" | gpg \
		  --keyserver-options no-use-temp-files --lock-never --no-verbose
		  -e -a -r martin@example.com
	External config
		set imap_pass = `gpg -d ~/.mutt/.pass.gpg | awk '/^GMail:/ {print $2}'`
		OR: source "gpg -d ~/.mutt/passwords.gpg |"

	ALT:
		echo '$PASSWORD' | gpg --use-agent -e > ~/.passwd/$ACCOUNT.gpg
		set imap_pass = "`gpg --use-agent --quiet --batch -d ~/.passwd/$ACCOUNT.gpg`"

Config
	Reload
		echo RELOADAGENT | gpg-connect-agent
		:OR: systemctl --user reload gpg-agent

	Cache for the whole session until gpg-agent is restarted.
	: If you set up default-cache-ttl value, it will take precedence.
		/usr/lib/gnupg/gpg-preset-passphrase --preset <keygrip>
		: Where <keygrip> is taken from
			gpg -with-keygrip -K

Test
	Check if working
		pgrep gpg-agent
		gpg-connect-agent  #> bye/quit
	Try decrypt
		gpg -dq ./password.gpg

	Systemd:
		link '..' ~/.config/systemd/user/gpg-agent.service
		systemctl --user daemon-reload
		systemctl --user enable gpg-agent
		systemctl --user start gpg-agent

Revocation
: One of subkeys
	Boot LiveCD + Encrypted USB drive + master.asc OR ~/.gnupg
		sudo mount /dev/sdb /mnt
		gpg --import /mnt/amerlyq.gpg-public.asc /mnt/amerlyq.gpg-private.asc
		gpg --edit-key $GPGKEY   # ALT --homedir=/mnt/.gnupg
		USE gpg> list, key 2, revkey, save
		: Send the updated key to the keyservers
		gpg --send-key --keyserver <server> $GPGKEY

NEED master key pair (scenarios)
: Because all this done by adding a new self- or revocation signatures)
	* sign someone else's key or revoke an existing signature,
	* add a new UID or mark an existing UID as primary,
	* create a new subkey,
	* revoke an existing UID or subkey,
	* change the preferences (e.g., with setpref) on a UID,
	* change the expiration date on your master key or any of its subkey, or
	* revoke or generate a revocation certificate for the complete key.

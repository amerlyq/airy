#!/bin/bash -e
# USE: khinsider.com, anime.thehylia.com
set -o pipefail

# TRY: in ncmpcpp emulate 'download current song'
# -t -- MUST be launched from inside browser in tmux (keep tmux opened near browser)
# BUG: need error in r.wgett when fzf chose nothing (like when Esc pressed)
# -> FIXME: don't create folder if no links to dld
# 2016-09-09 [X] FIXME: clear playlist only directly before new urls list is ready
# 2016-09-09 [X] DEV: when populating 'mpc' -- replace in song name '%20 -> <Space>' in comment
# MOVE: functions into cfg/media/mpd/ctl/*

CACHE=/tmp/music
DST=/home/media/_dld/music

mkdir -p "$CACHE"

hasn(){ for o in "$@"; do [[ ! ${OPTS:=l} =~ [$o] ]] || return; done; }
unset OPTS OPTIND
while getopts 'nojldtp' o
do [[ $o != [:?] ]] && OPTS+=$o || exit
done; shift $((OPTIND-1))
(($#)) || exit 2


album(){ sed -rn '/.*<h2>([^<]+)<\/h2>.*/{s//\1/p;q}' "$1"; }
urlst(){ local lnm='Click here to download|Download to Computer'
  if [[ -s ${1}.urls ]]; then cat "${1}.urls"; return; fi
  sed -rn '/.*href="(https?:\/\/[^"]*\.mp3)".*/s//\1/p' "$1" \
  | wget -q -i- -O- \
  | sed -rn '/.*href="(https?:\/\/[^"]+\.mp3)">('"$lnm"').*/s//\1/p' \
  | tee "${1}.urls"
}

# WARN: some songs may be removed by mistake
_filtered(){ sed -r '/[^A-Za-z](Instrumental|Karaoke|off%20vocal|TV%20size)\b/d'; }

tom3u(){ local t f=${1:?}.m3u h=${2:?}
  [[ -s $f ]] && { cat "$f"; return; }
  printf '#EXTM3U\n\n%s\n\n' "$h" > "$f"
  _filtered | while IFS= read -r line; do
    t=$line; t=${t##*/}; t=${t%.*}
    # SEE URL-decoding  # OR t=${t//%20/ }
    #   http://unix.stackexchange.com/questions/159253/decoding-url-encoding-percent-encoding
    printf '#EXTINF:-1, %b\n%s\n\n' "${t//%/\\x}" "$line" >> "$f"
  done
}

# NOTE: delete album header from playlist, if you want to add it again
_mpcl(){ mpc playlist -f '[%file%]'; }
inmpc(){ local f=${1:?} h=${2:?} nm='wget-mp3'
  local pl=~/.config/mpd/playlists/${nm}.m3u
  if ! _mpcl | grep -qxF "$h"; then
    cat | tom3u "$f" "$h"
    ln -sf "$f.m3u" "$pl"
    hasn o || mpc clear
    mpc load "$nm"
    # ALT:(simple) { printf '%s\n' "$h"; cat; } | mpc add
  fi
  mpc play $(( $(_mpcl | grep -nxF "$h" | awk -F: '{print$1;exit}') ))
  hasn j || ~/.bin/xorg.d/make_urgent 'ncmpcpp'
  # ALT:TEMP:HACK:(open/jump to ncmpcpp)
  # hasn j || r.wm M-o_n
  #   BAD: closes already opened instance -- BETTER: make window urgent
}

todld(){ local cmd=(cat) d=${DST:?}/${1:?}
  trap "cd '$PWD'" RETURN INT TERM EXIT
  mkdir -p "$d" && cd "$d"

  hasn j || r.wm 'M-<F12>'  # TEMP:HACK:(mark wnd 'tmux a -t wget' by M-S-F1)
  hasn t || cmd=(r.fzf --exact --multi --no-sort --reverse
    --preview 't={};t=${t##*/};printf "%b\n" "${t//\%/\\x}"'
    --preview-window=down:1)  #  --cycle
  _filtered | "${cmd[@]:?}" | r.wgetf -i-
}

# THINK:TODO: parallel 'for' to start 'mpc' before starting 'dld'
for url in "${@:?}"; do
  hasn pd || r.n 'Fetching...' "${url##*/}"

  # EXPL: Save only first-level pages
  f=$CACHE/${url##*/}
  [[ -s $f ]] || f=$CACHE/$(r.wget-nm "$url")
  [[ -s $f ]] || r.wgetf -q "$url" -O "$f"

  # NOTE: order is dependent on the ops duration
  hasn n || album "$f"
  hasn l || urlst "$f"

  hasn pd || nm=$(album "$f")
  hasn  p || urlst "$f" | inmpc "$f" "http://===== ${nm:?} ====="
  hasn  d || urlst "$f" | todld "${nm:?}"

  hasn pd || r.n 'DONE' "${nm:?}"
done

# USE: prime_music
# exec wget -O- "$@" \
# | sed '/^var myPlayList = /!d; s/{name/\n&/g' \
# | sed -n '/.*mp3:\("[^}]*"\)}.*/s//\1/gp' \
# | r.wgetf -i-

%% Loading symbols from non-stripped .so %%  # USE: 131026
# BET: No need to manually copy library
  Stripped 'default' -- has only absolutely necessary symbols for dynamic linking
    (gdb) !readelf -S root/lib/libstdc++.so |grep sym
      [ 2] .dynsym           DYNSYM          000062bc 0062bc 010730 10   A  3   3  4
  Unstripped version has complete set of symbols
    (gdb) !readelf -S libs/libstdc++.so |grep sym
      [ 2] .dynsym           DYNSYM          000062bc 0062bc 010730 10   A  3   3  4
      [38] .symtab           SYMTAB          00000000 41c658 0342a0 10     39 9146  4
  Loading additional symbols from unstripped library over partially stripped sysroot
  # NOTE: this will only decode already shown ?? symbols. You need to reload 'file' to rebuild 'bt'
    (gdb) info sharedlibrary libstdc++.so
      From        To          Syms Read   Shared Object Library
      0xb6a5de18  0xb6aa8ed0  Yes (*)     root/lib/libstdc++.so.6
      (*): Shared library is missing debugging information.
    (gdb) add-symbol-file libs/libstdc++.so 0xb6a5de18
      add symbol table from file "libs/libstdc++.so" at
              .text_addr = 0xb6a5de18
      (y or n) y
      Reading symbols from libs/libstdc++.so...done.
  Decode whole 'bt' -- NEED to reload 'file'
    (gdb) file exe
    (gdb) bt


%% Unlimited bt on MIPS stack %%  # ~77368
BET: http://visualgdb.com/gdbreference/commands/set_backtrace_past-entry
  Real bt for comparison
      #0  0x2ac3cd80 in _fdata () from root/lib/libc.so.0
      #1  0x2ac4f740 in semop () from root/lib/libc.so.0
      #2  0x2aabf280 in _dlRenderThread (arg=0x0) at drawlist_command.c:203
      #3  0x2ab2203c in start_thread () from root/lib/libpthread.so.0
      #4  0x2ab2c350 in __thread_start () from root/lib/libpthread.so.0
      # Backtrace stopped: frame did not save the PC
  USE 'heuristic-fence-post'
    (gdb) set backtrace limit 0
    (gdb) thr 42
      # [Switching to thread 42 (LWP 4780)]
      #0  0x2ac3cd80 in ?? () from root/lib/libc.so.0
    (gdb) i f
      Stack level 0, frame at 0x0:
       pc = 0x2ac3cd80; saved pc = <unavailable>
       Outermost frame: outermost
       Arglist at unknown address.
       Locals at unknown address, Previous frame's sp in sp
    (gdb) set heuristic-fence-post -1   # HACK; OR:USE: 1000 (bytes)
    (gdb) bt
      #0  0x2ac3cd80 in ?? () from root/lib/libc.so.0
      #1  0x2ac4f740 in semop () from root/lib/libc.so.0
      #2  0x00000000 in ?? ()
      # Backtrace stopped: frame did not save the PC
    (gdb) set heuristic-fence-post 0    # DFL
      # warning: GDB can't find the start of the function at 0x2ac3cd80.
    (gdb) bt
      #0  0x2ac3cd80 in ?? () from root/lib/libc.so.0


% Recursive frames: how to coerce gdb into giving a backtrace
SEE
  + http://fragglet.livejournal.com/19646.html
  http://stackoverflow.com/questions/9809810/gdb-corrupted-stack-frame-how-to-debug

  # ~77368
  (gdb) thr 100
  [Switching to thread 100 (LWP 4391)]
  (gdb) bt
  #0  0x2ab2b90c in nanosleep () from /lib/libpthread.so.0
  #1  0x2ab2b8f0 in nanosleep () from /lib/libpthread.so.0
  Backtrace stopped: previous frame identical to this frame (corrupt stack?)

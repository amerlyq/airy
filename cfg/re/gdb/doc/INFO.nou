Cool man
  >>>> https://sourceware.org/gdb/onlinedocs/gdb/
  http://rus-linux.net/nlib.php?name=/MyLDP/algol/gdb/otladka-s-gdb.html
  http://www.delorie.com/gnu/docs/gdb/gdb_toc.html
  http://xakep.ru/articles/22176/
  http://www.dirac.org/linux/gdb/02a-Memory_Layout_And_The_Stack.php
  *http://beej.us/guide/bggdb/
  Tips
    http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Companion/intro_talks/gdb/gdb.html

  Very cool, very many. Read them all!
  * http://beej.us/guide/
  * http://web.mit.edu/gnu/doc/html/gdb_9.html
  * http://en.wikibooks.org/wiki/Linux_Applications_Debugging_Techniques
  > http://www.yolinux.com/TUTORIALS/GDB-Commands.html
  > http://www.chemie.fu-berlin.de/chemnet/use/info/gdb/gdb_12.html
  > http://www.haifux.org/lectures/210/gdb_-_customize_it.html

  >> http://docs.adacore.com/gdb-docs/html/gdb_10.html
    http://docs.adacore.com/gdb-docs/html/gdb_6.html#SEC43
    http://docs.adacore.com/gdb-docs/html/gdb_24.html

  Working with asm
    https://sourceware.org/gdb/onlinedocs/gdb/Machine-Code.html
  Dump commands history
    https://sourceware.org/gdb/onlinedocs/gdb/Command-History.html

Variables / examine data
  http://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_9.html
  https://ftp.gnu.org/old-gnu/Manuals/gdb-5.1.1/html_node/gdb_109.html

SEE
  http://www.csee.umbc.edu/portal/help/nasm/nasm.shtml

Book & Man
  http://www.cs.rit.edu/~csci243/resources/gdb.pdf
  Man: info gdb

Ref
  https://sourceware.org/gdb/current/onlinedocs/gdb/
  http://www.gnu.org/software/gdb/documentation/

Env vars (python only)
  http://stackoverflow.com/questions/9814185/how-to-access-environment-variables-inside-gdbinit-and-inside-gdb-itself

SEIZE Init
  ++ https://github.com/gdbinit/gdbinit
  https://github.com/gdbinit/hydra
  http://mammon.github.io/gdb_init.txt


%% CLI Front-ends
  +++ pwndbg
    https://github.com/pwndbg/pwndbg
      https://github.com/pwndbg/pwndbg/blob/master/FEATURES.md
  ++ gef -- peda-ng (cross-platform)
    https://github.com/hugsy/gef
    https://gef.readthedocs.io/en/latest/config/
  gdb peda -- colored frontend for gdb
    https://github.com/longld/peda
    http://ropshell.com/peda/
  ++ voltron -- extension with separate views
    https://github.com/snare/voltron
  mona.py -- win extension for reversing
    https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/
    https://github.com/corelan/mona


%% Extending
  Composition, Python, Aliases
   http://www.univ-orleans.fr/sciences/info/ressources/webada/doc/gnat/gdb_24.html
   https://docs.python.org/devguide/gdb.html
  On startup
    1. /etc/gdb/gdbinit
    2. ~/.gdbinit
    3. Process command line options and operands
    4. ./.gdbinit
    5. Reads command files specified by the `-x' option
    6. Reads the command history recorded in the history file
      (gdb) set history filename fname
      (gdb) set history save on/off
      (gdb) show history
      (gdb) show commands

  Catch output
    file
      http://www.univ-orleans.fr/SCIENCES/INFO/RESSOURCES/webada/doc/gnat/gdb_24.html
      http://stackoverflow.com/questions/6885923/redirecting-stori%E2%80%8C%E2%80%8Bng-output-of-shell-i%E2%80%8C%E2%80%8Bnto-gdb-variable
    mkfifo
      + TRY: -- open /tmp/gdb.$PID into fd=&3 for whole _this_ gdb session
      http://stackoverflow.com/questions/8410439/how-to-avoid-echo-closing-fifo-named-pipes-funny-behavior-of-unix-fifos
    python
      http://unix.stackexchange.com/questions/151502/how-to-save-the-result-of-printf-to-a-variable-in-gdb
      http://stackoverflow.com/questions/9963501/storing-shell-output-into-gdb-variable-in-gdbinit
  GDB scripts
    http://sourceware.org/gdb/current/onlinedocs/gdb/Command-Files.html#Command-Files
    - http://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_18.html
      $ gdb -x <file name> ...
  Python
    http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html#Python
    https://sourceware.org/gdb/wiki/PythonGdbTutorial
    $ (gdb) python x=gdb.execute("info registers", False, True); print x
    xxd-like formatted memory dump (python)
      http://qkxue.net/info/152843/Useful-GDB-Tricks
  Lisp
    https://github.com/tromey/gdb-refactoring-scripts


Miscellaneous
  (gdb) define command ... end        define user command
  *(gdb) RETURN           repeat last command
  *(gdb) shell command args       execute shell command
  *(gdb) source file          load gdb commands from file
  *(gdb) quit           quit gdb
  (gdb) ESC-CTRL-J      switch to vi edit mode from emacs edit mode

FAQ
  On x64, install another x32 gdb
    $ ls -l `which gdb32`
    /usr/bin/gdb32 -> ‘/your/install/path

Tricks
  Convenience vars for your own purposes
    set $table = *table_ptr
    show conv
  Checkpoint -- a snapshot of a program’s state
    (gdb) checkpoint
    (gdb) i checkpoint
    (gdb) restart checkpoint-id
  Value history - values printed by the print command.
    show values
  How to know where you are (file, next execution line)?
    (gdb) f
  How to find out why your program stopped?
    (gdb) i prog

GUI
  gdb -tui ./pr
  Еще его можно запустить командой layout c, layout asm
  Или комбинацией клавиш Ctrl-X a
    NOTE: the registers with white/gray background show that a value has
    changed. Not too meaningful when we just started the program, but
    mighty useful when stepping through code later on.
  ALT: cgdb,
  А я ddd люблю.
    http://www.gnu.org/software/ddd/
     GNU DDD is a graphical front-end for command-line debuggers such as
     GDB, DBX, WDB, Ladebug, JDB, XDB, the Perl debugger, the bash
     debugger bashdb, the GNU Make debugger remake, or the Python debugger
     pydb. Interactive graphical data display, where data structures are
     displayed as graphs


Reverse execution (often not available)
TODO: find where available

reverse-continue [ignore-count]
rc [ignore-count]
  Beginning at the point where your program last stopped, start executing in
  reverse. Reverse execution will stop for breakpoints and synchronous
  exceptions (signals), just like normal execution. Behavior of asynchronous
  signals depends on the target environment.
reverse-step [count]
  Run the program backward until control reaches the start of a different
  source line; then stop it, and return control to GDB.
  Like the step command, reverse-step will only stop at the beginning of a
  source line. It “un-executes” the previously executed source line. If the
  previous source line included calls to debuggable functions, reverse-step
  will step (backward) into the called function, stopping at the beginning
  of the last statement in the called function (typically a return
  statement).
  Also, as with the step command, if non-debuggable functions are called,
  reverse-step will run thru them backward without stopping.
reverse-stepi [count]
  Reverse-execute one machine instruction. Note that the instruction to be
  reverse-executed is not the one pointed to by the program counter, but the
  instruction executed prior to that one. For instance, if the last
  instruction was a jump, reverse-stepi will take you back from the
  destination of the jump to the jump instruction itself.
reverse-next [count]
  Run backward to the beginning of the previous line executed in the current
  (innermost) stack frame. If the line contains function calls, they will be
  “un-executed” without stopping. Starting from the first line of a
  function, reverse-next will take you back to the caller of that function,
  before the function was called, just as the normal next command would take
  you from the last line of a function back to its return to its caller 5.
reverse-nexti [count]
  Like nexti, reverse-nexti executes a single instruction in reverse, except
  that called functions are “un-executed” atomically. That is, if the
  previously executed instruction was a return from another function,
  reverse-nexti will continue to execute in reverse until the call to that
  function (from the current stack frame) is reached.
reverse-finish
  Just as the finish command takes you to the point where the current
  function returns, reverse-finish takes you to the point where it was
  called. Instead of ending up at the end of the current function
  invocation, you end up at the beginning.

Basically you can query the registers by prepending a dollar sign, e.g.
  print $ecx
or use them in expressions:
  print $esi + $ebx + 4
You can dereference the memory using the * operator (like in C):
  print *$ecx
will print the contents of the memory location pointed to by ecx.
While you can't directly type in assembly code, you can translate the expression into something more high-level, like this:
  print $eax - ($esi * $ebx)
Also, you can convert to various types using casts to C data-types, e.g.
  print (char)$ecx
would print the contents of ecx as a character.
  print *(char**)$ecx
which would interpret ecx as a pointer to char*, which you then dereference. So you'd see the contents of the string at the address contained in ecx.
This is just the tip of the iceberg though. gdb is very powerful tool. You might also find the display command useful. It's basically the same as print, except it will repeat the print command whenever the code is stopped (useful with breakpoints). You can examine most registers using info registers, or info all-registers if you're masochistic.
You can also change the contents of registers, using set:
  set $eax = 20


Problem Determination Tools for Linux
  • -Wall
  • Code review
  • Program’s traces, syslog, profilers
  • Static Source Code Analysis:
  – scan.coverity.com – free for FOSS
  – Flexelint
  • Dynamic analysis: Valgrind,
  • strace, /proc filesystem, lsof, ldd, nm, objdump, wireshark

ALSO
  http://www.unknownroad.com/rtfm/gdbtut/gdbbreak.html

Check out this thread:
  http://stackoverflow.com/questions/185043/gvim-and-gdb-for-c

personally I starting using cgdb and have never looked back. –  Grammin
By the way, you do use the gdb ed command, do you?
The combination of pure gdb + ed + ctags is killer, IMHO –  sehe Jul 14 '11 at 15:19
  http://blog.sanctum.geek.nz/actually-using-ed/

Conque-GDB
  http://www.vim.org/scripts/script.php?script_id=4582


Google is your friend.
  http://clewn.sourceforge.net/
  http://pyclewn.sourceforge.net/
  : Honestly, I think that you're better off sticking with cgdb.
  http://cgdb.github.io/
  // PHP and Python
  http://jaredforsyth.com/projects/vim-debug
  :ConqueGdb --args test arg1 arg2


List of debuggers Some widely used debuggers are
  GNU Debugger (GDB)
  Intel Debugger (IDB)
  LLDB
  Microsoft Visual Studio Debugger
  Valgrind (IBM's Purify, which has features similar to Valgrind for finding memory leaks and invalid memory accesses. A trial download is available.)
  WinDbg
  Eclipse debugger API used in a range of IDEs: Eclipse IDE (Java) Nodeclipse (JavaScript)

### Usage ###

//As long as your program's in a sane state, you can also to print it to stdout. Same principle applies to all functions available to the debugger, actually.
  call (void)puts(your_string)

You must give a length, but may change the representation of that string:
  (gdb) p/x (char[10]) *($ebx)
  : $90 =  {0x61, 0x73, 0x64, 0x66, 0x61, 0x73, 0x64, 0x66, 0x65, 0xa}
  (gdb) edit
  (gdb) shell gcc crash.c -o crash -gstabs+
  (gdb) run

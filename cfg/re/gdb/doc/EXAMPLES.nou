### Output Pipe Redirection ###
   Like backtrace from coredump
  printf "set logging on gdb.log\nbt 10\nq\n" > cmd_gdb && \
    gdb -x cmd_gdb -e /tmp/MrsAgent -c /tmp/Coredump 2>/dev/null

  | show logging | Show the current values of the logging settings.
  | set logging [on|off]    | Enable/Disable at all
  | set logging file <file> | Name of the current logfile (default: gdb.txt)
  | set logging overwrite [on|off] | To overwrite logfile each time (default: append)
  | set logging redirect [on|off]  | Log only to logfile (default: both terminal and logfile)

  Process output redirection
    http://stackoverflow.com/questions/593724/redirect-stderr-stdout-of-a-process-after-its-been-started-using-command-lin/593764#593764
    https://blogs.oracle.com/ahl/entry/inside_nohup_p

  Pass VAR to $SHELL
    (gdb) set $val = 2
    (gdb) eval "shell echo %d", $val
    (gdb) python gdb.execute("shell echo " + str(gdb.parse_and_eval("$val")))
    (gdb) guile (use-modules (gdb))(value->integer (parse-and-eval "$val"))

  Set ENV from expr inside gdb
    http://stackoverflow.com/questions/34726206/set-environment-variable-in-gdb-from-output-of-command

### C++ classes, etc ###
| list class::member     | list member in class
| b TestClass::testFunc(int) | 'class::member' -- w/o body, may get menu
  ptype class         print class members
  print *this         print contents of this pointer
  rbreak regexpr      useful for breakpoint on overloaded member name

### STL Containers, Boost, templates, etc ###
SEE: https://sourceware.org/gdb/wiki/STLSupport
<incomplete type>
  Run it in gdb and try to 'print *str' and you'll get an 'incomplete type'
   response. However, try 'disassemble get_string' and then 'print *str' and
   it'll display the struct and values properly. I have no idea why this
   works, but it does.
  However, works only for pointers; not for stringstreams.
   For them you need libstdc++6.4.8-dbg
  Or to use the libstdc++ debug mode, compile your application with the
  compiler flag -D_GLIBCXX_DEBUG as all other libs you need.
   https://gcc.gnu.org/onlinedocs/libstdc++/manual/debug_mode_using.html#debug_mode.using.mode
  ALT: Commands file, ex. .gdbinit: pretty printing
  STL debug of stringstreams, etc
    I got what I needed by recompiling everything (not just one or two
    translation units) with -D_GLIBCXX_DEBUG. Then I can just do p istm.tellg()

  |set print object on| -- deduce type of polymorphous object
    (gdb) p $99
      $129 = (CObject *) 0xfe545f0
    (gdb) set print object on
    (gdb) p $99
      $130 = (CUnit *) 0xfe545f0
  |set print pretty on/off| -- indent fields in structures
  |set print static on/off| -- omit static members on obj print


### Breakpoints from sourcecode ###
  <It's a one-line in any Unix, try:
  : #include <signal.h>
  : #define BREAK_HERE raise(SIGINT)
  : int main(int argc, char *argv[]){
  : int i,j;
  :   for(j=0,i=0;i<20;i++) {
  :     j+=i;
  :     if(j>20) BREAK_HERE;
  :   }
  : return 0;
  : }
  > (gdb) run
   Program received signal SIGINT, Interrupt.
   0x705b28a0 in kill () from /usr/lib/libc.2
  ...you are now in the debugger right after the BREAK_HERE statement
  You will have to step twice to come back out of the raise() call into your code.


### Signals ###
  Print a table of all the signals and how gdb handle each one.
    i handle
    info signals        print signal setup
    handle {signo} {actions}    set debugger actions for signal
     handle INT [no]print       [don't] print message when signal occurs
     handle INT [no]stop        [don't] stop program when signal occurs
     handle INT [no]pass    pass signal to program [only to debugger]
    signal <signo|0>        continue and send [no] signal to program


### Multi-threads ###
: Use case: debugging specific thread, while controlling behavior of others.
  facilities for debugging multi-thread programs:
    - automatic notification of new threads
    - ‘thread threadno’, to switch among threads
    - ‘info threads’, to inquire about existing threads
    - thread-specific breakpoints
    - set mode for locking scheduler during execution
      (gdb) set scheduler-locking step/on/off
    others: Interrupted System Calls
  (gdb) i threads
  (gbd) b foo.cpp:13 thread 28 if x > li
  Forking -- choose which to lead
    set follow-fork-mode ask || parent/child
  In addition, catchpoints come in handy:
    catch exec
   Catchpoint works as a breakpoint. Every time a call to exec() syscall is
   detected, GDB stops. This allows you to set any breakpoint (i.e. break
   main) in the newly loaded executable before continuing. Another
   catchpoint catch fork works similarly for fork() syscall detection.
  It is especially convenient:
    when both parent and child has to be followed (set detach-on-fork off);
    when parent processes forks often loading various executables.


### Short-living programs ###
  Main remote term
    ./prg -a -b & kill -STOP $! && echo $! > /tmp/dbgpid
  Host
    gdb -q -x /tmp/gdbrc ./prg -p $(cat /tmp/dbgpid)
    (gdb) ...
    (gdb) detach
  New remote term
    strace -p $(cat /tmp/dbgpid)
  Main remote term
    kill -CONT $(cat /tmp/dbgpid)

  Attach w/o influence on environment:
  :NOTE: You don't need 'set follow-fork-mode child'
  :WARNING: Don't use 'gdb -q -ex 'source /usr/local/peda/peda.py'
  : -- (or breakpoints will not work)
    ./prg -a -b & kill -STOP $! && gdb -q ./prg -p $!
    (gdb) b *main
    < then twice continue to skip SIGSTOP and once more to jump to main()


### Remote debugging ###
: https://sourceware.org/gdb/onlinedocs/gdb/Server.html
: - GDB runs on one machine (host) and the program being debugged
:   (exe.verXYZ.stripped ) runs on another (target).
: - GDB communicates via Serial or TCP/IP.
: - Host and target: exactly match between the executables and libraries,
:   with one exception: stripped on the target.
  Connect gdb to code sources in different place
    (gdb) set substitute-path /usr/src/mnt/cross ""
    (gdb) dir /your/path/verXYZ
  Remote (10.10.0.225)
    ; gdbserver :9999 program_stripped
    ; ./gdbserver :9999 -attach <pid>
  Host
    ; gdb program
    (gdb) handle SIGTRAP nostop noprint pass
     to avoid pausing when launching the threads
    (gdb) target remote 10.10.0.225:9999
  > Android (cool features)
    http://www.kandroid.org/online-pdk/guide/debugging_gdb.html


% Hard-fault of CPU
  http://support.code-red-tech.com/CodeRedWiki/DebugHardFault
  http://support.code-red-tech.com/CodeRedWiki/UsingGDB
  https://www.lpcware.com/content/forum/gdb-command-line-and-vector-catch

% Non-native core dumping
  Python
    https://gist.github.com/toolness/d56c1aab317377d5d17a
    ++ http://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html
      E.G. python+ncurses
  Java
    https://www.javacodegeeks.com/2013/02/analysing-a-java-core-dump.html

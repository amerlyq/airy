%%% Core Dump / Segfault

%% Resolve ?? symbols
  SEE
    http://nanxiao.me/en/use-pstack-to-track-threads-on-linux/
    http://stackoverflow.com/questions/33273101/how-to-resolve-function-name-through-memory-address
  List which debug-info packages should be installed
    gdb --quiet -nx --readnever /proc/$pid/exe $pid can


%% Structure / format of corefile
SEE
  +++ REF process startup structures -- and corefile
    https://epipro.wordpress.com/2013/01/15/linux-processes-structure-hangs-and-core-dumps/
  +++ http://www.gabriel.urdhr.fr/2015/05/29/core-file/
    # ALSO:SEE: reference at the bottom of article
    SEE:(core fmt) <linux/elfcore.h> / struct elf_prstatus
      /buildroot/toolchain_build_mips/linux-pac-hr54/include/linux/elfcore.h
  http://www.ibm.com/support/knowledgecenter/ssw_aix_61/com.ibm.aix.files/core.htm
  https://backtrace.io/blog/whats-a-coredump/

Parts:
  + http://stackoverflow.com/questions/17972945/core-dump-note-section
  https://lists.kernelnewbies.org/pipermail/kernelnewbies/2012-January/004356.html

Ph.
  https://www.researchgate.net/publication/251890419_On_reducing_of_core_dump_file_size

INFO
  $ mips-linux-readelf -l ./core.siege.5323
  $ [eu-]readelf -a core  # for coredump only -h -l -n have content
  $ (gdb) maintenance info sections
  # 0x71075000->0x71076000 at 0x08f19000: load328 ALLOC LOAD HAS_CONTENTS
  # ...
    sgm 1..3 -- ELF executable
    < WARNING: Can provide confused/incorrect info for coredump!
    E.G 0x08f19000 -- shift in core and not physical address


> http://www.delorie.com/gnu/docs/gdb/gdb_125.html
<working memory of a computer program at a specific time, generally when the
 program has terminated abnormally (crashed).[2] In practice, other key pieces
 of program state are usually dumped at the same time, including the processor
 registers, which may include the program counter and stack pointer, memory
 management information, and other processor and operating system flags and
 information
<: When coredump, pr shows '~$ Segmentation fault (core dumped)'
  Enable creation of coredump (some system disabled by default)
    ulimit -c unlimited
    echo /home/yusuf/mycore > /proc/sys/kernel/core_pattern
    : SEE http://linux.die.net/man/5/core
  Find coredump file for executable
  | # file core.1234 | # gdb core.1234 |
  ;OR: # echo "core_%e.%p" > /proc/sys/kernel/core_pattern
  : if the program foo dumps its core, the core_foo.1234 will be created.

Launch:
  $ gdb myprogram
    (gdb) core ./core
    (gdb) frame 2
    (gdb) info locals || bt || backtrace full || info stack
   From there on (bt full -- investigate stack local vars), it was easy to
   spot a char[] buffer at the lowermost valid stack level that was being
   updated by functions higher up in the stack.  If that buffer had
   overflowed, it would certainly make everything from there on in the stack
   invalid.

   There were other pointers in that stack level right after the suspicious
   buffer. Using the up command, I went up, up, up until I reached that
   stack level, and then I could check the pointers using the print command.
   Indeed, gdb replied “cannot reach memory address” for their values — the
   pointers were invalid.  With the down command I went down the stack,
   right to the function that was manipulating that buffer. A quick look at
   the code, combined with checking the values of local variables with print
   confirmed my suspicions. An off-by-one error made my loop go beyond the
   end of the buffer, corrupting the stack and causing the crash.

  If stack smashed, no src, release version, and all debug smbs are stripped:
  : Like: #0  0xc0199470 in ?? () inside libstdc.so
    You can obtain addresses of lines in 'bt'
    And find that addressed in asm code:
      objdump -D ./prg | less  #
   A stack corruption can only mean one thing: someone wrote something over
   the stack and filled the stack pointer address with garbage instead.

  You can save current debug point of any program in gdb to coredump file:
    (gdb) generate-core-file
   When a program dies with SIGSEGV, it normally dumps core on Unix.

  Corrupted stack -- set frame manually
    frame $bp [$pc]  # set frame address and current $pc
    where 2
    # where FRAMEADDR should be $sp in the caller.
    # It behaved a bit erratically now to me on x86_64.
    If/as this is not a common task one can use
      eu-readelf -n corefile  # eu-readelf is readelf from elfutils
    and patch the registers using hexedit
      SEE http://gdb.sourceware.narkive.com/G4dBK3Zc/setting-cooked-registers-desirable-feature-for-coredump-analysis-but-results-in-error
    ALSO try 'set write'
    Platform-dependent regs
      (gdb) i all-registers


% systemd
  $ coredumpctl dump 4001 -o core.prg.4001


Analysis (0x71075000 in ??)
  (gdb) maintenance info sections
  # 0x71075000->0x71076000 at 0x08f19000: load328 ALLOC LOAD HAS_CONTENTS
    < WARNING: Can provide confused/incorrect info for coredump!
    E.G 0x08f19000 -- shift in core and not physical address
    ALT:
    $ mips-linux-readelf -l ./core.siege.5323
    $ [eu-]readelf -a core  # for coredump only -h -l -n have content
  (gdb) x/32i $pc-0x40
  (gdb) i r || x/32w $sp
  (gdb) i sh
    shared library mappings
  (gdb) info files
    all mappings
  (gdb) find /w 0x08049000 0x0804a000 0x8048034
    # Search for a pattern in the segment.
    0x804903c
    0x8049040
    2 patterns found


Print STL containers in coredump
  http://yosefk.com/blog/very-funny-gdb-ve-ery-funny.html
    http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt

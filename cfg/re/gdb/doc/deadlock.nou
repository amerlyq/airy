%%%% Deadlock

SEE
  http://yusufonlinux.blogspot.com/2010/11/debugging-core-using-gdb.html

% Search for thread, which blocked the current one
Program terminated with signal 6, Aborted.
#0  0x2ab27b6c in pthread_cond_wait () from /lib/libpthread.so.0
(gdb) thread 110
[Switching to thread 110 (process 4359)]#0  0x2ab2b1b8 in __lll_lock_wait () from /lib/libpthread.so.0
(gdb) bt
#0  0x2ab2b1b8 in __lll_lock_wait () from /lib/libpthread.so.0
#1  0x2ab24678 in pthread_mutex_lock () from /lib/libpthread.so.0
...
(gdb) f 1
#1  0x2ab24678 in pthread_mutex_lock () from /lib/libpthread.so.0
(gdb) p* (pthread_mutex_t*)$a0
$1 = {
  __data = {
    __lock = 2,
    __count = 0,
    __owner = 4391,
    __kind = 0,
    __nusers = 1,
    __spins = 0
  },
  __size = "\000\000\000\002\000\000\000\000\000\000\021'\000\000\000\000\000\000\000\001\000\000\000",
  __align = 2
}
(gdb) thread 100
[Switching to thread 100 (process 4391)]#0  0x2ab2b90c in nanosleep () from /lib/libpthread.so.0
(gdb) bt
#0  0x2ab2b90c in nanosleep () from /lib/libpthread.so.0
#1  0x2ac820d0 in usleep () from /lib/libc.so.0
...



%% Threads
  Debug is easier if create coredump
    http://processors.wiki.ti.com/index.php/Multithreaded_Debugging_Made_Easier_by_Forcing_Core_Dumps
  Print pthread structure
    https://en.wikibooks.org/wiki/Linux_Applications_Debugging_Techniques/Deadlocks
  Mapping
    (gdb) info threads
      : 12 Thread 4398053392560 (LWP 7234) 0x0000000010005740 in xxxx ()
      : ...
    (gdb) info proc 7234 status
      > WARNING: works only on running process
  Get TLS (thread-local storage)
    http://stackoverflow.com/questions/10841219/thread-specific-data-from-linux-core-dump
  Save func arguments/buffer into file
    http://tamkovich.com/2011/03/core-dump-for-multithreading-app/


% Locked mutex / refcount on exit
  http://kfunk.org/2014/08/29/scripting-gdb-to-execute-commands-at-particular-breakpoints/


% Recursive frames: how to coerce gdb into giving a backtrace
SEE
  + http://fragglet.livejournal.com/19646.html
  http://stackoverflow.com/questions/9809810/gdb-corrupted-stack-frame-how-to-debug

  (gdb) thr 100
  [Switching to thread 100 (LWP 4391)]
  (gdb) bt
  #0  0x2ab2b90c in nanosleep () from /lib/libpthread.so.0
  #1  0x2ab2b8f0 in nanosleep () from /lib/libpthread.so.0
  Backtrace stopped: previous frame identical to this frame (corrupt stack?)


% Patch read-only regs in coredump
# = setting cooked regs
http://stackoverflow.com/questions/9809810/gdb-corrupted-stack-frame-how-to-debug
http://cygwin.com/ml/gdb/2011-02/msg00042.html
  http://cygwin.com/ml/gdb/2011-02/msg00047.html
  $ frame FRAMEADDR PCADDR  # where FRAMEADDR should be $sp in the caller.
  $ eu-readelf -n corefile  # and patch the registers using hexedit,
  TRY $ set write

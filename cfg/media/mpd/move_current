#!/bin/bash
## Moves currently playing song into $dstdir/<subdir>

source ~/.shell/profile

case "${CURR_PROF:?No}" in
    home) dir=/media/${CURR_USER:?No}/Umi/Music ;;
       *) dir=/home/media/music ;;
esac

dstdir="$dir/++"

if [[ "$1" == "-l" ]]; then ls "$dstdir/$2"; exit; fi

# 1..9..inf stars as quality, or name for dir for grouping, or dir/subdir tag
choice=${1}

fl="$dir/`mpc -f '%file%' | sed '1q'`"

DMENU='dmenu -i -p MPD: -b -nb #000000 -nf #999999 -sb #000000 -sf #31658C -fn -misc-fixed-medium-r-normal-*-*-200-75-75-*-*-iso8859-2'

if [[ -z "$choice" ]]; then
    cd "$dstdir"
    choice=$( find . -maxdepth 1 -type d -exec basename {} \; | $DMENU)
fi

if [[ -n "$choice" ]]; then
    dst="$dstdir/$choice"
    curr="$(mpc -f '[%position%]' | sed '1q')"
    mkdir -p "$dst" \
    && mv -i -v -b "$fl" --target-directory="$dst/" \
    && mpc next >/dev/null && mpc del $curr #Del current, interrupts cast by ssh: mpc del 0
fi

# To be able send many request w/o retype password to SSH
# You can do this cleanly with an ssh 'control socket'. To talk to an
# already-running SSH process and get it's pid, kill it etc. Use the 'control
# socket' (-M for master and -S for socket) as follows:
#   $ ssh -M -S my-ctrl-socket -fnNT -L 50000:localhost:3306 jm@sampledomain.com
#   $ ssh -S my-ctrl-socket -O check jm@sampledomain.com
# Master running (pid=3517)
#   $ ssh -S my-ctrl-socket -O exit jm@sampledomain.com
# Exit request sent.
# Note that my-ctrl-socket will be an actual file that is created.

Xkbmap
	[_] Make VTE terminals on actual places of C-A-Fx (independent from mapping)
	[_] BUG: xcape is randomly crashed -- maybe too much combo?
	[_] BUG: when pressing both Alt+Shift -- they aren't latched
		:= Because of TwoKeys -- but how to reset this option?
		:= maybe it's consequence of *.clearMods = true inside ./compat/
	[_] FIXME: can't use overlay xkb mapping on LAlt-LCtrl
		Cause vbox after windows treats LCtrl and Caps as same keycode
	2015-09-06 [X] Try xkeymap -- so kbdd will not be closing gmail pop-up or vk focus
	[_] In vim add custom plugin for kbdd autocmd on insert/live and operator-pending (r, R, Space)
		save state of last used lang in insert regime and return it back again

	2015-09-06 [X] Map enter, pgup, pgdn to overlay1
	[_] Try: Remap 'f' or <Space> to Control if hold, if it has sense
			https://github.com/alols/xcape
		: Search for key-fixator key (to hold modifiers like shift or control)
	[_] Key Layout for entering [,] in russian with mod3 or Alt<space>

	[_] Make second overlay/types group for right Win/Menu/Ctrl button
		[_] Vbox button will be the composition of them instead of single button
		[_] Simulate level5
		[_] I need alt,ctrl,win modifiers on right in any case

	Lang
		[_] R-Alt -> Lang_menu (custom layout with programmer symbols in russian)
		[_] R-Alt -- same way as Caps -- remap to Alt on combo, or Lang on press
		[_] R-Alt SetGroup on press with another key, or LockGroup on release
			WANNA: hold -- another lang, click -- en, lalt+click -- ru
		[_] BUG: Lang change -- Mod+RAlt -> need to reset Mod/Ctrl/(all involved) modifiers

	Latching
		2015-09-06 [X] NEED: Tray indicators for latching ModN
		>[_] FIND latchin shift -- do latch only if pressed < 300ms
		>[_] Make latching modifiers (for i3 also), -> ctrl aside as it is double-key
			: Toggle this behaviour with num lock or scroll lock or whatsoever
		[_] Toggle overlay locking/unlocking on double-press of Control_L
		[_] When latching is done, xcape must be inversed for alt,shift,win
			: modifier on short, key on long?
		[_] Use my second '\' as Latch/Lock for level3/5
		[_] Latching of langs -> for diff lang input
			: To use effectively set/latch you need bind ISO_Lock
		[_] TRY: accessx instead of my modifiers latching
			: http://www.x.org/releases/X11R7.7/doc/libX11/XKB/xkblib.html#Controls_for_Better_Keyboard_Access_by_Physically_ImpairedPersons
			: https://wiki.archlinux.org/index.php/Accessibility
		There is a utility called xbkeys for setting accessibiltiy options for xorg.
			From xbkey manual:
			: To switch sticky keys on or off, and optionally set or reset:
			: () two keys pressed at the same time stops sticky keys;
			: () a modifier pressed twice will be locked:
			:     [-]{sticky|st} [[-]twokey|[-]latchlock]...
			I ran this:
				xkbset sticky -twokey -latchlock
			That command can go in .xinitrc
				: turn on stickykeys. don't let two keys pressed at the same time
				: disable it.  don't turn on "latch lock", ie pressing a modifier
				: key twice "locks" it on.
				xkbset accessx sticky -twokey -latchlock
				: don't expire these settings. (run xkbset q exp for details.)
				xkbset exp 1 =accessx =sticky =twokey =latchlock

	LED
		[_] Show led indicators for regimes in i3bar (xset -q)
		: https://www.google.com.ua/search?hl=uk&source=hp&biw=&bih=&q=linux+get+capslock+status&btnG=%D0%9F%D0%BE%D1%88%D1%83%D0%BA+Google&gbv=1
			ALT: xset -q
			: sudo pip install evdev
			: from evdev import InputDevice, ecodes
			: dev = InputDevice('/dev/input/eventX') # your keyboard device
			: dev.leds()  # (verbose=True)
		[_] TODO: Check if LED_caps is disabled!!!

	Composite modifiers
		[_] ??: Ctrl_L (short) -> ISO_Lock, Ctrl_L+Space -> Lock lvl3/5?
		[_] Menu+RCtrl -> Super_R (for i3)

	[_] Use Space as Hyper_L -> modify layout for ctrl/alt/super when pressed first
		And if first pressed ctrl/alt/super -> change Hyper_L to simple Space, keeping modifiers (disable cleaning)

	[_] Make F1-12 be accessible by mod+F1-12, and reuse them as-is for i3
		: Shift must be kept as level for S-F1x -> F2x
		:= Search useful but unused symbols to reuse as commands

	Overlay for hjkl navigation
		WANNA: make overlay lctl->F13, where F13 = [ temporary disables overlay (as shift for Caps) ]
		OR: as IvanPascal make ctrl as lock key, locking not LockControls but SetControls by inner mechanics
		So original keys will be available by lctl+hjkl -> hjkl, not arrows
		: On overlay 'on' remap LCtrl action from Set(overlay=true) to temporary Set(overlay=false)
		:	therefore you will be able to access original keys when overlay locked
		[_] Mouse on hjkl
			: http://superuser.com/questions/695315/make-scroll-lock-toggle-mouse-keys-on-home-row
SEE
	xkbset -- useful to show/change xkb current state/options
		https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692396

SEIZE:
	http://forum.colemak.com/viewtopic.php?id=1438
	http://habrahabr.ru/post/222285/
	>https://github.com/r0adrunner/Space2Ctrl

Setup
	I use .xsession to set up my keyboard:
	: xsetroot -solid black
	: xset -b
	: xset s off
	: xset -dpms
	: xset r rate 250 30
	: setxkbmap -keycodes evdev -types default -compat 'basic+misc+iso9995+ledcaps(group_lock)' -symbols 'pc+us+kh:2+level3(ralt_switch)+ctrl(nocaps)' -geometry 'thinkpad(us)'
	: xkbset -bell -feedback sticky -twokey latchlock
	: xkbset exp '=sticky'
	: kinput2 -xim &
	: export XMODIFIERS="@im=kinput2"
	: export LC_CTYPE=ja_JP.UTF-8
	: exec ratpoison

REF
	[_] CHECK WARNING: keys Pause/Break may be useful for serial devices
	Holding down Alt and SysRq (if combined with Print Screen key) while slowly
	typing REISUB will get you safely restarted.
		http://kember.net/articles/reisub-the-gentle-linux-restart/
	Holding down Alt and SysRq (which is the Print Screen key) and typing K
	will log you out and restart the X server. This replaces
	<CTRL><ALT><Backspace> which is no longer supported in Ubuntu
	Ctrl-Break is used with programmes like putty that can operate a serial
	console connection to a Cisco router. Ctrl-Break interrupts the normal
	boot process to get into the Cisco rommon

Snippets
	Words
		replace, override, augment  // hidden
	Placeholders
		key <RALT> { [ VoidSymbol ] };
		key <CAPS> { [ VoidSymbol ] };
		actions[Group1]= [ Redirect(key=<RWIN>, clearMods=Mod5) ]
		ISO_Level5_Shift, ISO_Level5_Lock
	Latch
	: virtual_modifiers Super;
	: key <LALT> {
	:     type = "ONE_LEVEL",
	:     virtualMods= Super,
	:     symbols = [ Super_L ],
	:     actions = [ LatchMods(modifiers=Super) ]
	: };

	key <LWIN> {
		symbols[Group1] = [ Mode_switch, Multi_key ],
		virtualMods= AltGr
	};

	pc: Pure blocks w/o nested includes
	: include "srvr_ctrl(fkey2vt)"
	: include "pc(editing)"
	: include "keypad(operators)"
	: include "keypad(x11)"

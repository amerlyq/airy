// vim: ft=cpp

default partial xkb_symbols "mods" {
    include "mods(keys)"
    include "mods(switches)"
    include "mods(shift_simple)"
};

// ==================================================================

partial alphanumeric_keys
xkb_symbols "keys"
{
    key.type = "ONE_LEVEL";
    key <ESC>  { [ Escape ] };
    key <RTRN> { [ Return ] };
    key <BKSP> { [ BackSpace ] };
    key <SPCE> { [ space ] };
    // key <SPCE> { type="L2:SUPER", [ space , Return ] };  // Multi_key

    key <TAB>  { type="TWO_LEVEL", [ Tab, ISO_Left_Tab ] };
    key <PRSC> { type="PC_ALT_LEVEL2", [ Print, Sys_Req ] };
    // key <PAUS> { type="PC_CONTROL_LEVEL2", [ Pause, Break ] };
    key <SCLK> { [ ISO_Lock ] };  // BUG:
};


partial modifier_keys
xkb_symbols "switches"
{
    // modifier_map Shift  { Shift_L, Shift_R };
    // modifier_map Lock   { Caps_Lock };
    // modifier_map Control{ Control_L, Control_R };
    // modifier_map Mod1   { Alt_L, Alt_R, Meta_L, Meta_R };
    // modifier_map Mod2   { Num_Lock };
    // modifier_map Mod3   { Hyper_L, Hyper_R };
    // modifier_map Mod4   { Super_L, Super_R };
    // modifier_map Mod5   { ISO_Level3_Shift };
    key.type = "ONE_LEVEL";

    key <CAPS> { [ Control_L ] };
    key <RWIN> { [ Control_R ] };
    modifier_map  Control { <CAPS>, <RWIN> };
    // modifier_map  Lock { Caps_Lock };

    key <LWIN> { type="TWO_LEVEL", [ Alt_L, Meta_L ] };
    modifier_map  Mod1 { <LWIN> };

    key <LALT> { [ Super_L ] };
    key <SUPR> { [ Super_R ] };
    modifier_map  Mod4 { <LALT>, <SUPR> };

    // EXPL: xcape: -> Super_R, so dbl click-hold will cause lvl5
    // BUT: I temporarily don't use ISO_Level5_Shift
    // BUG: not dropping Super modifier when activates Control
    key <RCTL> {
        type="L2:SUPER",
        [ ISO_Level3_Shift, Control_R ],
        actions= [ SetMods(modifiers=LevelThree), LatchMods(clearLocks,modifiers=Control) ]
    };
    modifier_map  Mod5 { <RCTL> };
    key <MENU> { [ Hyper_L ] };  // For VirtualBox
    modifier_map  Mod3 { <MENU> };

    // Obtain one more modifier by swaping Hyper
    // The extra key on many European keyboards.
    // key <LSGT> { [ Hyper_L ] };  // { [ less, greater, bar, brokenbar ] };
    // modifier_map  Mod3 { <LSGT> };
    // key <HYPR> { [ space ] };
    key <LSGT> { [ Multi_key ] };  // { [ less, greater, bar, brokenbar ] };
    modifier_map  Mod3 { <LSGT> };


    // NOTE: can be used as clearMods!
    // WARNING: there no LatchControls()
    // ALT: (lock) Overlay1_Enable --> SEE: compat/accessx
    // BUG: key <SCLK> { [ ISO_Lock ] };
    // ALT: key <SCLK> { [ StickyKeys_Enable ], actions= [ LockControls(ctrls=StickyKeys) ] };

    // THINK: use as Esc on releases instead of Multi_key?
    key <LCTL> {
        [ Overlay1_Enable ],
        actions= [ SetControls(ctrls=Overlay1) ]
    };
    key <PAUS> {
        [ Overlay1_Enable ],
        actions= [ LockControls(ctrls=Overlay1) ]
    };
    key <NMLK> {  // Pointer_Accelerate
        type="TWO_LEVEL",
        [ Num_Lock, Pointer_EnableKeys ]
    };
    modifier_map  Mod2 { Num_Lock };
};

// =====================================================

partial modifier_keys
xkb_symbols "shift_simple" {
    // Both shift -> ShiftLock, then either shift -> release
    key.type = "ONE_LEVEL";
    key <LFSH> { [ Shift_L ] };
    key <RTSH> { [ Shift_R ] };
    modifier_map Shift { <LFSH>, <RTSH> };
};

partial modifier_keys
xkb_symbols "shift_lock" {
    // Both shift -> ShiftLock, then either shift -> release
    key.type = "TWO_LEVEL";
    key <LFSH> { [ Shift_L, Shift_Lock ] };
    key <RTSH> { [ Shift_R, Shift_Lock ] };
    modifier_map Shift { <LFSH>, <RTSH> };
};

partial modifier_keys
xkb_symbols "shift_latch" {
    // Change Shift with a sticky version (for one next symbol)
    key.type = "TWO_LEVEL";
    key <LFSH> { [ Shift_L, ISO_Level3_Latch ] };
    key <RTSH> { [ Shift_R, Multi_key ] };  // ISO_Level2_Latch
    modifier_map Shift { <LFSH>, <RTSH> };
};

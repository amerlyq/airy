#!/usr/bin/env bash

source ~/.shell/profile
source ~/.shell/func.d/write
dst=~/.i3/config

# ---- Choose Theme ----
[[ "$1" == "-t" ]] && thm_nm="$2" && shift

[[ "${THEME}" == light ]] && thm_nm="snow" || thm_nm="grass"
source ~/.i3/themes/${thm_nm}.i3 || exit

# ----- Monitors -----
declare $(cat ~/.cache/displayside | sed -n '1d;s/.*/M1=& M2=/;p;N;s/\n//p')
[[ "$1" == "-1" ]] && M1="$M2" && shift

if [[ "$M1" && "$M2" ]]; then
    monitors="$(printf "$M1 %.0s" {0..5}; printf "$M2 %.0s" {6..10}) $M1 $M1"
elif [[ "$M1" ]]; then
    monitors="$(printf "$M1 %.0s" {0..12})"
fi

### Declare it only if you want change lang on Mod+Shift+890
# USE_LANG="8 9 0"

# ----- Paths -----
wbegin
wcat ~/.i3/config_base

# ----- Lists -----
hjkl="h j k l"
arrows="left down up right"
Arrows="Left Down Up Right"
digits="$(echo {1..9} 0)"
wrkkey="grave $digits minus equal"
wrksps="$(echo \$w{00..12})"

# ---- Strings ----
bs="bindsym"   ; t="    "       ; def='$def'     ; exno='$exno'
mod="$bs \$mod"; mSd="$bs \$mSd"; mCd="$bs \$mCd"; mCS="$bs \$mCS"
ts="$t$bs"     ; tod="$t$mod"   ; tSd="$t$mSd"   ; tCd="$t$mCd"   ; tCS="$t$mCS"
exi3="$exno i3-input -F "

# ----- Terminal -----
# Choose appropriate terminal (get current launched v-terminal)
# Somehow works unstable, backing one level deeper to term=zsh instead of term=urxvt
#   when you launch it from install.sh and not directly
# pid=$$
# while [ "$(echo $pid)" != 1 ]; do
#     term=`ps -h -o comm -p $pid 2>/dev/null`
#     pid=`ps -h -o ppid -p $pid 2>/dev/null`
#     echo ": $term"
# done

## Arch has no update-alternatives
# term=$(update-alternatives --get-selections |
#     grep 'x-terminal-emulator' | awk '{print $3}')
# term="${term##*/}"

# if [ "$term" == "urxvtd" ]; then
#   term="urxvt"        # i3-sensible-terminal
#   eurx="$exno urxvt"  # Many times inside tmux demon was hanged, so it's better use separate processes
# fi
hash x-terminal-emulator && TERMCMD=x-terminal-emulator || [[ -n "$TERMCMD" ]] \
    || TERMCMD="$(hash st && echo st || hash urxvt && echo urxvt || echo xterm)"
eurx="$exno $TERMCMD"
eflo="$eurx $([[ $(readlink -m $TERMCMD)==$(which st) ]] && echo -c || echo -name) Float"
## Disabled: wnd name wrong setted in zsh only!
#ecli="$exno urxvtcd -e \$SHELL -i -c " #--hold


# ---- Writers ----
w_header(){ wprf "${2+$1}### ${@:${#}} ###\n"; }
wmode_begin(){ local m="\$mode_${@:${#}-1:1}"
    wstr "set $m ${@:${#}:1}"
    for key in "${@:1:${#}-2}"; do wstr "$key mode \"$m\""; done
    wstr "mode \"$m\" {"
}
wmode_ignore(){ for key in "$@"; do
    wstr "$t$key $exno i3-input -l 1 P 'Key isn''t mapped'"
done; }
wmode_end(){
    for key in "$@"; do wstr "$t$key $def"; done
    wprf "$ts Return $def\n$ts Escape $def\n"
    wprf "$ts space  $def\n$ts q      $def\n"
    wprf "}\n\n"
}


wprf "\n### =========== Script-generated items ============= ###\n"
w_header "Vars"
    wstr 'set $s_grid 50 px'
    wstr 'set $s_step  5 px'
    wstr 'set $s_size 10 px or 2 ppt'

w_header "\n" "Bind: Refresh on i3mod"
wlistf "set %s %s" "$wrksps" $(~/.i3/ctl/load_names)

if [[ "$monitors" ]]; then
    w_header "WorkSpaces: Output"
        wlistf "workspace %s output %s" "$wrksps" $monitors
fi

w_header "Autostart"
    wstr "exec_always --no-startup-id auto-start"

# wstr "set \$refbar bash -c 'kill -s SIGRTMIN+1 \$(pidof i3blocks)'"
# i3mod=64 #LAlt
#wstr "bindcode $i3mod $exno \$upd lang"
# key_ralt=108
# wstr "bindcode --release $key_ralt $exno \$upd lang"

wprf "\n### ================== Workspaces ================== ###\n"
w_header "WorkSpaces: Focus"
    wlistf "$mod+%-5s workspace number %s" "$wrkkey" $wrksps

w_header "WorkSpaces: Move container"
if [ -n "$USE_LANG" ]; then
    tmp_wrkkey=( $wrkkey ); tmp_wrksps=( $wrksps )
    for i in $USE_LANG; do for ((k=1; k<=${#tmp_wrkkey[@]}; ++k))
    do if [ "$i" == "${tmp_wrkkey[$k]}" ]; then
        tmp_wrkkey[$k]=""; tmp_wrksps[$k]=""; fi; done; done
    wlistf "$mSd+%-5s \$move_ctw number %s" "${tmp_wrkkey[*]}" ${tmp_wrksps[*]}
else wlistf "$mSd+%-5s \$move_ctw number %s" "$wrkkey" $wrksps; fi

w_header "WorkSpaces: Move and move container"
    wlistf "$mCd+%-5s \$move_ctw number %s, workspace number %%2" "$wrkkey" $wrksps

wprf "\n### ================== Navigation ================== ###\n"
w_header "Navigation: Focus"
    wlistf "$mod+%-5s focus %s" "$hjkl $Arrows" $arrows $arrows

w_header "Navigation: Move"
    wlistf "$mSd+%-5s move %-5s \$s_grid" "$hjkl $Arrows" $arrows $arrows

w_header "Navigation: Move Float"
    wlistf "$mCd+%s  floating enable, $exno ~/.i3/ctl/move_by_grid %s" \
        "$hjkl" 2:11 2:12 2:21 2:22


wprf "\n### ================== Mark & Go =================== ###\n"
w_header "Navigation: Mark"
    wmode_begin "$mod+t" 'mark' "Mark this: 0..9, <mod+T>"
        wprf "$tod+t $exi3 'mark %%s' -P 'Mark name: ' ,$def\n\n"
        wlistf "$ts %-5s mark mrkM%s ,$def" "$wrkkey" $wrkkey
    wmode_end "$mod+t"

w_header "Navigation: GoTo"
    wmode_begin "$mod+g" 'goto' "GoTo mark: [0..9-=], Mod+G"
        wprf "$tod+g $exi3 '[con_mark=%%s] focus' -P 'Go to mark: ' ,$def\n\n"
        wlistf "$ts %-5s [con_mark=\"mrkM%s\"] focus ,$def" "$wrkkey" $wrkkey
    wmode_end "$mod+g"

w_header "Navigation: Direct Go"
    # Temporary solution: Jump exactly to the next open instance
    wmode_begin "$mod+s" 'godir' "-> $(~/.i3/ctl/run-focus -m)"
        wmapf "$ts %%1 $exno ~/.i3/ctl/run-focus %%1 ,$def" \
            $(~/.i3/ctl/run-focus -k)
    wmode_end "$mod+s"

w_header "Navigation: Key <F1..12>"
for i in {1..12}; do wprf "\
$mSd+F$i mark mrkF$i
$mCS+F$i unmark mrkF$i
$mod+F$i [con_mark=\"mrkF$i\"] focus
$mCd+F$i [con_mark=\"mrkF$i\"] \$move_ctw current
\n"; done


wprf "\n### ==================== Edit ====================== ###\n"
w_header "Containers: Edit"
    wmode_begin "$mod+e" 'container' "Edit"
        wstr "$ts f floating toggle"
        wlistf "$ts %s $exno ~/.i3/ctl/ratio_size %-5s ,$def" \
            "1 2 3" 0.5 0.667 0.75
        # direction = <up, down, left, right, width or height>
        # resize <grow|shrink> <direction> [<px> px [or <ppt> ppt]]
        wlistf "$ts %s resize %-12s \$s_size" "$hjkl" \
            "shrink right" "grow down" "shrink down" "grow right"
        wlistf "$ts Shift+%s resize %-11s \$s_size" "$hjkl" \
            "grow left" "shrink up" "grow up" "shrink left"
        wlistf "$ts %-5s resize %-13s \$s_size" "$Arrows" \
            "shrink width" "grow height" "shrink height" "grow width"
        wlistf "$tod+%s move %-5s \$s_step" "$hjkl" $arrows
        wlistf "$ts Shift+%-5s move %-5s \$s_step" "$Arrows" $arrows
    wmode_end "$mod+e"

    wmode_begin "$mCd+e" 'workspace' "Workspace/Tune-up"
        wstr "$ts r $exi3 '$exno ~/.i3/ctl/rename_current_workspace \"%%s\"' -P 'WS Name: ' ,$def"
        wprf "$tSd+r $exno ~/.i3/ctl/rename_as_focused ,$def\n\n"
        #bar hidden_state hide|show|toggle [<bar_id>]
        #bar mode dock|hide|invisible|toggle [<bar_id>]
        wlistf "$t$bs \$m%sd+grave bar mode %-9s ,$def" "o S C" toggle dock invisible
    wmode_end "$mCd+e"

w_header "Containers: Border Style"
    # window border style 'border <normal|1pixel|none|pixel>'
    wmode_begin "$mod+b" 'border' "Border : <1-9> [n]ormal [p]ixel [h]idden"
        wmapf "$ts %%1 border pixel %%1 ,$def" $digits
        wlistf "$ts %s border %s, $def" "\$mod+b n p h" \
            toggle normal 1pixel none
        # wprf "$ts %%1 border pixel %%1 ,$def\n"
    wmode_end

w_header "Wacom: Submenu"
    # window border style 'border <normal|1pixel|none|pixel>'
    wmode_begin "$mod+Insert" 'wacom' "Wacom : <1-4> [n]ext, [m]ode, [c]urve, [o]utput"
        # wmapf "$ts %%1 border pixel %%1 ,$def" 1 2 3 4
        # wlistf "$ts %s border %s, $def" "\$mod+b n p h" \
        #     toggle normal 1pixel none
        wstr "$ts o $exno ~/aura/airy/cfg/wacom/ctl/change-output ,$def"
        wstr "$tod+m $exno ~/aura/airy/cfg/wacom/ctl/change-mode -q && \$upd wnd ,$def"
        wstr "$tod+s $exno ~/aura/airy/cfg/wacom/ctl/change-curve  ,$def"
    wmode_end "$mod+Insert"

wprf "\n### =================== System ===================== ###\n"
w_header "Mode: System"
msg_sys='<i3> : shu[t]down, [r]eboot, [l]ock | log[o]ut, [s]uspend, [h]ibernate | re[c]onf, re[n]ew, [e]xit'
    wmode_begin "$mCd+Delete" "$mSd+Escape" 'system' "$msg_sys"
        wlistf "$ts %s $exno ~/.i3/ext/i3exit %-9s ,$def" "l o s h r t" \
            lock logout suspend hibernate reboot shutdown
        wmapf "$ts %%1 $exno xbacklight -set %%10 ,$def" ${digits% *}
        # c - reload the configuration file
        # n - restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
        wlistf "$ts %s %s" "c n" reload restart
    wmode_end "$mCd+Delete" "$mSd+Escape"

wstr "$mSd+BackSpace restart"
wstr "$mSd+z $exno ~/.i3/ext/i3exit lock"


wprf "\n### ================== Launchers =================== ###\n"
# Autochoose filemng by OS version.
STD_FMG="pcmanfm"
command -v $STD_FMG >/dev/null 2>&1 || STD_FMG="nemo --no-desktop"

wstr "$mod+y $exno r.dict --vim"

w_header "Mode: Open"
m_open="<O>pen : [n]cmpcpp, [h]top | vim[b], [p]idgin, [f]irefox, <k>rita | [m]usic"
    wmode_begin "$mod+o" 'open' "$m_open"
        wlistf "$tod+%-5s $def, workspace number %s" "$wrkkey" $wrksps
        wlistf "$ts %s $eflo -e %s ,$def" "n h" \
            "ncmpcpp" "htop"
        wlistf "$ts %s $exno %s ,$def" "b p f m"  \
            "vimb" "pidgin" "firefox" "~/.mpd/move_current"
        wstr "$tod+k $exno ~/.i3/ctl/run-focus k ,$def"
        wstr "$tod+o mode \"\$mode_open_rare\""
    wmode_end

m_open="<Open> : [P]owertop, [t]lp | [g]vim, [F]m | (s)ound"
    wmode_begin 'open_rare' "$m_open"
        wlistf "$ts %s $eflo -e %s ,$def" "Shift+p t" \
            "gksudo powertop" "gksudo tlp start"
        wlistf "$ts %s $exno %s ,$def" "g Shift+f Control+s"  \
            "gvim" "$STD_FMG" \
            "/usr/lib/cinnamon-settings/cinnamon-settings.py sound"
    wmode_end "$mod+o"

w_header "Run: Prgs"
    wstr "$mod+u $eurx"  # Because it's urxvt!
    wstr "$mCd+u $exno ~/.i3/ctl/run-cwd"  # Run with cwd of current active window
    wstr "$mSd+u split vertical  , $eurx"
    wstr "$mCS+u split horizontal, $eurx"
    wstr "$mod+Return $eurx -e zsh -ic r.ranger"
    wstr "$mSd+Return $eflo -e r.ranger"
    wstr "$mCd+Return $eflo"
    wstr "$mCS+Return $eflo -e ipython -ic 'from pwn import *'"

w_header "Run: Menus"
    wstr "$mCd+d $exno j4-dmenu-desktop"    #ALT (slow): i3-dmenu-desktop
    wstr "$mod+d $exno r.dmenu"           #ALT (firm): dmenu_run
    wstr "$mSd+d $exno r.dmenu -n"      # Launch with notify on program's end
    wstr "$mod+Print $exno ~/.i3/ext/screenshot"


wprf "\n### ================= Multimedia =================== ###\n"
w_header "Control: copyq"
msg_copyq="Copyq: [e]dit, [o]pen, [m]enu | [a]ctive, [p]assive"
    wmode_begin "$mCd+x" 'copyq' "$msg_copyq"
        wlistf "$ts %s $exno copyq %s ,$def" "e o m a p" \
            edit toggle menu enable disable
        wmapf "$ts %%1 $exno copyq select %%1 ,$def" $digits
    wmode_end "$mCd+x"

w_header "Control: media-keys"
    # wstr "$bs XF86HomePage $exno xmind"
    wstr "$bs XF86Mail $eflo -e mutt"
    wstr "$bs XF86Search $exno r.vimb -p"
    wstr "$bs XF86Calculator $eflo -e ipython"  # '-ic from pwn import *'
    wstr "$bs XF86Sleep $exno xset -d :0 dpms force off"

w_header "\n" "Control: volume"
    wlistf "$mod+%-5s $exno ~/.i3/ext/volume %-3s" \
        "Home Prior Next End" 20% 2%+ 2%- " "
    wlistf "$bs %-20s $exno ~/.i3/ext/volume %-3s" \
        "XF86AudioRaiseVolume XF86AudioLowerVolume XF86AudioMute" \
        2%+ 2%- " "

w_header "Control: mpc / ncmpcpp"
    wstr "$bs XF86Tools ~/.i3/ext/floaty ncmpcpp"
    wlistf "$bs %s $exno mpc %-6s && \$upd mpd" \
        "XF86AudioPlay XF86AudioPause XF86AudioNext XF86AudioPrev XF86AudioStop" \
        toggle pause next prev stop
    wlistf "$mSd+%-5s $exno mpc %-6s && \$upd mpd" \
        "Home Prior Next End" toggle prev next "seek +5 >/dev/null"

if [ -n "$USE_LANG" ]; then
  w_header "Control: language"
      wlistf "$mSd+%s $exno ~/.i3/ext/lang %s" "$USE_LANG" ua ru us
fi

# w_header "Control: touchpad on/off"
#   wlistf "$mod+%s $exno synclient TouchpadOff=%s" "p Shift+p" 1 0
#   bindsym XF86TouchpadToggle exec "synclient TouchpadOff=$(synclient | awk
#   '/TouchpadOff/ {print ($3+1)%2}')"
#   bindsym XF86AudioMicMute exec "amixer -D pulse sset Capture toggle"


wprf "\n### =================== Windows ==================== ###\n"
w_header "Windows: Assigning"
    wstr 'assign [title="^Win7hdd"] $w10'
    wlistf 'assign [class="^%%2"] %%1' '$w04 $w04 $w05 $w09 $w08' \
        Firefox Pale\ moon Krita Steam t-engine64

## WARNING: There is no reason to use wlistf as options are too different.
w_header "Windows: Settings"
    # How to launch in floating regime? Simply create window with name starting with Float*.
    # floating enable running before launching of exec, so influence on previous focused wndw
    wstr 'for_window [class="^Conky"] border none'
    wstr 'for_window [class="^t-engine64"] border none'
    wstr 'for_window [instance="feh"] fullscreen'
    wstr 'for_window [title="^ElonaPlus"] fullscreen'
    wstr ''
    wmapf 'for_window [%s] floating enable, border pixel 3' \
        'window_role="pop-up"' 'class="^copyq" instance="^copyq"' \
        'class="^Firefox" instance="^Download"' 'class="^Transmission-gtk"' \
        'class="^Pidgin"' 'class="^Skype"' \
        'instance="^PlayOnLinux"' \
        'class="(?i)'"$term"'" instance="(?i)^Float*"'

    # wstr 'for_window [class="^Pidgin" title="Buddy List"] move scratchpad'
    wstr 'for_window [title="^Transmission" class="^Transmission-gtk" instance="^transmission-gtk"] move scratchpad'
    wstr 'for_window [class="^piony.py"] floating enable, border pixel 5'



wprf "\n### ================== Bar & Theme ================= ###\n"
# (dzen2, xmobar, maybe even gnome-panel?),
# you can just remove the i3bar configuration and start your favorite bar instead.

    # You can restrict i3bar to one or more outputs (monitors). The default is to handle all outputs.
    # Restricting the outputs is useful for using different options for different outputs by using multiple bar blocks.
    # You could specify many times 'output <output>' to duplicate in multiple monitors
    # LVDS1 - laptop, HDMI2, DP2 - DisplayPort, DFP3|DFP4
    #output            LVDS1
    #none if lxpanel
    #tray_output         primary   # <none|primary|output>

    # Needs to be generated
    # https://github.com/ultrabug/py3status
    # https://github.com/sardemff7/j4status
    #status_command conky -c ~/.i3/i3conky.conf | dzen2 -h '17' -w '600' -x '1317' -y '1062' -bg '#000000' -ta 'rm'
    #status_command conky -c ~/.i3/i3conky.conf | dzen2 -h '18' -w '600' -x '766' -y '751' -bg '#000000' -ta 'rm'
    #status_command    i3status --config ~/.i3/i3status.conf
    #status_command sh ~/bin/.conkyi3.sh

    #error: binding_mode_indicator yes
    # hide - hidden and is only unhidden in case of urgency hints or by pressing the modifier key
    # show - it is drawn on top of the currently visible workspace
    #error: hidden_state        hide    # <hide|show>


#~/.i3/i3status.sh
wstr "$wndtheme
bar {
    id                  bar-main # Specifies the bar ID for the configured bar instance (if many)
    mode                dock     # <dock|hide|invisible>
    position            bottom   # <top|bottom>
    workspace_buttons   yes
    status_command      i3blocks -c ~/.i3/i3blocks.conf
    modifier            \$mod
$bartheme}
"

# wstr "$wndtheme
# bar {
#     id                  bar-dbg
#     mode                dock     # <dock|hide|invisible>
#     position            top   # <top|bottom>
#     workspace_buttons   yes
#     status_command      conky -c ~/.i3/#/i3conky.conf | dzen2 -h '18' -w '600' -x '766' -y '751' -bg '#000000' -ta 'rm'
#     modifier            \$mod
# $bartheme}
# "

echo "W: $dst"

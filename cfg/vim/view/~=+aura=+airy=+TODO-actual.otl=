let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
map <buffer> <silent>  
map <buffer> <silent>  
nmap <buffer> <silent> ,,e :call Spawn()
nmap <buffer> <silent> ,,1 :set foldlevel=0
xmap <buffer> <silent> ,,1 :set foldlevel=0
omap <buffer> <silent> ,,1 :set foldlevel=0
nmap <buffer> <silent> ,,2 :set foldlevel=1
xmap <buffer> <silent> ,,2 :set foldlevel=1
omap <buffer> <silent> ,,2 :set foldlevel=1
nmap <buffer> <silent> ,,3 :set foldlevel=2
xmap <buffer> <silent> ,,3 :set foldlevel=2
omap <buffer> <silent> ,,3 :set foldlevel=2
nmap <buffer> <silent> ,,4 :set foldlevel=3
xmap <buffer> <silent> ,,4 :set foldlevel=3
omap <buffer> <silent> ,,4 :set foldlevel=3
nmap <buffer> <silent> ,,5 :set foldlevel=4
xmap <buffer> <silent> ,,5 :set foldlevel=4
omap <buffer> <silent> ,,5 :set foldlevel=4
nmap <buffer> <silent> ,,6 :set foldlevel=5
xmap <buffer> <silent> ,,6 :set foldlevel=5
omap <buffer> <silent> ,,6 :set foldlevel=5
nmap <buffer> <silent> ,,7 :set foldlevel=6
xmap <buffer> <silent> ,,7 :set foldlevel=6
omap <buffer> <silent> ,,7 :set foldlevel=6
nmap <buffer> <silent> ,,8 :set foldlevel=7
xmap <buffer> <silent> ,,8 :set foldlevel=7
omap <buffer> <silent> ,,8 :set foldlevel=7
nmap <buffer> <silent> ,,9 :set foldlevel=8
xmap <buffer> <silent> ,,9 :set foldlevel=8
omap <buffer> <silent> ,,9 :set foldlevel=8
nmap <buffer> <silent> ,,0 :set foldlevel=99999
xmap <buffer> <silent> ,,0 :set foldlevel=99999
omap <buffer> <silent> ,,0 :set foldlevel=99999
nmap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
xmap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
omap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
nmap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
xmap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
omap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> <silent> ,,- o----------------------------------------<F14>
xmap <buffer> <silent> ,,- o----------------------------------------<F14>
omap <buffer> <silent> ,,- o----------------------------------------<F14>
nmap <buffer> <silent> ,,f :e .
xmap <buffer> <silent> ,,f :e .
omap <buffer> <silent> ,,f :e .
nmap <buffer> <silent> ,,S :silent call SortChildren(1)
xmap <buffer> <silent> ,,S :silent call SortChildren(1)
omap <buffer> <silent> ,,S :silent call SortChildren(1)
nmap <buffer> <silent> ,,s :silent call SortChildren(0)
xmap <buffer> <silent> ,,s :silent call SortChildren(0)
omap <buffer> <silent> ,,s :silent call SortChildren(0)
nmap <buffer> <silent> ,,T ^:call InsertTime(1)a 
nmap <buffer> <silent> ,,t $:call InsertSpaceTime()
nmap <buffer> <silent> ,,D ^:call InsertDate(1)a 
nmap <buffer> <silent> ,,d $:call InsertSpaceDate()
nmap <buffer> <silent> ,,l <Plug>VO_CreateLink
xmap <buffer> <silent> ,,l <Plug>VO_CreateLink
omap <buffer> <silent> ,,l <Plug>VO_CreateLink
nnoremap <buffer> <silent> ,,cT :call SetNextList()
xnoremap <buffer> <silent> ,,cT :call SetNextList()
onoremap <buffer> <silent> ,,cT :call SetNextList()
nnoremap <buffer> <silent> ,,ct :call SetNextTag()
xnoremap <buffer> <silent> ,,ct :call SetNextTag()
onoremap <buffer> <silent> ,,ct :call SetNextTag()
nnoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
xnoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
onoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
nnoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
xnoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
onoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
nnoremap <buffer> <silent> ,,cB :call InsertCheckBox()
xnoremap <buffer> <silent> ,,cB :call InsertCheckBox()
onoremap <buffer> <silent> ,,cB :call InsertCheckBox()
nnoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
xnoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
onoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
nnoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
xnoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
onoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
nnoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
xnoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
onoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
imap <buffer> <silent> –±—à—ñ :IHS:A
imap <buffer> <silent> –±—à—Ä :IHS
imap <buffer> <silent> –±—à—ã :IHS:A
imap <buffer> <silent> –±—à—Ä—Ç :IHN
imap <buffer> <silent> –±–±–¥ <Plug>VO_CreateLinkI
imap <buffer> <silent> –±–±–≤ ~x:call InsertDate(0)a
imap <buffer> <silent> –±–±–µ ~x:call InsertTime(0)a
imap <buffer> <silent> –±–±–∞ :e .
imap <buffer> <silent> –±–±- ----------------------------------------
imap <buffer> <silent> –±–±—Ü :wa
nmap <buffer> P ]P
xmap <buffer> P ]P
omap <buffer> P ]P
nmap <buffer> \\d :call VOcut()
xmap <buffer> \\d :call VOcut()
omap <buffer> \\d :call VOcut()
nmap <buffer> \\r :call VOreg()
xmap <buffer> \\r :call VOreg()
omap <buffer> \\r :call VOreg()
nmap <buffer> \\y :call VOcop()
xmap <buffer> \\y :call VOcop()
omap <buffer> \\y :call VOcop()
nmap <buffer> \\b :call VOputreg()
xmap <buffer> \\b :call VOputreg()
omap <buffer> \\b :call VOputreg()
nmap <buffer> p :call VOput()
xmap <buffer> p :call VOput()
omap <buffer> p :call VOput()
imap <buffer>  <Plug>(marching_force_start_omni_complete)
imap <buffer>  <Plug>(marching_start_omni_complete)
inoremap <buffer> <silent> <expr> —Ö200' XTermPasteBegin()
inoremap <buffer> <silent> <expr> —Ö200–Å XTermPasteBegin()
imap <buffer> <silent> —ñ <Plug>TComment_s
imap <buffer> <silent> –∑ <Plug>TComment_p
imap <buffer> <silent> –∫ <Plug>TComment_r
imap <buffer> <silent> —à <Plug>TComment_i
imap <buffer> <silent> –∏ <Plug>TComment_b
imap <buffer> <silent> —Ñ <Plug>TComment_a
imap <buffer> <silent> —Ç <Plug>TComment_n
imap <buffer> <silent> —ã <Plug>TComment_s
lnoremap <buffer> " –≠
lnoremap <buffer> # ‚Ññ
lnoremap <buffer> $ ;
lnoremap <buffer> & ?
lnoremap <buffer> ' —ç
map! <buffer> <silent> ,,w :wa
imap <buffer> <silent> ,,- ----------------------------------------
imap <buffer> <silent> ,,f :e .
imap <buffer> <silent> ,,t ~x:call InsertTime(0)a
imap <buffer> <silent> ,,d ~x:call InsertDate(0)a
imap <buffer> <silent> ,,l <Plug>VO_CreateLinkI
lnoremap <buffer> , –±
lnoremap <buffer> . —é
lnoremap <buffer> / .
lnoremap <buffer> : –ñ
lnoremap <buffer> ; –∂
lnoremap <buffer> < –ë
lnoremap <buffer> > –Æ
lnoremap <buffer> ? ,
lnoremap <buffer> @ "
lnoremap <buffer> A –§
lnoremap <buffer> B –ò
lnoremap <buffer> C –°
lnoremap <buffer> D –í
lnoremap <buffer> E –£
lnoremap <buffer> F –ê
lnoremap <buffer> G –ü
lnoremap <buffer> H –†
lnoremap <buffer> I –®
lnoremap <buffer> J –û
lnoremap <buffer> K –õ
lnoremap <buffer> L –î
lnoremap <buffer> M –¨
lnoremap <buffer> N –¢
lnoremap <buffer> O –©
lnoremap <buffer> P –ó
lnoremap <buffer> Q –ô
lnoremap <buffer> R –ö
lnoremap <buffer> S –´
lnoremap <buffer> T –ï
lnoremap <buffer> U –ì
lnoremap <buffer> V –ú
lnoremap <buffer> W –¶
lnoremap <buffer> X –ß
lnoremap <buffer> Y –ù
lnoremap <buffer> Z –Ø
lnoremap <buffer> [ —Ö
lnoremap <buffer> ] —ä
lnoremap <buffer> ^ :
lnoremap <buffer> ` —ë
lnoremap <buffer> a —Ñ
lnoremap <buffer> b –∏
lnoremap <buffer> c —Å
lnoremap <buffer> d –≤
lnoremap <buffer> e —É
lnoremap <buffer> f –∞
lnoremap <buffer> g –ø
lnoremap <buffer> h —Ä
lnoremap <buffer> i —à
lnoremap <buffer> j –æ
lnoremap <buffer> k –ª
lnoremap <buffer> l –¥
lnoremap <buffer> m —å
lnoremap <buffer> n —Ç
lnoremap <buffer> o —â
lnoremap <buffer> p –∑
lnoremap <buffer> q –π
lnoremap <buffer> r –∫
lnoremap <buffer> s —ã
lnoremap <buffer> t –µ
lnoremap <buffer> u –≥
lnoremap <buffer> v –º
lnoremap <buffer> w —Ü
lnoremap <buffer> x —á
lnoremap <buffer> y –Ω
lnoremap <buffer> z —è
lnoremap <buffer> { –•
lnoremap <buffer> } –™
lnoremap <buffer> ~ –Å
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=russian-jcukenwin
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=+1
setlocal comments=sO::\ -,mO::\ \ ,eO:::,::,sO:>\ -,mO:>\ \ ,eO:>>,:>
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=cv
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'votl'
setlocal filetype=votl
endif
setlocal foldcolumn=1
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=20
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=jlcrqno
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,39,45,48-57,_,129-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'votl'
setlocal syntax=votl
endif
setlocal tabstop=4
setlocal tags=~/.vim/vimoutliner/vo_tags.tag,./tags,./TAGS,tags,TAGS
setlocal textwidth=78
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=5
silent! normal! zE
3,6fold
7,10fold
14,15fold
11,15fold
16,18fold
19,22fold
23,24fold
25,33fold
34,35fold
37,37fold
36,37fold
46,46fold
50,50fold
48,50fold
52,53fold
44,53fold
62,65fold
56,65fold
68,69fold
70,71fold
2,72fold
75,79fold
80,82fold
84,84fold
83,84fold
85,88fold
89,90fold
91,94fold
96,98fold
100,101fold
99,102fold
103,105fold
107,109fold
110,111fold
74,111fold
119,120fold
121,122fold
116,122fold
125,126fold
127,129fold
131,135fold
139,140fold
142,142fold
141,142fold
124,143fold
145,148fold
150,153fold
155,159fold
161,162fold
167,167fold
166,167fold
164,168fold
172,172fold
170,172fold
174,179fold
186,187fold
188,190fold
185,190fold
182,190fold
193,196fold
198,199fold
201,201fold
203,204fold
205,206fold
200,209fold
192,209fold
211,213fold
215,216fold
2
normal! zo
164
normal! zo
166
normal! zo
let s:l = 10 - ((9 * winheight(0) + 19) / 38)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
10
normal! 054|
lcd ~/aura/airy
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :

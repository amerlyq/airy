let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
map <buffer> <silent>  <Plug>VO_FollowLink
map <buffer> <silent>  <Plug>VO_JumpBack
nmap <buffer> <silent> ,,hD :call DeHoistAll()
xmap <buffer> <silent> ,,hD :call DeHoistAll()
omap <buffer> <silent> ,,hD :call DeHoistAll()
nmap <buffer> <silent> ,,hd :call DeHoist()
xmap <buffer> <silent> ,,hd :call DeHoist()
omap <buffer> <silent> ,,hd :call DeHoist()
nmap <buffer> <silent> ,,hh :call Hoist(line("."))
xmap <buffer> <silent> ,,hh :call Hoist(line("."))
omap <buffer> <silent> ,,hh :call Hoist(line("."))
nmap <buffer> <silent> ,,l <Plug>VO_CreateLink
xmap <buffer> <silent> ,,l <Plug>VO_CreateLink
omap <buffer> <silent> ,,l <Plug>VO_CreateLink
nnoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
xnoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
onoremap <buffer> <silent> ,,cz :call NewHMD(FindRootParent(line(".")))
nnoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c9 :call SetPercent(".",90)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c8 :call SetPercent(".",80)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c7 :call SetPercent(".",70)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c6 :call SetPercent(".",60)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c5 :call SetPercent(".",50)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c4 :call SetPercent(".",40)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c3 :call SetPercent(".",30)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c2 :call SetPercent(".",20)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
xnoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
onoremap <buffer> <silent> ,,c1 :call SetPercent(".",10)|call CalculateMyBranch(line('.'))
nnoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,c- :call DecPercent(".")   |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,c+ :call IncPercent(".")   |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
xnoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
onoremap <buffer> <silent> ,,cx :call SwitchBox()       |call CalculateMyBranch(line("."))
nnoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
xnoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
onoremap <buffer> <silent> ,,cd :call DeleteCheckbox()
nnoremap <buffer> <silent> ,,cB :call InsertCheckBox()
xnoremap <buffer> <silent> ,,cB :call InsertCheckBox()
onoremap <buffer> <silent> ,,cB :call InsertCheckBox()
nnoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
xnoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
onoremap <buffer> <silent> ,,cp :call SafelyInsertCheckBoxPercentAlways()
nnoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
xnoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
onoremap <buffer> <silent> ,,c% :call SafelyInsertCheckBoxPercent()
nnoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
xnoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
onoremap <buffer> <silent> ,,cb :call SafelyInsertCheckBox()
nmap <buffer> <silent> ,,H :echo "VimOutliner reserved command: ,,H"
xmap <buffer> <silent> ,,H :echo "VimOutliner reserved command: ,,H"
omap <buffer> <silent> ,,H :echo "VimOutliner reserved command: ,,H"
nmap <buffer> <silent> ,,h :echo "VimOutliner reserved command: ,,h"
xmap <buffer> <silent> ,,h :echo "VimOutliner reserved command: ,,h"
omap <buffer> <silent> ,,h :echo "VimOutliner reserved command: ,,h"
nmap <buffer> <silent> ,,e :call Spawn()
nmap <buffer> <silent> ,,,, :runtime vimoutliner/vimoutlinerrc
xmap <buffer> <silent> ,,,, :runtime vimoutliner/vimoutlinerrc
omap <buffer> <silent> ,,,, :runtime vimoutliner/vimoutlinerrc
nmap <buffer> <silent> ,,1 :set foldlevel=0
xmap <buffer> <silent> ,,1 :set foldlevel=0
omap <buffer> <silent> ,,1 :set foldlevel=0
nmap <buffer> <silent> ,,2 :set foldlevel=1
xmap <buffer> <silent> ,,2 :set foldlevel=1
omap <buffer> <silent> ,,2 :set foldlevel=1
nmap <buffer> <silent> ,,3 :set foldlevel=2
xmap <buffer> <silent> ,,3 :set foldlevel=2
omap <buffer> <silent> ,,3 :set foldlevel=2
nmap <buffer> <silent> ,,4 :set foldlevel=3
xmap <buffer> <silent> ,,4 :set foldlevel=3
omap <buffer> <silent> ,,4 :set foldlevel=3
nmap <buffer> <silent> ,,5 :set foldlevel=4
xmap <buffer> <silent> ,,5 :set foldlevel=4
omap <buffer> <silent> ,,5 :set foldlevel=4
nmap <buffer> <silent> ,,6 :set foldlevel=5
xmap <buffer> <silent> ,,6 :set foldlevel=5
omap <buffer> <silent> ,,6 :set foldlevel=5
nmap <buffer> <silent> ,,7 :set foldlevel=6
xmap <buffer> <silent> ,,7 :set foldlevel=6
omap <buffer> <silent> ,,7 :set foldlevel=6
nmap <buffer> <silent> ,,8 :set foldlevel=7
xmap <buffer> <silent> ,,8 :set foldlevel=7
omap <buffer> <silent> ,,8 :set foldlevel=7
nmap <buffer> <silent> ,,9 :set foldlevel=8
xmap <buffer> <silent> ,,9 :set foldlevel=8
omap <buffer> <silent> ,,9 :set foldlevel=8
nmap <buffer> <silent> ,,0 :set foldlevel=99999
xmap <buffer> <silent> ,,0 :set foldlevel=99999
omap <buffer> <silent> ,,0 :set foldlevel=99999
nmap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
xmap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
omap <buffer> <silent> ,,B :%s/\(^\t*\):/\1/e:let @/=""
nmap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
xmap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
omap <buffer> <silent> ,,b :%s/\(^\t*\):/\1/e:%s/\(^\t*\) /\1: /e:let @/=""
nmap <buffer> <silent> ,,- o----------------------------------------<¬∞>
xmap <buffer> <silent> ,,- o----------------------------------------<¬∞>
omap <buffer> <silent> ,,- o----------------------------------------<¬∞>
nmap <buffer> <silent> ,,f :e .
xmap <buffer> <silent> ,,f :e .
omap <buffer> <silent> ,,f :e .
nmap <buffer> <silent> ,,S :silent call SortChildren(1)
xmap <buffer> <silent> ,,S :silent call SortChildren(1)
omap <buffer> <silent> ,,S :silent call SortChildren(1)
nmap <buffer> <silent> ,,s :silent call SortChildren(0)
xmap <buffer> <silent> ,,s :silent call SortChildren(0)
omap <buffer> <silent> ,,s :silent call SortChildren(0)
nmap <buffer> <silent> ,,T ^:call InsertTime(1)a 
nmap <buffer> <silent> ,,t $:call InsertSpaceTime()
nmap <buffer> <silent> ,,D ^:call InsertDate(1)a 
nmap <buffer> <silent> ,,d $:call InsertSpaceDate()
imap <buffer> <silent> –±–±–≤ ~x:call InsertDate(0)a
imap <buffer> <silent> –±–±–µ ~x:call InsertTime(0)a
imap <buffer> <silent> –±–±–∞ :e .
imap <buffer> <silent> –±–±- ----------------------------------------
imap <buffer> <silent> –±–±—Ü :wa
imap <buffer> <silent> –±–±—Ä :echo "VimOutliner reserved command: ,,h"
imap <buffer> <silent> –±–±–† :echo "VimOutliner reserved command: ,,H"
imap <buffer> <silent> –±–±–¥ <Plug>VO_CreateLinkI
nmap <buffer> P ]P
xmap <buffer> P ]P
omap <buffer> P ]P
nmap <buffer> \\d :call VOcut()
xmap <buffer> \\d :call VOcut()
omap <buffer> \\d :call VOcut()
nmap <buffer> \\r :call VOreg()
xmap <buffer> \\r :call VOreg()
omap <buffer> \\r :call VOreg()
nmap <buffer> \\y :call VOcop()
xmap <buffer> \\y :call VOcop()
omap <buffer> \\y :call VOcop()
nmap <buffer> \\b :call VOputreg()
xmap <buffer> \\b :call VOputreg()
omap <buffer> \\b :call VOputreg()
nmap <buffer> p :call VOput()
xmap <buffer> p :call VOput()
omap <buffer> p :call VOput()
imap <buffer>  <Plug>(marching_force_start_omni_complete)
imap <buffer>  <Plug>(marching_start_omni_complete)
inoremap <buffer> <silent> <expr> —Ö200' XTermPasteBegin()
inoremap <buffer> <silent> <expr> —Ö200–Å XTermPasteBegin()
imap <buffer> <silent> —ñ <Plug>TComment-s
imap <buffer> <silent> –∑ <Plug>TComment-p
imap <buffer> <silent> –∫ <Plug>TComment-r
imap <buffer> <silent> —à <Plug>TComment-i
imap <buffer> <silent> –∏ <Plug>TComment-b
imap <buffer> <silent> —Ñ <Plug>TComment-a
imap <buffer> <silent> —Ç <Plug>TComment-n
imap <buffer> <silent> —ã <Plug>TComment-s
lnoremap <buffer> " –≠
lnoremap <buffer> # ‚Ññ
lnoremap <buffer> $ ;
lnoremap <buffer> & ?
lnoremap <buffer> ' —ç
imap <buffer> <silent> ,,l <Plug>VO_CreateLinkI
imap <buffer> <silent> ,,H :echo "VimOutliner reserved command: ,,H"
imap <buffer> <silent> ,,h :echo "VimOutliner reserved command: ,,h"
map! <buffer> <silent> ,,w :wa
imap <buffer> <silent> ,,- ----------------------------------------
imap <buffer> <silent> ,,f :e .
imap <buffer> <silent> ,,t ~x:call InsertTime(0)a
imap <buffer> <silent> ,,d ~x:call InsertDate(0)a
lnoremap <buffer> , –±
lnoremap <buffer> . —é
lnoremap <buffer> / .
lnoremap <buffer> : –ñ
lnoremap <buffer> ; –∂
lnoremap <buffer> < –ë
lnoremap <buffer> > –Æ
lnoremap <buffer> ? ,
lnoremap <buffer> @ "
lnoremap <buffer> A –§
lnoremap <buffer> B –ò
lnoremap <buffer> C –°
lnoremap <buffer> D –í
lnoremap <buffer> E –£
lnoremap <buffer> F –ê
lnoremap <buffer> G –ü
lnoremap <buffer> H –†
lnoremap <buffer> I –®
lnoremap <buffer> J –û
lnoremap <buffer> K –õ
lnoremap <buffer> L –î
lnoremap <buffer> M –¨
lnoremap <buffer> N –¢
lnoremap <buffer> O –©
lnoremap <buffer> P –ó
lnoremap <buffer> Q –ô
lnoremap <buffer> R –ö
lnoremap <buffer> S –´
lnoremap <buffer> T –ï
lnoremap <buffer> U –ì
lnoremap <buffer> V –ú
lnoremap <buffer> W –¶
lnoremap <buffer> X –ß
lnoremap <buffer> Y –ù
lnoremap <buffer> Z –Ø
lnoremap <buffer> [ —Ö
imap <buffer> <silent> \—à—ñ :IHS:A
imap <buffer> <silent> \—à—Ä :IHS
imap <buffer> <silent> \—à—ã :IHS:A
imap <buffer> <silent> \—à—Ä—Ç :IHN
lnoremap <buffer> ] —ä
lnoremap <buffer> ^ :
lnoremap <buffer> ` —ë
lnoremap <buffer> a —Ñ
lnoremap <buffer> b –∏
lnoremap <buffer> c —Å
lnoremap <buffer> d –≤
lnoremap <buffer> e —É
lnoremap <buffer> f –∞
lnoremap <buffer> g –ø
lnoremap <buffer> h —Ä
lnoremap <buffer> i —à
lnoremap <buffer> j –æ
lnoremap <buffer> k –ª
lnoremap <buffer> l –¥
lnoremap <buffer> m —å
lnoremap <buffer> n —Ç
lnoremap <buffer> o —â
lnoremap <buffer> p –∑
lnoremap <buffer> q –π
lnoremap <buffer> r –∫
lnoremap <buffer> s —ã
lnoremap <buffer> t –µ
lnoremap <buffer> u –≥
lnoremap <buffer> v –º
lnoremap <buffer> w —Ü
lnoremap <buffer> x —á
lnoremap <buffer> y –Ω
lnoremap <buffer> z —è
lnoremap <buffer> { –•
lnoremap <buffer> } –™
lnoremap <buffer> ~ –Å
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=russian-jcukenwin
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=+1
setlocal comments=sO::\ -,mO::\ \ ,eO:::,::,sO:>\ -,mO:>\ \ ,eO:>>,:>
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=cv
setlocal conceallevel=2
setlocal completefunc=neocomplete#complete#auto_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'votl'
setlocal filetype=votl
endif
setlocal foldcolumn=1
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=99
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=jlcrqno
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,39,45,48-57,_,129-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'votl'
setlocal syntax=votl
endif
setlocal tabstop=4
setlocal tags=~/.vim/vimoutliner/vo_tags.tag,./tags,./TAGS,tags,TAGS
setlocal textwidth=78
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal nowrap
setlocal wrapmargin=5
silent! normal! zE
9,11fold
1,12fold
16,16fold
28,28fold
29,34fold
36,42fold
44,50fold
52,58fold
60,68fold
70,76fold
78,90fold
92,106fold
108,116fold
118,126fold
129,129fold
131,138fold
140,147fold
149,155fold
157,163fold
165,171fold
173,181fold
183,189fold
191,203fold
205,219fold
221,229fold
231,239fold
242,242fold
244,250fold
252,264fold
267,267fold
269,275fold
277,283fold
285,293fold
295,301fold
303,309fold
311,317fold
319,325fold
327,335fold
337,349fold
352,352fold
354,362fold
364,376fold
378,386fold
388,394fold
396,402fold
404,410fold
412,418fold
420,427fold
429,435fold
438,438fold
440,448fold
450,456fold
458,464fold
466,472fold
474,480fold
482,489fold
491,498fold
1
normal! zo
let s:l = 451 - ((28 * winheight(0) + 27) / 55)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
451
normal! 05|
lcd ~/share/docs/rim_docs/ThrModel
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :

" vim:ts=2:sw=2:sts=2:fdm=marker:fdl=1
set nocompatible
set fileformats=unix,dos,mac

if has("multi_byte")
  if &termencoding == "" | let &termencoding = &encoding | endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=utf-8,cp1251,cp866
endif

if has("unix") | language messages C | else "elseif
    language messages en_US.UTF-8 "C, en, en_US, en_US.UTF-8
    "set langmenu=en_US.UTF-8
    " Window size
    set lines=32
    set columns=112
endif

"================ Windows ====================== {{{1
" Make $VIMHOME point to .vimrc location independent of OS
let $VIMHOME=$HOME . '/.vim'
if has('win32') || has('win64')
" Fix the path of vimrc and gvimrc for Windows
  let $MYVIMRC=$VIMHOME . '/vimrc'
  let $MYGVIMRC=$VIMHOME . '/gvimrc'
  cd d:\
endif

"============= Vim dirs structure ============== {{{1
" Backup, undo, swap, etc
" The '//' at directory end: use full path for filename with '%' separators
" let $CACHE=$XDG_CACHE_HOME . '/vim'
let $CACHE=$HOME . '/.cache/vim'
set backupdir=$CACHE/bckpdir//,~/.tmp,/var/tmp,/tmp
set directory=$CACHE/swapdir//,~/.tmp,/var/tmp,/tmp
" backup current file, not deleted afterwards: you need free space!
set backup writebackup backupcopy=auto swapfile
set viminfo+=n$CACHE/.viminfo
" for v:version >= 703
set undodir=$CACHE/undodir//
set undofile


let g:netrw_home=$CACHE
" let g:netrw_dirhistmax = 0
" The Vim Netrw plugin allows one to view the contents of an http hyperlink via CTRL-W_CTRL-F
" launch as $ agent tempfile url -- See: https://github.com/danchoi/elinks.vim
let g:netrw_http_cmd = "elinks-for-vim"


let $BUNDLES=expand('$CACHE/bundle/')
let cdirs = ['bundle', 'bckpdir', 'swapdir', 'undodir', 'easytags.d']
for nm in cdirs
  if !isdirectory(expand('$CACHE/' . nm))
    call mkdir(expand('$CACHE/' . nm), 'p')
  endif
endfor

"================ Neobundle ==================== {{{1
" Install neobundle if it doesn't exist
let $NEOBUNDLE=expand('$BUNDLES/neobundle.vim')
if !filereadable(expand('$NEOBUNDLE/README.md'))
    echom 'NeoBundle not found. Installing...'
    let neobundle='https://github.com/Shougo/neobundle.vim'
    silent exec '!git clone --depth=1 '.neobundle $NEOBUNDLE
endif

if has ('vim_starting')
  set runtimepath+=$NEOBUNDLE
  set runtimepath+=$VIMHOME
endif

let g:neobundle#types#git#default_protocol = 'git'  " OR: https, ssh
let g:neobundle#types#git#clone_depth = 1   "shallow copy
let g:neobundle#types#git#enable_submodule = 1

call neobundle#begin(expand('$BUNDLES/'))
  " Let NeoBundle manage NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim'
    source $VIMHOME/plugins.vim
call neobundle#end()

filetype plugin indent on  " Required!
NeoBundleCheck  " Checks and installs all not installed bundles

if !has('vim_starting')
  " Call on_source hook when reloading .vimrc.
  call neobundle#call_hook('on_source')
endif

"================ Configuration ================ {{{1
runtime! bundle/*.vim cfg/*.vim ext/*.vim

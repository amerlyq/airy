# vim: ft=zsh:ts=2:sw=2:sts=2
# @ref: MIT, (c) amerlyq, 2015
# SEE: https://github.com/zsh-users/zsh/blob/master/Misc/vcs_info-examples
#     http://eseth.org/2010/hg-in-zsh.html
# DEV https://github.com/whiteinge/dotfiles/blob/master/.zsh_shouse_prompt

# Features:
#   - two-line theme to separate cmds output easily
#   - pwd full/shrank/name-only depending on term width
#     (I like to see full pathes, having many similarly named directories)
#   - git icons placed close to input for
#       (clean state is needless -- you will see branch/hash)
#   - line color as environment indicator
#   - line shape as root indicator
#   - indicators for vim/emacs editing mods
#   - non-intrusive time stamp for logging cmd execution
#   - non-intrusive ssh user@host
#   - indicators for launching from vim/ranger
#   - last command exit code
# Integrated:
#   - async preparing of git_info by sorin
#       (fast prompt displaying in git projects, even on cold systems)
#   - msg "elapsed time" for long running cmds by paradox
#       (consumes very little resources, useful for building projects, or statistics for interactive programs)
# Seized: agnoster, cloud, damoekri, giddie, minimal, nicoulaj, paradox,
#   peepcode, powerline (moved into script), pure, skwp, smiley, steeef
# Screenshot:
#   TODO: http://i.imgur.com/

# Load dependencies.
pmodload 'helper'

## Repetition number specifier
# zmv -n '(**/)(*)' '$1${2//-[A-Za-z0-9]##\./.}'
# zmv -n '(**/)(*)' '$1${2//-[A-Za-z0-9](#c32)/}'

# First time this function don't work, because right part isn't appeared yet
function prompt_amer_pwd {
  local ppwd="${PWD/#$HOME/~}"
  local strip_patt="%[Bbf]|%F{[0-9a-z]##}"
  local sfx="${git_info[details]}${vcs_info_msg_1_}"
  sfx="${(S)sfx//${~strip_patt}}"
  ## ALT Strip color codes
  # sfx=$(print -P ${git_info[details]}${vcs_info_msg_1_} | sed 's/\x1b\[[0-9;]*m//g')
  local wth=$(($COLUMNS - 6 - $#sfx))  # Drop prompt parts before and after path

  if [[ "$ppwd" == (#m)[/~] ]]; then  ## Keep first char '/' or '~' in path
    _prompt_amer_pwd="$MATCH"
    unset MATCH
  else
    ppwd="${${ppwd%/}//\%/%%}"
    [[ $#ppwd -ge $wth ]] && ppwd="${${(@j:/:M)${(@s:/:)ppwd}##.#?}:h}/${ppwd:t}"
    [[ $#ppwd -ge $wth ]] && ppwd="%$wth>…>…/${ppwd:t}%<<"
    _prompt_amer_pwd="$ppwd"
  fi
}

function prompt_amer_source_data {
  if [[ -s "$1" ]]; then
    alias typeset='typeset -g'
    source "$1"
    # RPROMPT+='${git_info:+${(e)git_info[icons]}}'
    unalias typeset
  fi
}

function prompt_amer_update {
  # Append Git status.
  prompt_amer_source_data "${_prompt_amer_data_pref}-git"
  prompt_amer_source_data "${_prompt_amer_data_pref}-vcs"

  # Reset PID.
  _prompt_amer_precmd_async_pid=0

  # Redisplay prompt.
  # prompt_amer_pwd
  zle && zle reset-prompt
}

function prompt_amer_format_time {
  local dt=$1 total="" color=3
  local seconds=$(( dt % 60 ))
  local minutes=$(( (dt /= 60) % 60 ))
  local hours=$(( (dt /= 60) % 24 ))
  local days=$(( dt / 24 ))
  if (( $days > 0 )); then total+="${days}d"; color=9; fi
  if (( $hours > 0 )); then total+="${hours}h"; color=13; fi
  if (( $minutes > 0 )); then total+="${minutes}m"; color=1; fi
  print -P "%F{$color}${total}${seconds}s"
}

# ============================================ #

function prompt_amer_preexec {
  _prompt_amer_start_time="$SECONDS"
}

function prompt_amer_async_git {
  if (( $+functions[git-info] )); then
    git-info
    typeset -p git_info >! "${_prompt_amer_data_pref}-git"
  fi
  kill -USR1 $$  ## Signal completion to parent process.
}

# All other VCS beside git (truncated info)
function prompt_amer_async_vcs {
  if (( $+functions[vcs_info] )); then
    vcs_info 'prompt'
    typeset -p vcs_info_msg_0_ vcs_info_msg_1_ >! "${_prompt_amer_data_pref}-vcs"
  fi
  kill -USR1 $$
}

# function prompt_amer_async_env {
#   # Get Python environment information.
#   if (( $+functions[python-info] )); then
#     python-info
#   fi

#   # Get Ruby version information.
#   if (( $+functions[ruby-info] )); then
#     ruby-info
#   fi

#   # Signal completion to parent process.
#   kill -USR1 $$
# }

function prompt_amer_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  # ERROR: two times for calling git and hg statuses
  prompt_amer_pwd

  # Define prompts. Actual for git? Why it was here and not in _setup?
  # RPROMPT[1,0]='${editor_info[overwrite]} %(?:: %F{1}%?↵ %f)'  # Prepend

  # Calculate and print the elapsed time.
  local dt=$(( SECONDS - _prompt_amer_start_time ))
  if (( dt > 10 )); then
    local hdt="$(prompt_amer_format_time ${dt})"
    print -P "%B%F{10}>>> elapsed time: ${hdt}%f%b"
  fi

  # Kill the old process of slow commands if it is still running.
  if (( _prompt_amer_precmd_async_pid > 0 )); then
    kill -TERM "$_prompt_amer_precmd_async_pid" &>/dev/null
  fi

  # Compute slow commands in the background.
  # NOTE: Must be the last commands of function for prompt refresh to work.
  trap prompt_amer_update USR1
  prompt_amer_async_git &!
  # BUG need array to contain all pids
  _prompt_amer_async_pid=$!
  prompt_amer_async_vcs &!
}

# ============================================ #

function prompt_amer_setup_git {
  # http://www.fileformat.info/info/unicode/category/So/list.htm
  # : ✚ ⬆ ⬇ ✖ ✱ ➜ ✭ ═ ◼ ❮ ❯ ⏎ ♺ » ⁝  ➙ ± ✯
  # ✔ ✓ ○ ◯ ϟ ✗ ➤ ø ♯ ✴ ▲ ▼ ↵ ☯ ↻ ✘ ⚡ ⚙ ⇣ ⇡

  ## Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format '%%B%F{2}+%f%%b'
  zstyle ':prezto:module:git:info:ahead' format '%%B%F{13}▲%f%%b'
  zstyle ':prezto:module:git:info:behind' format '%%B%F{13}▼%f%%b'
  zstyle ':prezto:module:git:info:branch' format '%%B%F{92}(%b)%f%%b'
  #zstyle ':prezto:module:git:info:clean' format '%F{2}✔%f'
  zstyle ':prezto:module:git:info:commit' format '%%B%F{15}(%.7c)%f%%b'
  zstyle ':prezto:module:git:info:deleted' format '%%B%F{1}✗%f%%b'
  zstyle ':prezto:module:git:info:modified' format '%F{220}◯%f'
  zstyle ':prezto:module:git:info:position' format '%%B%F{13}%p%f%%b'
  zstyle ':prezto:module:git:info:renamed' format '%%B%F{6}➤%f%%b'
  zstyle ':prezto:module:git:info:stashed' format '%%B%F{220}✭%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format '%F{5}⚡%f'
  zstyle ':prezto:module:git:info:untracked' format '%F{7}♯%f'
  # Coalesce: -- find first non-empty value
  zstyle ':prezto:module:git:info:keys' format \
    'details' '$(coalesce "%b" "%p" "%c")' 'icons' '%s%A%B%S%a%d%m%r%U%u'
}

# SEE:
#   http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information
function prompt_amer_setup_vcs {
  # Set vcs_info parameters (from 'steef' prompt).
  zstyle ':vcs_info:*' enable hg cvs # bzr git cvs svn
  zstyle ':vcs_info:hg*' get-bookmarks true
  zstyle ':vcs_info:hg*' get-revision true
  zstyle ':vcs_info:*:prompt:*' check-for-changes true  # For %c and %u
  zstyle ':vcs_info:*:prompt:*' unstagedstr '%F{220}◯%f'
  zstyle ':vcs_info:*:prompt:*' stagedstr '%%B%F{2}+%f%%b'
  zstyle ':vcs_info:*:prompt:*' branchformat '%%B%F{29}(%b)%f%%b'
  zstyle ':vcs_info:(sv[nk]|hg):prompt:*' hgrevformat '%F{cyan}%r%f'  # OR %h
  zstyle ':vcs_info:hg:prompt:*' branchformat '%%B%F{27}(%b)%f%%b %r'
  zstyle ':vcs_info:*:prompt:*' actionformats '%c%u' '%F{red}%a%f <%i> %m'
  zstyle ':vcs_info:*:prompt:*' formats '%c%u' '%b'  # %r/%s

  # SEE http://arjanvandergaag.nl/blog/customize-zsh-prompt-with-vcs-info.html#fn:1
  # zstyle ':vcs_info:git*+set-message:*' hooks git_status
  # NOTE: Prior to Zsh v4.3.12, there are no static hooks, no vcs_info_hookadd
  # zstyle ':vcs_info:*+start-up:*' hooks set_novcs_prompt_symbol
  # zstyle ':vcs_info:git*+set-message:*' hooks set_vcs_prompt_symbol git_precmd
  # zstyle ':vcs_info:*+set-message:*' hooks set_vcs_prompt_symbol
}

function prompt_amer_setup_prompts {
  # First line:
  PROMPT='%F{$prompt_color}'"${prompt_parts[1,2]}${prompt_parts[2]}"
  PROMPT+='%B%F{8}[%F{220}${_prompt_amer_pwd}%F{8}]%b'
  PROMPT+=' ${git_info:+${(e)git_info[details]}}${vcs_info_msg_1_}'
  # Next line:
  PROMPT+='${prompt_newline}%F{$prompt_color}'"${prompt_parts[3]}"
  PROMPT+='${git_info:+${(e)git_info[icons]}}${vcs_info_msg_0_}'
  PROMPT+='%F{$prompt_color}${editor_info[keymap]}%f%(!. %B%F{196}#%f%b.) '

  # Right prompt
  RPROMPT='${editor_info[overwrite]} %(?::%F{1}%?↵ %f)'
  RPROMPT+='${RANGER_LEVEL:+"%B%F{10}R%f%b"}'
  RPROMPT+='${VIM:+"%B%F{10}V%f%b"}'
  RPROMPT+='%F{$prompt_color}'"${prompt_parts[2]}"'%f'
  RPROMPT+='${SSH_TTY:+"%B%F{8}(%F{6}%n%f%F{8}@%f%F{2}%m%F{8})%f%b"}'
  RPROMPT+='%B%F{8}(%F{3}%*%F{8})%f%b'

  ## Jobs
  # [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}⚙"  # \u2699

  # Suggestion prompt
  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function prompt_amer_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)
  _prompt_amer_precmd_async_pid=0
  _prompt_amer_data_pref="${TMPDIR:-/tmp}/zsh-prompt_amer"
  _prompt_amer_start_time=$SECONDS

  ## Change main color according to environment variables
  #if (( $(echotc Co) < 256 )) ? 1,2,4 : 124,112,27; fi
  if [[ -n "$SSH_TTY" ]]; then
    if [[ "$HOST" =~ vbox ]]
    then prompt_color=${3:-4}
    else prompt_color=${2:-2}; fi
  else prompt_color=${1:-1}; fi
  [[ $UID -eq 0 ]] && prompt_parts="╔═╚╣╼" || prompt_parts="┌─└╢╼"
  # if [[ $TERM = *256color* || $TERM = *rxvt* ]]; then ... else ... fi
  # TODO: dependant on availability -- colors and symbols

  # Load required functions.
  autoload -Uz add-zsh-hook
  # WARNING (time-consuming) Add hook for calling vcs_info before each command.
  autoload -Uz vcs_info

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_amer_preexec
  add-zsh-hook precmd prompt_amer_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{1}…%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format "${prompt_parts[5]}"
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format "${prompt_parts[4]}"

  # # Set python-info parameters.
  # zstyle ':prezto:module:python:info:virtualenv' format '%F{yellow}[%v]%f '
  # # Set ruby-info parameters.
  # zstyle ':prezto:module:ruby:info:version' format '%F{yellow}[%v]%f '

  prompt_amer_setup_git
  prompt_amer_setup_vcs  # NOTE vcs_info cfg
  prompt_amer_setup_prompts
}

# ============================================ #

function prompt_amer_help {
  cat <<EOT
This prompt's main color is customizable:

  prompt amer [<colorN>]  # N=[0..255], def: 1
EOT
}

function prompt_amer_preview {
  # local +h PROMPT='%# '
  # local +h RPROMPT=''
  # local +h SPROMPT=''

  if (( $# > 0 )); then
    prompt_preview_theme 'amer' "$@"
  else #for i in 1 2 4; do prompt_preview_theme 'amer' $i; print; done
    prompt_preview_theme 'amer'
    print
    prompt_preview_theme 'amer' 2
  fi
}

prompt_amer_setup "$@"

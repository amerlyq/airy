# vim: ft=zsh:ts=2:sw=2:sts=2
# @ref: MIT, (c) amerlyq, 2015
# @brief Compute slow commands in the background.
#   NOTE Must be the last commands of function for prompt refresh to work.


function _prompt_vars_source {
  local cached="${_prompt_amer_data_pref}-${1:?No}"
  if [[ -s "$cached" ]]; then
    alias typeset='typeset -g'
    source "$cached"
    unalias typeset
  fi
}

function prompt_amer_update {
  # BUG on each USR1 will source all the info instead only necessary
  for smod in ${_prompt_async_calls[@]}; do
    _prompt_vars_source $smod
    typeset -g _prompt_amer_async_pid_$smod=0  # Reset PID.  OR unset ...
    # echo ${_prompt_amer_async_pid_${smod}}
  done

  # DEV (pid==0 for all pids || (time > 0.5)) --> update_now()
  # Redisplay prompt.
  prompt_amer_pwd
  zle && zle reset-prompt
}


function _prompt_vars_save {
  local cached="${_prompt_amer_data_pref}-${1:?No}"
  _prompt_async_call_$1 >! "$cached"
}

# BUG prompt will be refreshed after each async -- several times on each command
# DEV refresh once after all results (unset pid on kill or end, check all pids before refresh)
#   WARNING Will not work, because '&' launches another env, so can't sync variables
function _prompt_amer_async_exec {
  # Call submodule (git, vcs, ...) and signal completion to parent process.
  for smod in ${_prompt_async_calls[@]}; do
    if (( $+functions[_prompt_async_call_$smod] )); then

      # Kill the old process of slow commands if it is still running.
      if (( _prompt_amer_async_pid_${smod} > 0 )); then
        kill -TERM "${_prompt_amer_async_pid_${smod}}" &>/dev/null
      fi

      ( _prompt_vars_save $smod && kill -USR1 $$ ) &!
      # EXPL Make var global, so *_update would know it
      typeset -g _prompt_amer_async_pid_$smod=$!

      # print -r ${_prompt_amer_async_pid_${smod}}
    fi
  done
}

function prompt_amer_precmd {
  setopt LOCAL_OPTIONS        # On return restore all changed options
  unsetopt XTRACE KSH_ARRAYS  # Drop env influence on prompt itself

  # THINK maybe better setup this in *_setup?
  trap prompt_amer_update USR1  # Re-establish trap each time

  _prompt_amer_time_get
  _prompt_amer_async_exec
}

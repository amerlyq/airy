# vim: ft=zsh:ts=2:sw=2:sts=2

function prompt_len { local line=${1?}
  # SEE: http://stackoverflow.com/questions/10564314/count-length-of-user-visible-string-for-zsh-prompt
  # CHECK:BAD: ([FBK]|) -- second branch is empty == intentional match anything ?
  local strip_patt='%([BSUbfksu]|([FBK]|){*})'
  printf '%s\n' ${#${(S%%)line//$~strip_patt/}}
  ## ALT: Difference betwee full length and stripped normal chars
  # local len="${#${$(print -P "$line")//\([^)]##\)/}}"
  # len=$(( ${#$(print -P "$line")} - len ))
  ## ALT Strip color codes
  # len=$(print -P $line | sed 's/\x1b\[[0-9;]*m//g')
}


function prompt_top {
  local nrest fill whole
  local err dt elapsed jobl
  local date ppwd

  # Status
  whole=${(e)_prompt_status}  # Dump status skeleton only
  # ALT:BAD: prompt_len '%(?::%F{1}%?↵ %f)'
  ((${1:?})) && err=" %F{1}$1↵%f" || err=''

  jobstatus=$(jobs -l | wc -l)  # \u2699
  ((jobstatus)) && jobstatus="%F{9}⚙${jobstatus} %f" || jobstatus=''
  read -r dt elapsed <<< $(prompt_elapsed)

  if [[ $whole != ${(e)_prompt_status} ]]; then
    whole=${(e)_prompt_status}
    if [[ $err ]]; then
      nrest=$(( $COLUMNS - $(prompt_len $whole) ))
      fill=$(printf "%${nrest}s")
    fi
    # WARN: must be added after 'fill' evaluated
    elapsed+=$(prompt_elapsed_urgent $dt)
    print -r ${(e)_prompt_status}
  fi


  # Top
  unset whole nrest fill
  # TODO: migrate date into 'status' if term width small but path is too long
  date=$(print -P '%*')
  whole=${(e)_prompt_env}
  nrest=$(( $COLUMNS - $(prompt_len $whole) ))
  ppwd=$(prompt_pwd $nrest)
  fill=$(printf "%$(( $nrest - $#ppwd ))s")
  print -r ${(e)_prompt_env}
}

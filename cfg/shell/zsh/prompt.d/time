# vim: ft=zsh:ts=2:sw=2:sts=2
# @ref: MIT, (c) amerlyq, 2015

function prompt_elapsed_format { local dt=$1
  local seconds=$(( dt % 60 ))
  local minutes=$(( (dt /= 60) % 60 ))
  local hours=$(( (dt /= 60) % 24 ))
  local days=$(( dt / 24 ))

  local color=3 t=${seconds}s
  (($minutes> 0 )) && { color=1;  t=${minutes}m$t; }
  (( $hours > 0 )) && { color=13; t=${hours}h$t; }
  (( $days  > 0 )) && { color=9;  t=${days}d$t; }
  print -r "%F{$color}${t}%f"
}

# ============================================ #

function prompt_elapsed_reset {
  _prompt_elapsed_start=$SECONDS
  # print -rn -- $terminfo[el]  # Erase notification under prompt
}

function prompt_elapsed { local dt elapsed
  # Calculate and print the elapsed time.
  # ALT:(SECONDS) https://gist.github.com/jpouellet/5278239
  dt=$(( SECONDS - _prompt_elapsed_start ))
  if (( dt > 10 )); then
    elapsed=$(prompt_elapsed_format ${dt})
    elapsed=${(e)_prompt_elapsed}
  fi
  print -r $dt $elapsed
}

function prompt_elapsed_urgent { local dt=${1:?}
  # NOTE: ~60s for switching mind to another task
  (( dt > 60 )) || return
  printf '\a'  # Urgent bell
  # BAD: false-positive after: ranger, bash, schroot, etc
  # if (($+commands[r.n])) && [[ $DISPLAY ]]; then
  #   r.n -U 'ZSH' "$(fc -l -n -1)"
  # fi
}

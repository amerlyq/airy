# vim: ft=sh:ts=2:sw=2:sts=2

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z $debian_chroot && -s /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

## Git branch and status
GIT_PS1_SHOWDIRTYSTATE=true
__git_ps1() {
    ref=$(git symbolic-ref -q HEAD 2> /dev/null) || return
    printf "${1:-(%s)}" "${ref#refs/heads/}"
}
__svn_rev_ps1() {
    local DIRTY REV=$(svn info 2>/dev/null | grep Revision | sed -e 's/Revision: //')
    [ "$REV" ] || return
    [ "$(svn st)" ] && DIRTY=' *'
    echo "(r$REV$DIRTY)"
}

# Assume term is compliant with Ecma-48 (ISO/IEC-6429).
# (Lack of such support is extremely rare, and such
# a case would tend to support setf rather than setaf.)
if [[ -x /usr/bin/tput ]] && tput setaf 1 >&/dev/null; then
# DEV test for 256 colors
# case "$TERM" in xterm*|rxvt*)

  # Characters inside brackets \[..\] will be ignored in prompt length calculation
  # WARNING: zero-padding works only in bash>=v4.0
  for nm in setaf\ {00..15} bold sgr0
  do declare F${nm##* }="\[$(tput $nm)\]"; done

  #OR SSH_CONNECTION
  prompt_suffix=${SSH_TTY:+S}${RANGER_LEVEL:+R}${VIM:+V}
  [[ ! "$HOST" =~ vbox ]] || prompt_suffix+=B

  prompt_color="$F01"
  [[ -z "$SSH_TTY" ]] || prompt_color="$F02"
  [[ -z "$debian_chroot" ]] || prompt_color="$F04"

  #PROMPT_DIRTRIM=4   # change too deep dir names to .../airy/cfg/bash/
  prompt_parts="╔═╚╣╼"
  PS1="${prompt_color}${prompt_parts:0:1}${prompt_suffix:-${prompt_parts:1:1}}"
  PS1+="${prompt_parts:1:1}$F00$Fbold[$F03\w$F00]$Fsgr0"
  PS1+="${SSH_TTY:+ ~ $F06\u@\h$Fsgr0}"
  PS1+="${debian_chroot:+ :: $F06$debian_chroot$Fsgr0}"
  PS1+="\$([[ \$? == 0 ]] || echo \" $F01\$?↵$Fsgr0\")"
  PS1+="\n$prompt_color${prompt_parts:2:1}$F13\$(__git_ps1)"
  PS1+="$prompt_color${prompt_parts:4:1}$Fsgr0 "
  # \u - username, \A,\t - time w/out :SS, \!,\# - history/command number

  unset F{00..15} Fbold Fsgr0
else PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi


## Timer for commands
__format_time() {
  local dt=$1 total="" color=3
  local seconds=$(( dt % 60 ))
  local minutes=$(( (dt /= 60) % 60 ))
  local hours=$(( (dt /= 60) % 24 ))
  local days=$(( dt / 24 ))
  if (( $days > 0 )); then total+="${days}d"; color=9; fi
  if (( $hours > 0 )); then total+="${hours}h"; color=13; fi
  if (( $minutes > 0 )); then total+="${minutes}m"; color=1; fi
  echo "$(tput setaf $color)${total}${seconds}s"
}
__timer_start() { __timer_stamp=${__timer_stamp:-$SECONDS}; }
__timer_stop() {
    local dt=$(($SECONDS - $__timer_stamp))
    (( dt <= 2 )) || echo "$(tput bold setaf 10)>>> elapsed time: $(__format_time $dt)$(tput sgr0)"
    unset __timer_stamp
}
trap '__timer_start' DEBUG
PROMPT_COMMAND='__timer_stop'


# ALT prompt for logging -- allow copying bash history as valid scripts!!!
#export PS1="\e[01;33m#\e[01;35m\D{%y-%m-%d} \e[01;36m\D{%H:%M:%S} \e[00;32m\u\e[01;32m@\e[00;32m\h \e[01;33m\w :\e[00m\n"
# def:  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

> cppcheck

USAGE
	http://habrahabr.ru/post/210256/
	http://habrahabr.ru/post/210226/
	http://habrahabr.ru/company/abbyy/blog/211765/


RATS -- полезно для SDL -- buffer overflow итд
	http://code.google.com/p/rough-auditing-tool-for-security/
	: См. clang -- они вроде должны были уже допилить свой статический анализатор


ALT
	cppcheck — приоритетный,
	rats, cpplint — второстепенные,
	clang — только на машинах некоторых разработчиков,
	: т.к. лицо занимающееся настройкой CIS не может его прикрутить
	: (но очень хотим и его),
	splint формально работает, но настроен не корректно,
	кроме того парсим warning'и компилятора (gcc),
	т.о. в сухом остатке имеем cppcheck. 

LIOR
	-j — очень полезный параметр, позволяющий запускать проверку в многопоточном режиме. Использовать очень просто — в качестве параметра передаётся количество процессоров и проверка пойдёт веселее.
	-q — тихий режим. По умолчанию cppcheck выдаёт информационные сообщения о ходе проверки (которых может быть очень много). Данный параметр полностью выключает информационные сообщения, остаются только сообщения об ошибках.
	-f или --force — включить перебор всех вариантов директив ifdef (по умолчанию cppcheck проверяет дюжину вариантов). Что это такое — потом будет рассмотрено отдельно.
	-v — режим отладки — cppcheck выдаёт внутреннюю информацию о ходе проверки.
	--xml — выводить результат проверки в формате XML.
	--template=gcc — выводить ошибки в формате предупреждений компилятора gcc (удобно для интеграции с IDE, поддерживающей такой компилятор).
	--suppress — режим подавления ошибок с указанными идентификаторами (нужен повторный анализ).
	-h — выдаёт справку по всем параметрам на чистейшем английском языке. 

Чтобы не ломать голову, как cppcheck оптимизирует те или иные конструкции,
можно воспользоваться отладочным режимом, в котором cppcheck выдаст на экран
упрощённую версию кода:
	cppcheck --debug ./file.cpp


Включаются проверки параметром --enable, список категорий проверок
перечисляется через запятую. Или --enable=all. Примечание. Параметры -j и
режим проверки unusedFunction несовместимы, поэтому -j выключит проверку
unusedFunction, даже если она указана явно. 
	cppcheck -q -j4 --enable=warning,style,performance,portability ./source

| error — явные ошибки, которые анализатор считает критическими и обычно они приводят к багам (включено по умолчанию);
| warning — предупреждения, здесь даются сообщения о небезопасном коде;
| style — стилистические ошибки, сообщения появляются в случае неаккуратного кодирования (больше похоже на рекомендации);
| performance — проблемы производительности, здесь cppcheck предлагает варианты, как сделать код быстрее (но это не всегда даёт прирост производительности);
| portability — ошибки совместимости, обычно связано с различным поведением компиляторов или систем разной разрядности;
| information — информационные сообщения, возникающие в ходе проверки (не связаны с ошибками в коде);
| unusedFunction — попытка вычислить неиспользуемые функции (мёртвый код), не умеет работать в многопоточном режиме;
| missingInclude — проверка на недостающий #include (например, используем random, а подключить stdlib.h забыли).

Если ваша программа безошибочна с точки зрения анализатора, попробуйте
запустить cppcheck с параметром --inconclusive. Данный режим действительно
включает все возможные проверки, даже ошибки с малой вероятностью, которые
cppcheck пропускает по умолчанию. Таким образом, самый подробный./. режим
проверки:
	cppcheck -q --enable=all --inconclusive ./source

Getting started
| import pdb;pdb.set_trace() | start pdb from within a script
|:import ipdb;ipdb.set_trace()
|:import pprint;pprint.pprint(some_var)
| python -m pdb <file.py>    | start pdb from the commandline
| pdb.run('mymodule.test()') | launch from interactive prompt
< Save pdb commands to local <./.pdbrc> file for repetitive access.

Basics
| h(elp)  | print available commands
|:? or ? s|
| h <cmd> | print help about command
| q(quit) | quit debugger and crash (to return to execution use 'c' instead)
<ENTER> repeat the last command

Movement
| n(ext)     | execute the current statement (step over)
| s(tep)     | execute and step into function
| r(eturn)   | continue execution until the current function returns
| c(ontinue) | continue execution until a breakpoint is encountered
| u(p)       | move one level up in the stack trace
| d(own)     | move one level down in the stack trace

Examine
| p(rint) | expr print the value of expr
: current Pythons eg 2.7 that do not need the ‘p’ command to evaluate / print expressions
| pp expr | pretty-print the value of expr
| w(here) | print current position (including stack trace)
| l(ist)  | list 11 lines of code around the current line
| l fr,to | list from first to last line number
| a(rgs)  | print the args of the current function
: One note you may want to add — the list command doesn’t reset. That is,
: hitting “l” will give you the 11 lines, and “l” again will give you the
: next 11 lines.
alias ll u;;d;;l
  Then whenever you type ll, pdb will list from the current position. It
  works by going up the stack and then down the stack, which resets 'l' to
  show from the current position. (This won't work if you are at the top of
  the stack trace.)

Breakpoints
| b(reak)    | show all breakpoints with its number
| b lNo      | set a breakpoint at lineno
| b lNo,cond | stop at breakpoint lineno if Python condition cond holds, e.g.  i==42
| b file:lNo | set a breakpoint in file at lineno
| b func     | set a breakpoint at the first line of a func
| tbreak lNo | set a temporary breakpoint at lineno, i.e. is removed when first hit

Miscellaneous
| !stmt | (execute) treat stmt as a Python statement instead of a pdb command
| alias map stmt | map Python statement as a map command
| alias map <arg1 . . . > | stmt pass arguments to Python statement. stmt includes %1, %2, . . . literals.

| disable <num> | disable breakpoint number
| enable <num>  | enable breakpoint number
| cl(ear) <num> | delete breakpoint number

>>>>>

You left out one of the best ad-hock troubleshooting ways to figure out what
caused an exception post mortem.
Run:
  python -i your_script.py
After the exception you will be left at the python interpreter prompt staring
at your exception.

Type:
  import pdb
  pdb.pm
And you will be put into the context of the stack of the last exception. This
means you can print/examine the local variables at the point of failure after
the failure has occurred without having to change a line of code or import pdb
in advance.

Another method that requires a little bit of preparation is to put the import
pdb and pdb.set_trace() in a signal handler trap. That way you can do a kill
-SIGNAL PID or if the signal you trap is INT you can just Ctrl-C to get
dropped into the debugger at any point. The signal handler technique is good
for testing release candidates and released code because the signal handler
doesn’t create any runtime overhead.

Signal handler example. Debugger starts with Ctrl-C:
  import signal
  def  int_handler(signal, frame):
    import pdb
    pdb.set_trace(frame)
    signal.signal(signal.SIGINT, int_handler)
Put that at the top of your script and you can start debugging your script at
any point by type Ctrl-C. Resume programe execution by typing exit at the Pdb
prompt.

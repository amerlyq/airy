#!/bin/bc -ql
# SEE:(bc) http://www.linuxjournal.com/article/2544
# E.G: http://phodd.net/gnu-bc/index.html#logic

# THINK:DEV:(force aspect): if (gz,fz==2) aspect=W,H OR directly aspect=gz,fz
# DEV: limit panning window to one output/screen by min(ow,zblend(...))

###############################################################################
## Args
ro=read()  # rotation of tablet (def=0)
# Whole area (bbox)
ax=read()  # bbox area top left x (def=0)
ay=read()  # bbox area top left y (def=0)
aw=read()-ax  # bbox area width   (def=31496)
ah=read()-ay  # bbox area height  (def=19685)
# Whole output
ow=read()  # output width  (def=3840)
oh=read()  # output height (def=2160)
ox=read()  # output pos x  (def=0)
oy=read()  # output pos y  (def=0)
# Aspect
# FIND: what if pp!=[0..1]
pp=read()  # preferred aspect=[tablet..screen]=[0..1] (def=0)
# Gauge rel rect
gz=read()  # use absolute coords (but relative to rotated area) (def=0)
gx=read()  # zone rel pos x  in % (def=0)
gy=read()  # zone rel pos y  in % (def=0)
gw=read()  # zone rel width  in % (def=0: fit)
gh=read()  # zone rel height in % (def=0: fit)
# Frame rel rect
fz=read()  # use absolute coords (def=0)
fw=read()  # frame rel width  in % (def=0: fit)
fh=read()  # frame rel height in % (def=0: fit)
fx=read()  # frame rel pos x  in % (def=0)
fy=read()  # frame rel pos y  in % (def=0)

###############################################################################
## Functions
define abs(x) { if (x>=0) return x else return -x }
define max(x,y) { if (x>=y) return x else return y }
define min(x,y) { if (x<=y) return x else return y }
define xor(x,y) { return !((!x)-(!y)) }  # CHECK: if need round(..)
define rabs(b,x,y) { if(b) return round(x) else return round(y*x/100) }
define qblend(p,x,y) { return (1-p)*x + p*y }
define rblend(p,x,y) { return round(qblend(p,x,y)) }
define round(x) { auto z,r
  z=scale; scale=0
  if (x>=0) r=(x + 0.5)/1 else r=(x - 0.5)/1
  scale=z; return r
}

# Transform zone pts to origin CS basis
define void csrot(x,y) {
  x_ = bx + x*cr - y*sr
  y_ = by + x*sr + y*cr
}

###############################################################################
## Pre-evaluated constants
# REF ----------| cr sr |c+s c-s| pr  mr
#   0: +(ax,ay) |  1  0 |  1  1 |  0  0
#  90: +(aX,ay) |  0  1 |  1 -1 |  0  1
# 180: +(aX,aY) | -1  0 | -1 -1 |  1  1
# -90: +(ax,aY) |  0 -1 | -1  1 |  1  0

ro = 2*a(1) * ro/90  # ro to radians
cr = round(c(ro))  # cos(ro)
sr = round(s(ro))  # sin(ro)
pr = round((1 - (cr + sr))/2)  # plus
mr = round((1 - (cr - sr))/2)  # minus

# Basis shift relative to origin CS
bx = ax + aw*mr
by = ay + ah*pr

###############################################################################
## Defaults
# Effective width/height of rotated tablet
if (round(abs(cr))) { ew=aw; eh=ah } else { ew=ah; eh=aw }
ea = ew/eh  # effective area aspect
oa = ow/oh  # output aspect

# Assume unadjusted max: *w, *h, *a
if (!gw) zw=ew else zw=rabs(gz, gw, ew)
if (!gh) zh=eh else zh=rabs(gz, gh, eh)
if (!fw) ww=ow else ww=rabs(fz, fw, ow)
if (!fh) wh=oh else wh=rabs(fz, fh, oh)
za = zw/zh
wa = ww/wh

# Choose common aspect for auto-derived dims
pa = pp
if (gw && gh && (!fw || !fh)) pa=0  # Fit to tablet
if ((!gw || !gh) && fw && fh) pa=1  # Fit to screen
if (!gw || !gh || !fw || !fh) za=wa=qblend(pa, za, wa)

###############################################################################
## Relative zone rect at rotated area (sticks to side)
#  $oa >= $aa (16:9 > 16:10 && 16:9 > 10:16) landscape
#  $oa <  $aa (9:16 < 16:10 && 9:16 < 10:16) portrait
#  $oa ?? $aa ( 4:3 < 16:10 &&  4:3 > 10:16) mixed

# Parametric dims for zone, window
if (!gw) if (gh) zp=0 else if (ea> za) zp=pp
if (!gh) if (gw) zp=1 else if (ea<=za) zp=1-pp
if (!fw) if (fh) wp=0 else if (oa> wa) wp=pp
if (!fh) if (fw) wp=1 else if (oa<=wa) wp=1-pp

# For auto [0x0 0x0] -- always fit inside
if (!gw && !gh && !fw && !fh) { zp = wp = pp }

# NOTE: ignore fixed rects (zp,wp -- always set on conditions)
if (!gw || !gh) zw = rblend(zp, zh*za, zw)
if (!gw || !gh) zh = rblend(zp, zh, zw/za)
if (!fw || !fh) ww = rblend(wp, wh*wa, ww)
if (!fw || !fh) wh = rblend(wp, wh, ww/wa)

###############################################################################
## Relative positions for zone/window
zx = rabs(gz, gx, ew-zw)
zy = rabs(gz, gy, eh-zh)
wx = rabs(fz, fx, ow-ww)
wy = rabs(fz, fy, oh-wh)

###############################################################################
## Rect top-left and bottom-right pts in origin CS
#   0   |   90  |  180  |  -90  |
# zx,zy | zx,zY | zX,zY | zX,zy |
# zX,zY | zX,zy | zx,zy | zx,zY |

x0 = zx + zw*pr
y0 = zy + zh*mr
x1 = zx + zw*(1 - pr)
y1 = zy + zh*(1 - mr)

###############################################################################
## Output
# NOTE: apply 'round' to tolerate floats in input()

# Area (tablet: absolute to Rotate=none)
csrot(x0,y0); print round(x_)," ",round(y_)," "
csrot(x1,y1); print round(x_)," ",round(y_),"\n"

# Frame (output: absolute to screen pos)
print round(ww),"x",round(wh),"+"
print round(ox + wx),"+",round(oy + wy),"\n"

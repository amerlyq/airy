#!/bin/bash -e
SWD=$(readlink -e "$0"); SWD=${SWD%/*}
PATH=$SWD/get:$SWD/mod:$SWD/set:$PATH
set -o pipefail

# BAD: time ./$0 => 40..120 mS
# THINK:(output): use abs WxH+X+Y relative to $output ?

[[ $1 == -h ]] && { dry_run=1; shift; }
zone=$1     # [full|auto|[%]WxH+X+Y]
frame=$2    # [full|auto|cursor|[%]WxH+X+Y]
rotate=$3   # [none|half|cw|ccw]
output=$4   # [ {<output>|1..9} | {desktop|0} | WxH+X+Y || next ]


# Query wacom =================================================================
cache(){ [[ ${!1?} ]] || read -r "$1" < <(cache-get "$1" "${2?}"); cache-set "$1" "${!1}"; }
cache zone 'auto'
cache frame 'auto'
cache output 'desktop'

sid=$(wacom-ids 'STYLUS')
# HACK: use defaults when wacom disabled
[[ ${maxarea:=${sid:+$(wacom-area-max "$sid")}} ]] || maxarea='0 0 31496 19685'

arr_idx() { local k=$1 i=0; shift; for v in "$@"
  do [[ $v == $k ]] && echo "$i" && return 0
  ((++i)); done; return 1
}
next_rot(){ local idx dir=${1:-+} _rot=( none cw half ccw )
  idx=$(arr_idx "$rotate" "${_rot[@]}")
  idx=$(( (idx $dir 1) % ${#_rot} ))
  printf '%s\n' "${_rot[ $idx ]}"
}
# Incremental rotation
[[ $rotate == [+-] ]] && { rot_dir=$rotate; unset rotate; }
[[  ${rotate:=${sid:+$(wacom-rotation "$sid")}} ]] || rotate=none
[[ $rot_dir ]] && rotate=$(next_rot $rot_dir)


# Query output ================================================================
# HACK: export before 'xbindkeys' to propagate cached env var
export _XRANDR=${_XRANDR:-$(query-xrandr)}

# Decode numerical to named one, then convert to $maxgeom
case ${output:?}
in [0-9]*x* ) maxgeom=$output; output=desktop
;; 0|desktop) output=desktop; maxgeom=$(geom-screen <<< "$_XRANDR");
;; [1-9] | *)
  output=$(list-outputs <<< "$_XRANDR" | nth-line "$output")
  maxgeom=$(geom-display "$output" <<< "$_XRANDR")
esac


# Functions ===================================================================
parse(){ local _rot
  # Rotate -> degree
  declare -A _rot=([none]=0 [cw]=90 [half]=180 [ccw]=-90)
  ro=$(( ${_rot[${rotate:?}]:?} ))

  # Relative or absolute
  [[ $zone =~ ^% ]] && gz=0 || gz=1
  [[ $frame =~ ^% ]] && fz=0 || fz=1

  # THINK: extract '-' sep from WxH-X-Y for pos counted from bottom-right?
  #   !! BUT keep negative values 120x240+-10+-10
  IFS='x+' read -r gw gh gx gy <<< "${zone#%}"
  IFS='x+' read -r fw fh fx fy <<< "${frame#%}"
}

accommodate() { local args out
  args="
  ${ro:?} ${ax:?} ${ay:?} ${aX:?} ${aY:?}
  ${ow:?} ${oh:?} ${ox:?} ${oy:?} ${pp:?}
  ${gz:?} ${gx:?} ${gy:?} ${gw:?} ${gh:?}
  ${fz:?} ${fw:?} ${fh:?} ${fx:?} ${fy:?}
  "
  readarray -tn2 out < <(area-frame <<< "$args")
  area=${out[0]}  # OR: '%' to ResetArea
  frame=${out[1]}
}

cursor_rect(){
  # BAD: wrong mx/my for dual-screen (need shift bias to output)
  read mx my scr wnd < <(query-mouse)
  # NEED: unlinear fx=f(mx) to ease aligning (otherwise only extremum pos used)
  # bnd=3; ((my<oh/bnd)) && og=0 || ((my>oh-oh/bnd)) && og=100 || og=$(((my-oh/bnd)/(oh - 2*oh/bnd)))
  frame="%0x0+$((100*mx/ox))+$((100*my/oy))"
}


# Adjust ======================================================================
IFS=' ' read -r ax ay aX aY <<< "$maxarea"
IFS='x+' read -r ow oh ox oy <<< "$maxgeom"

case ${zone:?}
in full) zone='%100x100+0+0'
;; auto) zone='%0x0+0+0'
;; [%0-9]*x*) zone=$zone
;; *) exit 2
esac

# Adjust aspect: $geom <=> $area
case ${frame:?}
in full) frame='%100x100+0+0'; # =$output
;; auto) frame='%0x0+50+50'
;; [%0-9]*x*) frame=$frame
;; cursor) cursor_rect  # '1/5'
;; *) exit 3
esac

pp=0  # aspect=[tablet..screen]
parse
accommodate

# Apply =======================================================================
if ((dry_run)); then
  echo AREA: $area
  echo FRAME: $frame
  echo ROTATE: $rotate
else
  wids=$(wacom-ids 'STYLUS|ERASER')
  while read -r wid; do
    wacom-map "$wid" "$area" "$frame" "$rotate"
  done <<< "${wids:?Connect wacom tablet}"
fi

Area aspect ratio
  [_] ALT:(broken?) KeepShape option
  Sizes
    Phys: 157 mm x 98 mm = 1.602
    LPts: 31496 x 19685 = 1.600
    Wide: 16:10 = 1.600
    Scrn: 16:9  = 1.777
    A4:  sqrt 2 = 1.414


%% Regimes %% (keep aspect)
  Format: %WxH+X+Y  # D -- physical dimension
    W,H=[0..100]
      Using 0 in place of any W,H -- auto-derive W,H from others
      0x0 -- fit into phys rect
    X,Y=[0..100]
      W = D | ignore X,Y
      W < D | X,Y -- relative pos to screen D
      W > D | X,Y -- pan in bounds of screen D

% Variants
  [_] THINK:DEV: force aspect -- use *gz,fz*=mode2 OR pass aspect=*gz,fz*
  { WxH WxH }  # full-full
    ignore *pp* (always =1)
    fix rects as specified
    anisotropic: aspect distortion (only in this mode)
      ? [_] THINK practical application for deformed aspect
  { WxH Wx0 | WxH 0xH | Wx0 WxH | 0xH WxH }  # full-derive
    ignore *pp* (always =1)
    aspect from WxH
    derive single '0' dim by opposite aspect
      *x,y* to align in bounds OR pan when dim is out-of-bounds
        [0..100] -- top/mid/bot  # alg the same
  { WxH 0x0 | 0x0 WxH }  # full-maxfit -- scale rect to full
    derive both '0' as earlier
    aspect from WxH
    *pp*=0..1 : fit rect=[inner..outer] in respect to Rotation
      E.G. z16:10 + w9:16
        | 0.0 | maximize tablet, crop screen
        | 1.0 | pan tablet, maximize screen (~ 120x240+-10+-10)
          BUT: then in dual-screen cursor will move outside of output instead of sticking to the side
            ? ALT manually reset values to the closest output side
          BUT: unintuitive -- because to move active frame on screen we must change
            ! area's gx,gy and vice versa == THINK about it
        | 0.5 | half-pan tablet and half-crop screen
  { 0x0 0x0 }  # maxfit-maxfit
    *pp*=0..1 to prefer aspect=[tablet..screen]  # maximizes accordingly
      morph between bounded area and bounded window aspects
      NEED non-linear coef scaling
      NOTE dead screen areas
    no aspect distortion
    Best fit frame
      * 16:10 : lft/cen/rht -- 0..100%
      => move frame by mouse (control snapping)
  { Wx0 0x0 | 0xH 0x0 | 0x0 Wx0 | 0x0 0xH }  # bind-derive
    tablet=[fit..pan], screen=[crop..fit]
    derive both '0' as earlier
  { Wx0 Wx0 | 0xH 0xH | Wx0 0xH | 0xH Wx0 }  # cross-derive morph/blend intersection
    *pp*=0..1 : prefer aspect=[tablet..screen]
    always derive max possible dims (and other by aspect)
      - derive max dim even for partial Wx0|0xH
      - blend between them by *pp*
      - position by *fx,fy* only after deriving complete
        => *fx,fy* align consistently with fixed window

  <<_ ALT:(profound alg): remaining screen rect instead of max possible
    Aspects: zb = (ew-zx)/(eh-zy), wb = (ow-wx)/(oh-wy)
    => Use remaining dim till screen edge if originally smaller
       zw=f(zx) ~= ew - zx/gx, zx=gx*ow, wa=za=max(zb,wb)
    use whole screen till whole dim if out-of-bounds
    THINK combine positioning with *fy* and aspect?

% Modes
  Frame
    predefined regions (x,y,zoom) for fast access
    mouse-centered frame
      We flip to eraser to move drawing frame and then flip to stylus to draw inside
        * Stylus -- always in precision frame
        * Eraser -- always in whole screen mode
    Fit to window
      * current window
      * window id
      => derive area and frame based on window geometry

  Union
    scale / precision => can be united by VAR:'zoom' for >1 and <1
    full / best fit => VAR:'zoom' for =1+/-0 -- singularity
      => however, float on cmdline is pain
      ? better to make two independent zooms
        => I need float anyways -> integers are too crude for scaling
          SEE http://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks
          $ dc -e '..'
          $ echo '..' | bc
        ALT: fractions ~= '3/2' | '4/5' | '18/5'
          BUT: awkward when trying to _slightly_ increase value


TODO
  2016-09-12 [X] Restrict drawing area to 16:9 monitor
    => below ~10% won't be reachable
    https://gist.github.com/Quackmatic/6c19fe907945d735c045
  2016-09-12 [X] Restrict mouse moving to 16:10 canvas only
    => BUT ifc on left/right (~5.5% each) will be impossible to rich!
  2016-09-12 [X] Precision Region around cursor -- recreate functionality
  [_] Overlay on desktop
    * to show current frame on screen by blacking out surroundings
    http://askubuntu.com/questions/328543/drawing-over-the-desktop

  [_] THINK cache args to //wacom-map (one arg per line)
    * read from cache write-only option MapToOutput
    * incremental setup -- reuse prev vals w/o specifying them on cmdline

  [_] Portret regime for tablet
    [_] ALSO:NEED: apply Rotate to "TOUCH|CURSOR"
      * driver always applies area mapping before rotation
        WARN: *Rotate* don't affect *Area* at all (!aspect not kept!)
          => NEED to re-evaluate mapped area and rotate it ourself
        NOTE: there is sense to reuse old 'area' on Rotate,
          if you change 'output' accordingly to aspect
    * Read and create appropriate matrix to map only _part_ of monitor
    http://linuxwacom.sourceforge.net/wiki/index.php/Dual_and_Multi-Monitor_Set_Up#MapToOutput
    [_] BAD: TwinView
      http://linuxwacom.sourceforge.net/index_old.php/howto/multimonitor
      https://bbs.archlinux.org/viewtopic.php?pid=797617

  [_] DEV: reuse old values
    * USE safe set of unescaped characters: /[a-zA-Z0-9,._+:@%-]/
      ? BAD? equal sign '='
    /-/ -- reuse
    /%/ -- reset

  [_] Split ./ctl/map-area to multiple scripts
    => Create cool arch structure, similar to planned ./prf/*
      * outputs
      * parts of tablet
        # sometimes drawing on some parts of tablet is easier than on others
      * zones
      * rotations

DEBUG
  [_] profiling operations time
    Using ENV vars
      $ _xrandr=${_XRANDR:-$(xrandr -q --current)}

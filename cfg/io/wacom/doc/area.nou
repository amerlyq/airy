Area aspect ratio
  [_] ALT:(broken?) KeepShape option
  Sizes
    Phys: 157 mm x 98 mm = 1.602
    LPts: 31496 x 19685 = 1.600
    Wide: 16:9  = 1.777
    Wide: 16:10 = 1.600
    A4:  sqrt 2 = 1.414

%% Regimes %% (keep aspect)
  ? [_] THINK practical application for deformed aspect
  Full scale
    * 16:9 : top/mid/bot -- 0..100%
  Area scale
    * small WxH+X+Y area to full output
    * describe area in float percents for portability
    + VAR zoom
  Best fit frame
    * 16:10 : lft/cen/rht -- 0..100%
    => move frame by mouse (control snapping)
  Precision frame
    * VAR zoom --> WxH+X+Y output frame
      - full area => force the same frame aspect
      - partial best fit area 0..100% <= according to frame aspect
    Modes
      predefined regions (x,y,zoom) for fast access
      mouse-centered frame
        We flip to eraser to move drawing frame and then flip to stylus to draw inside
          * Stylus -- always in precision frame
          * Eraser -- always in whole screen mode
  Fit to window
    * current window
    * window id
    => derive area and frame based on window geometry
  === Union
    scale / precision => can be united by VAR:'zoom' for >1 and <1
    full / best fit => VAR:'zoom' for =1+/-0 -- singularity
      => however, float on cmdline is pain
      ? better to make two independent zooms
        => I need float anyways -> integers are too crude for scaling
          SEE http://unix.stackexchange.com/questions/40786/how-to-do-integer-float-calculations-in-bash-or-other-languages-frameworks
          $ dc -e '..'
          $ echo '..' | bc
        ALT: fractions ~= '3/2' | '4/5' | '18/5'
          BUT: awkward when trying to _slightly_ increase value
  === USE
    area <-- output
      rot <- wacom rot
      asp <- output w/h
      area ^= rot(asp)
    frame <-- area
      rot <- wacom rot
      asp <- wacom w/h
      output ^= rot(asp)

TODO
  2016-09-12 [X] Restrict drawing area to 16:9 monitor
    => below ~10% won't be reachable
    https://gist.github.com/Quackmatic/6c19fe907945d735c045
  2016-09-12 [X] Restrict mouse moving to 16:10 canvas only
    => BUT ifc on left/right (~5.5% each) will be impossible to rich!
  2016-09-12 [X] Precision Region around cursor -- recreate functionality
  [_] Overlay on desktop
    * to show current frame on screen by blacking out surroundings
    http://askubuntu.com/questions/328543/drawing-over-the-desktop

  [_] THINK cache args to //wacom-map (one arg per line)
    * read from cache write-only option MapToOutput
    * incremental setup -- reuse prev vals w/o specifying them on cmdline

  [_] Portret regime for tablet
    [_] ALSO:NEED: apply Rotate to "TOUCH|CURSOR"
      * driver always applies area mapping before rotation
        WARN: *Rotate* don't affect *Area* at all (!aspect not kept!)
          => NEED to re-evaluate mapped area and rotate it ourself
        NOTE: there is sense to reuse old 'area' on Rotate,
          if you change 'output' accordingly to aspect
    * Read and create appropriate matrix to map only _part_ of monitor
    http://linuxwacom.sourceforge.net/wiki/index.php/Dual_and_Multi-Monitor_Set_Up#MapToOutput
    [_] BAD: TwinView
      http://linuxwacom.sourceforge.net/index_old.php/howto/multimonitor
      https://bbs.archlinux.org/viewtopic.php?pid=797617

  [_] DEV: reuse old values
    * USE safe set of unescaped characters: /[a-zA-Z0-9,._+:@%-]/
      ? BAD? equal sign '='
    /-/ -- reuse
    /%/ -- reset

  [_] Split ./ctl/map-area to multiple scripts
    => Create cool arch structure, similar to planned ./prf/*
      * outputs
      * parts of tablet
        # sometimes drawing on some parts of tablet is easier than on others
      * zones
      * rotations

DEBUG
  [_] profiling operations time
    Using ENV vars
      $ _xrandr=${_XRANDR:-$(xrandr -q --current)}

" vim:ts=2:sw=2:sts=2
set fileformats=unix,dos,mac  " Line endings
if has("multi_byte")
  if &termencoding == "" | let &termencoding = &encoding | endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=utf-8,cp1251,cp866
endif

fun! s:cfg(path)
  for f in globpath(expand($VIMHOME .'/cfg/'), a:path, 0, 1)
    exe 'source' fnameescape(f)
  endfor
endf

com! -nargs=1 Silent | exe ':silent !'.<q-args> | exe ':redraw!'

let g:mapleader=","
call s:cfg('core/detect.vim')
call s:cfg('core/env.vim')
call s:cfg('core/options.vim')
call s:cfg('core/init.vim')
call s:cfg('core/leaders.vim')

fun! SourcePlugins()
  let g:mapleader="\\"
  call s:cfg('plugins/backslash.vim')
  " let g:mapleader=" "
  " call s:cfg('plugins/space.vim')
  let g:mapleader=","
  call s:cfg('plugins/autocomplete.vim')
  call s:cfg('plugins/comma.vim')
  call s:cfg('plugins/integration.vim')
  call s:cfg('plugins/languages.vim')
  call s:cfg('plugins/search.vim')
  call s:cfg('plugins/operators.vim')
  call s:cfg('plugins/decoration.vim')
  " runtime! $VIMHOME/cfg/plugins-cfg/*.vim
endf

call s:cfg('neobundle.vim')
syntax enable

let g:mapleader=","
call s:cfg('plugins-cfg/*.vim')

let g:mapleader=","
call s:cfg('core-cfg/*.vim')
" call s:source_rc('encoding.rc.vim')
" call s:source_rc('edit.rc.vim')
" call s:source_rc('view.rc.vim')
" call s:source_rc('filetype.rc.vim')
" call s:source_rc('mappings.rc.vim')

" call s:cfg('features/'.(IsWindows() ? 'windows' : 'unix').'.vim')
" call s:cfg('features/'.(has('gui_running') ? 'gui' : 'term').'.vim')
" call s:cfg('features/'.(has('nvim') ? 'neovim' : 'vim').'.vim')

" " Default home directory.
" let t:cwd = getcwd()

augroup MyAutoCmd
  " Open at last position
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
augroup END

" Exec .vimrc in curr dir, but deny itc :autocmd, :shell and :write cmds
set exrc secure modeline  " also parse 'vim:...' cmds from comments
" SEE loadorder of *.vim by :scriptnames

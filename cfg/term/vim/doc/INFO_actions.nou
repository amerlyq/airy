Remote edit
  vim scp://root@example.com/~/sdk/file
  vim scp://root@example.com/~user/sdk/file
  vim scp://root@example.com//home/user/sdk/file

Web Debugger (Client-server)
  https://github.com/Kozea/wdb

Buff
  :b .h<Tab>     " offers the *.h buffers
  :b j*c<Tab>    " offers jet.c jetcar.c jetcar.h
  Last edited
  <C-^> (or <C-6>) and :b# | (technically edit the alternate file)

Execute
  | :.!zsh     | Replace current line with bash command to it's output
  | :r!grep    | Append output of filter
  | :redir[!] @+  | Redirect last in copy buffer (Else:  @A,  >> out.txt)
  | set nomore | To suppress '--more--' prompt
  | :history   |
  | :g/fred/   |
  |   " any other commands
  | :redir END |
  | !}sort     | sort from cursor to end of paragraph
  | 3!}sort    | same, 3 paragraphs
  | 3!!sort    | sort 3 lines

Search
  | /[...]      |
  | /<C-R><C-W> | Search word, cursor hovering (..<C-A> for space-delimited)
  | * or #    | Fast, as above
  | //          | Search last
  | g/ | g/patt | List of results for last searched pattern
  | s::[...]:g  | Subs last
  | s::\=@0:g   | Subs last by previously yanked (Map it?)
  | <C-L>       | Clear results highlight
  | <Leader>th  | Toggle highlighting
  | /\v^start\_.{-1,}end$/  | search non-greedy multiline block
  | g/\vstart\_.{-1,}end$/> | indent block's first line
  | g/^{/.,/}/> | right indent!
  :nnoremap <C-L> :noh<cr><C-L>

Diff
  | do | Get changes from other window into the current window.
  | dp | Put the changes from current window into the other window.
  | ]c | Jump to the next change.
  | [c | Jump to the previous change.
  Update: Allan commented these two tips that I personally use quite often.
    If you load up two files in splits (:vs or :sp), you can do on each window
      :diffthis
    and achieve a diff of files that were already loaded in buffers
    < :diffoff
    can be used to turn off the diff mode.
    < :windo diffoff
    The nice thing about this technique is that we can use an unnamed buffer.
  See cast on fugitive with vimdiff
    http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/


Say we're in insert mode and we want to paste yanked text without leaving the
insert mode. We can do that with  <C-r>0. If yanked text contains new line
characters, <C-r><C-p>0 will take care of fixing indentation issues.

To find last mapping of keys
  :verbose nmap <C-[>
Vim character info code
  ga

Grep
  :vimgrep "pattern" ~/trunk/**/*.py
  :copen 20
  :grep -IirlZ "pattern" .|xargs -0 vim
    -I: ignore binary
    -i: ignore case
    -r: recursive
    -l: print file name only
    -Z: print \0 after each file name

Loc
  Do `:lvim foo %` in //foo.txt to create a location list for the window containing //foo.txt.
  Do `:lne` a few times to jump to a few foo in //foo.txt.
  Focus on //bar.txt and do `:lne`. What happens?
  Now, do `:lvim bar %` in //bar.txt to create a location list for the window containing //bar.txt.
  Do `:lne` a few times. What matches do you jump to? In which buffer? In which window?
  Switch to the other window and do `:lne` a few times. What happens?
  Switch again to //bar.txt. What does `:lne` do?
  Now, do `:vim bar %` in //bar.txt to create a quickfix list.
  Do :cn a few times to jump to a few bar in //bar.txt.
  Now, focus on //foo.txt, what does :cn do?

Tags
 If you want just to reduce the size of the file, --excmd=number does the job: on
 my system (Gentoo, so I have header files for every package that provides them)
 the following command takes 1,5 minutes to generate a 265 MiB file:
  $ ctags -R --excmd=number \
       --c++-kinds=+p \
       --fields=+iaS \
       --extra=+q \
       -f ~/tmp/vim/uitags /usr/include
  $ apt-file list boost | grep -E -o '/usr/include/.*\.(h|hpp)' | grep -v '/usr/include/boost/typeof/' > ~/.vim/tags/boost-filelist
  $ ctags --sort=foldcase --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.vim/tags/boost -L ~/.vim/tags/boost-filelist
  REF
    http://charlesmartinreid.com/wiki/Ctags
    http://design.liberta.co.za/articles/code-completion-intellisense-for-cpp-in-vim-with-omnicppcomplete/
    http://stackoverflow.com/questions/2825464/generating-a-reasonable-ctags-database-for-boost

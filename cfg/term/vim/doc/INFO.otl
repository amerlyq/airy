READ
	http://www.integralist.co.uk/posts/a-guide-to-getting-started-with-vim/
	http://www.integralist.co.uk/posts/vim-workflow/
	http://www.integralist.co.uk/posts/vim-workflow-part-deux/

	> http://dahu.github.io/vim_waz_ere/4_substitute_command.html

Workflow in fugitive
	https://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/
	http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/
	https://github.com/airblade/vim-gitgutter#hunks


INFO
	Book about vimscript
		http://learnvimscriptthehardway.stevelosh.com/
	Man (nice)
		http://bencrowder.net/files/vim-fu/
	Tip & tricks, Plugins
	> http://stevelosh.com/blog/2010/09/coming-home-to-vim/
	Castings
		http://vimcasts.org/
		http://lococast.net/
		http://vimeo.com/user1690209/videos
		Shows kun-fu with vim
		http://derekwyatt.org/vim/vim-tutorial-videos/
	Man & tips (>1500)
		https://wiki.archlinux.org/index.php/Vim
		http://vim.wikia.com/wiki/Category:VimTip
		http://vimawesome.com/
	Read
		 http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_%28Part_2%29
		 http://vim.wikia.com/wiki/Making_a_list_of_numbersj

	How-to with desc and vimrc
		http://konishchevdmitry.blogspot.com/2008/07/howto-vim.html


Callgraphs
	<IDEA>
		Compiling by gcc/llvm to get exact callgraph is good -- but often irrelevant
			- I need only draft analysis for overall structure
			- SyntaxTree has no distinguishing for some language constructs
		On other hand, using regexes is errorprone and don't cover all cases
			- Like some other language constructs, derivative from those
		Main problem -- analysis of resulting graph
			- Displaying whole callgraph has no sense -- as can't be analyzed
			- Need collapse logic blocks and allow to focus on small subgraphs
				Showing skeleton linkage to overall structure
			- Don't connect calls to procedures (like print-log and system libs)
		THINK? Write in Lisp? -- would it have some benefits?
		Altogether, parse by cscope/ctags and show outline -- isn't that the best?
		TODO: Grep my notes by 'call\s\=graph'
	Cscope
		http://odellconnie.blogspot.com/2012/07/free-c-software-call-graph-generators.html
		https://en.wikipedia.org/wiki/Call_graph
		http://www.toolchainguru.com/2011/03/c-calltrees-in-bash-revisited.html
		https://sites.google.com/site/vimcctree/ccglue
		http://stackoverflow.com/questions/3828157/how-to-use-cscope
	Egypt -- graph by gcc
		in make: CFLAGS+=-fdump-rtl-expand
		cd /pj/dir/ && make && egypt **/*.expand | dot > ff.dot
	Cflow -- indented outline of calls
		cflow cdns.c | sed 's/^\s*//' | sort | uniq -c
		cflow cdns.c | sed -rn '/\s(get_debug|log|testfw_|get_|set_)/d; />:$/s/^(\s*\S+)\(\).*/\1/p' >! cdns.txt
	Llvm
		: http://icsweb.inf.unisi.ch/cms/images/stories/ICS/slides/llvm-graphs.pdf
		: http://stackoverflow.com/questions/9939794/how-to-use-llvm-to-generate-a-call-graph

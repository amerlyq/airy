Leaders
  [_] CHG <Space> to operator mode: (vim-osmos?)
  :SEE https://github.com/spiiph/vim-space
    : Add v:count to <Space> insert operator -- amount of chars before exit.
    ' A' -- inserts space at line end, then goes to insert regime
    ' I' -- inserts space at line beg, then goes to insert regime
    ' r' -- inserts space, then replace
    '  ' -- put space
    : Add v:count to <Space> paste operator -- amount of spaces before it
    ' p' -- put (yanked) text with space before it
    : THINK choose what to insert -- space or inputted character?
    : = Do like surround' chains of textobjects?
    : => Then <Space>p is shortcut for <Space>i<Space>p
    : v:count treated as amount of spaces inserted
    := But then I will need some other operator for single-char inserts --
    : to work with other characters beside spaces.
    : USE CamelMotion on Space? Or smart-word for urls-like strings?
    Reuse 'q<Space>' for directly surround by spaces
    DEV:THINK:XXX: use insert as chaining operator:
      Press operator
      Choose what symbol to insert
      Then _any_ motion/textobj (if ending in INSERT else append a/i)
      Return to NORMAL
    [_] FIX [Space]-insert mode after ENH stage
    [_] DEV insert single char instead of my Limio
      SEE $ vimb gh vim insert (seeen until 5th page)
      : http://vim.wikia.com/wiki/Insert_a_single_character
      : http://www.vim.org/scripts/script.php?script_id=2810
      : https://github.com/syngan/vim-operator-inserttext
      : https://github.com/aur-archive/vim-insertchar
      : https://github.com/mwgkgk/vim-operator-insert
  [_] CHG <Tab> to operator mode
    TAB-q, TAB-l -- toggle qf lists
  [_] FIND: V-Block character column motions like '0' and '$' -- to fast select region
  [_] q[pP]['`"()...] -- inserts text and adds quotes
  2015-11-27 [X] Disable textwidth indicator column when screensize smaller then tw
  [_] Replace my direct mappings of ({["'... by  'omap <expr> Fun(getchar())'
    http://stackoverflow.com/questions/8564206/is-it-possible-to-determine-in-an-operator-pending-mapping-whether-the-motion-wi
    onoremap <expr> d (v:count == 0 \|\| v:operator != 'd') ? 'd' : 'w'
    onoremap <expr> d (v:count == 0 \|\| v:operator != 'd') ? 'd' : '<Esc>cc' . v:count . '<Esc>'


Help (unite.vim)
    [_] Make help to installed vim plugins in unite on <Tab><F1>
        * You will be able to filter list by words!
            mode | mappings/commands | action desc | plugin name |
        * Source from LIOR-like file in doc
        * On <CR> show 'verbose map 'mapping' to understand where it's defined

Unite

  [_] Filter -- define list of my own named filters -- for processing buffer
    Like count lines, sort by length, etc
    Combine with vim-operator-pipe -- search variants
    :Like: https://github.com/krisajenkins/vim-pipe
  [_] Regexes -- list of searches from EXAMPLES -- function declarations, etc
  [_] Populate list of useful operations from notes/regex/*


Operators
  >[_] Create vim-textobj-overhaul -- combine and improve all textobj into
  >   one seamless obj map
  [_] Improve 'gC' to copy-comment multiline/block selection
  [_] Create 'g,[oO]' which leave comment untouched as default
  [_] Create ',[oO]' which drops indent -- better use unimpared/etc to insert empty lines
  [_] g[oO] -- leaving insert w/o resetting indent -- like <C-Esc> or jF/fJ
  [_] DEV '[ai]k' -- copy key until ':' -- useful for yaml
  [_] DEV remap back 'g;' and 'g,' -- as them useful to jump between last changes
    := Smth with <C-..> would be useful -- as analogy to C-o and C-i
    := I've already lost <Tab> due to [Unite], so I need submode for all this?
  [_] On key sends obj/sel to new buffer in split window in separate named tab
    := Useful for deffered analysis, focused on of several functions together
  [_] operators on base of 'exchange'
    [_] 'swap-parts'
    : * Place cursor on delimiter/character
    : * Exchange left and right expr around delimiter
    : = by default -- any \S in left and right
    : = more long -- input textobj which tested and applied on left and right for 'cx'
    [_] THINK? 'delete-replace' on 'dx' -- which currently empty


  [_] DEV mapping to move in column like '{/}' -- on gG, g{, g}
    for more simple C-v block selecting
    I can make regex which sticks to \< \> and move until this condition works
    Similar to column textobj, but motion instead of region
    : https://github.com/machakann/vim-columnmove
    :  https://github.com/vim-utils/vim-vertical-move
    : https://github.com/deris/columnjump
    : https://github.com/ngn/vim-column


  [_] DEV :SortLine inside selection/motion (like inside brackets)
    := Search for operator-* plugins first, or make one myself
    := Such operator- plugin may consolidate SortBlock as linewise move


  [_] DEV map 'gc<' for shifting whole inline comment w/o left content
         ' <' to shift only commented text after commentstring
    := Can shift as always and exchange spaces between old and new pos
    :SEE http://www.vim.org/scripts/script.php?script_id=2529
  [_] Put arrows to use
    FIND How to make arrows move as virtual=all, keeping hjkl as always
    THINK Arrows for lineshift?
      : http://codingfearlessly.com/2012/08/21/vim-putting-arrows-to-use/


> Plugins
Submode
  C-ffff bbb eee yyy
    [_] BUG: pass through regime original keys when at top/bottom of window

vim qf/grp vertical mode
  [_] when there are too many results in qf/grp -- place it in left split wnd
  [_] by preview on 'o' in qf/grp open results in right split wnd
  [_] don't keep opened buffers in history -- do preview only

View-regime
  Only read -- all insert/replace disabled
  More convenient shortcuts for navigation -- ag, C-F, etc
  Toggle folds recursively by one key instead 'zA'
  Disable relativenumber


Smart code navigation
  http://andrewradev.com/2016/03/09/building-a-better-gf-mapping/


Fold-pretty
  SEE:
    http://vimcasts.org/transcripts/38/en/
    https://github.com/kshenoy/vim-origami
    http://learnvimscriptthehardway.stevelosh.com/chapters/49.html
  Fold matches
    https://github.com/carbonscott/vim-smartfold
    https://github.com/vim-scripts/foldutil.vim
    https://github.com/jkramer/vim-narrow
    https://github.com/gavocanov/foldsearches.vim
      https://github.com/thoughtstream/Damian-Conway-s-Vim-Setup/blob/master/plugin/foldsearches.vim
  Filtering search results
    Find lnum for search results
    Split file on regions -- in mid between each pair of lnum
      => So when unfolding your cursor will be on match at the center of region
    Fold each region with transparent foldtext and hi! -- as original syntax
      => '+' marker on right for folded line is enough -- no need to standout 'fg/bg' more than that
    When jumping between new matches: 'n/N' in old folded regions
      * open region to preview result's context
      * fold region back when jumping to next match
  2015-11-30 [X] Integrate in my 'fold.vim', but use left-adjusting
    : https://github.com/Konfekt/FoldText  ::> right is the must!
  [_] DEV disable foldcolumn on BufWinEnter, if there are no folds found at all
  [_] RFC printing code, FIX aligning
  [_] Dynamic foldcolumn width
    : https://github.com/thierr26/wibafoco
    : https://github.com/embear/vim-dynamicfoldcolumn
  [_] SEE: why it's slow and is there sense to integrate
    : https://github.com/Konfekt/FastFold
  [_] Folding: check by 'au' if file contents {{{\d\{0,2\}, then set foldmethod=marker, setlocal foldmethod=manual
  : TRY?DEV:USE: great idea and skeleton, but conflicts with my FoldText. SEE help.
  [_] Extract foldexpr from LucHermitte/VimFold4C:
    : ALSO: https://github.com/LucHermitte/lh-cpp
  FoldText view decisions:
    [_] Compress multiline func arguments and return types in oneline
    [_] Compress return types if too many to '<--'
    [_] Compress statements/arguments inside (...) if too many in eff tw
      : compress from ',inside,' by one arg at a time: (arg1 ... argN)
    [_] Replace func/for/if/switch/etc by UTF-8 symbols to compress more
  FoldText view to switch on the fly:
    [_] Single solid horizontal separator instead any text at all (like VimFold4C).
    : for ( cnt = 0; cnt < argc; ++cnt)
    : ---------------------------------------------------------------
    [_] Compress in one-liner until filled effective tw
    : for ( cnt = 0; cnt < argc; ++cnt)
    : { if (g_command_line[0] != '\0') { strcat(g_command_line, " ");
    [_] Walk up one line and use construction header instead content
    : for ( cnt = 0; cnt < argc; ++cnt) { ---------------------------
    [_] Compress header and content
    : for ( cnt = 0; cnt < argc; ++cnt) { if (g_command_line[0] !=...

Notches
  [_] Cycle through all notches when hovering
    https://github.com/zef/vim-cycle
  [_] Jump to next/prev notch (same/samegroup/skipnote/any) >> for DEV
  [_] Find all notches in file (qf/grp/unite) >> for RFC


Relnum
  Disable on filetypes [help, ?tagbar?, etc]


Python
  Module in file
    SEE http://www.terminally-incoherent.com/blog/2013/05/06/vriting-vim-plugins-in-python/
    Universal code py2/3: https://github.com/wilywampa/vim-ipython


Manipulations
  [_] DEV Table mode editing -- shift columns (when editing lyrics -- you need
      insert empty lines to align)
    = It could be simple map to ,.<Enter>, ,.<BS>, which moves whole
      column and inserts newline
    [_] ALT HACK edit each text in synced split, then combine
      [_] Add automatic buffer split/combine by vertical '|' delimiters
      [_] Toggle scrollbind on those buffers by itself
    SEE
    : https://github.com/dhruvasagar/vim-table-mode
    : https://github.com/Stormherz/tablify
    : https://github.com/vim-scripts/table_format.vim
    : https://github.com/vim-scripts/swapcol.vim
    : https://github.com/vimsmartcols/vimsmartcols
  [_] DEV List manipulation (for forestanza?)
    textobj
      variable
        bash: $var
          http://vi.stackexchange.com/questions/2541/recognize-bash-variable-as-distinct-word
        perl: ${var...}
        make: $(...)
      assignment
        TRY: combine with my 'keyvalue'
          https://github.com/Julian/vim-textobj-assignment
      whole list
        ? As extension to textobj-user
        bare words or all inside block of pairs
        vertical lists (columns)
      elements
        word/keyword only
          Space: no/left/right/surr
      delimiter
        separators: /./ /,\s+/ /\s+/ /\s+\n\s+/
        predefined (usefule for multichar like ',\s', '->')
        getchar (for 1 symbol as sep)
      bounds (srrnd)
        brace: {a/b/c 1}
        double-space: 'beg text'  a/b/c 1  'end text'
    operators
      srrnd: add/remove brackets to whole list
      change list delimiter
        ',\s' | '/' | '|' | '>' | ',' | '\s+\s'
      ? DEV:FIND: applying operators _foreach_ element
        # like surround, append/prepend, etc
      on 'J' join column with delimiter
      on ?? split list in column
    THINK -- search for yaml -- to flatten/unfold -- I saw smth on gh.
    <ALL which github has>
    : https://github.com/taku-o/vim-reorder-columns
    : https://github.com/leothelocust/vim-makecols
    : https://github.com/jesseschalken/list-text-object
    : https://github.com/KabbAmine/lazyList.vim
    : https://github.com/FooSoft/vim-argwrap
    : https://github.com/KabbAmine/lazyList.vim


Diff (restricted)
  TRY: https://github.com/chrisbra/vim-diff-enhanced
    BAD: when highlighting diff -- specified patt not ignored
      => IgnorePat only filters-out identical lines (beside pattern)
      DEV: treat patt as equal and don't hi! it
    :EnhancedDiff default
    :EnhancedDiffIgnorePat! \v^\d+:\d+:             # set list BUG: adds instead of reset
    :let g:enhanced_diff_ignore_pat = []            # TEMP: workaround to reset
    :EnhancedDiffIgnorePat ^\d.*\%<9c [<replace>]   # add to list
    :EnhancedDiffDisable
  DEV: https://github.com/amerlyq/vim-py3diff
    http://stackoverflow.com/questions/8861910/ignore-lines-with-particular-words-in-vimdiff-output
    https://www.reddit.com/r/vim/comments/29kdg7/make_vimdiff_ignore_certain_patterns/
    http://unix.stackexchange.com/questions/17040/how-to-diff-files-ignoring-comments-lines-starting-with
  :h diffexpr
  :h patchexpr
  :h diff-diffexpr
  Cases
    * diff AgGroup -- ignore numbers at beg /\v^\d+:\d+:/
    * diff .conf -- ignore all comments (filter out)

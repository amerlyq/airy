Leaders
	[_] CHG <Space> to operator mode: (vim-osmos?)
	:SEE https://github.com/spiiph/vim-space
		: Add v:count to <Space> insert operator -- amount of chars before exit.
		' A' -- inserts space at line end, then goes to insert regime
		' I' -- inserts space at line beg, then goes to insert regime
		' r' -- inserts space, then replace
		'  ' -- put space
		: Add v:count to <Space> paste operator -- amount of spaces before it
		' p' -- put (yanked) text with space before it
		: THINK choose what to insert -- space or inputted character?
		:	= Do like surround' chains of textobjects?
		:	=> Then <Space>p is shortcut for <Space>i<Space>p
		: v:count treated as amount of spaces inserted
		:= But then I will need some other operator for single-char inserts --
		: to work with other characters beside spaces.
		: USE CamelMotion on Space? Or smart-word for urls-like strings?
		Reuse 'q<Space>' for directly surround by spaces
		[_] FIX [Space]-insert mode after ENH stage
		[_] DEV insert single char instead of my Limio
			SEE $ vimb gh vim insert (seeen until 5th page)
			: http://vim.wikia.com/wiki/Insert_a_single_character
			: http://www.vim.org/scripts/script.php?script_id=2810
			: https://github.com/syngan/vim-operator-inserttext
			: https://github.com/aur-archive/vim-insertchar
			: https://github.com/mwgkgk/vim-operator-insert

Operators
	[_] Improve 'gC' to copy-comment multiline/block selection
	[_] DEV '[ai]k' -- copy key until ':' -- useful for yaml

	[_] DEV mapping to move in column like '{/}' -- on gG, g{, g}
		for more simple C-v block selecting
		I can make regex which sticks to \< \> and move until this condition works
		Similar to column textobj, but motion instead of region
		: https://github.com/machakann/vim-columnmove
		: https://github.com/vim-utils/vim-vertical-move
		: https://github.com/deris/columnjump
		: https://github.com/ngn/vim-column


	[_] DEV :SortLine inside selection/motion (like inside brackets)
		:= Search for operator-* plugins first, or make one myself
		:= Such operator- plugin may consolidate SortBlock as linewise move


	[_] DEV map 'gc<' for shifting whole inline comment w/o left content
				 ' <' to shift only commented text after commentstring
		:= Can shift as always and exchange spaces between old and new pos
		:SEE http://www.vim.org/scripts/script.php?script_id=2529
	[_] Put arrows to use
		FIND How to make arrows move as virtual=all, keeping hjkl as always
		THINK Arrows for lineshift?
			: http://codingfearlessly.com/2012/08/21/vim-putting-arrows-to-use/


> Plugins

Notches
	Cycle through all notches
		https://github.com/zef/vim-cycle

Outline
	DEV
		Amount of '[>:~]{n}' in line prefix -- changes 256 color to more dim
			: In 8 color term all them will have one color
		After $ -- use complete bash syntax until end of line
		SEE multi syntax regions for this -- or include all syntax into region
		SEE ft=cucumber bundle/sideways.vim/examples/example.feature -- maybe as prototype?
	[o] Vimoutliner
		[_] TODO Remove insert mappings
		2015-06-01 [X] Change mapping to more easily pressed :> use everywhere ',.'
		[X] Disable autoformating on pasting
		[_] Test and compare with vimoutliner
			: https://github.com/vimwiki/vimwiki

Python
	Module in file
		SEE http://www.terminally-incoherent.com/blog/2013/05/06/vriting-vim-plugins-in-python/
		Universal code py2/3: https://github.com/wilywampa/vim-ipython


Manipulations
	[_] DEV Table mode editing -- shift columns (when editing lyrics -- you need
			insert empty lines to align)
		= It could be simple map to ,.<Enter>, ,.<BS>, which moves whole
			column and inserts newline
		ALT HACK edit each text in synced split, then combine
		: https://github.com/dhruvasagar/vim-table-mode
		: https://github.com/Stormherz/tablify
		: https://github.com/vim-scripts/table_format.vim
		: https://github.com/vim-scripts/swapcol.vim
		: https://github.com/vimsmartcols/vimsmartcols
	[_] DEV List manipulation (for forestanza?)
		List textobj -- bare and inside block of pairs
			Srrnd: add/remove brackets -- treat whole list as textobj
		Multiline list
		Change list delimiter  ', ' -> '/' -> '|' -> '>' -> ',' -> ' + '
			Space: no/left/right/surr
			Delim: predefined/getchar
		Apply operator to each element -- like surround, append/prepend, etc
		Vertical lists (columns)
		on 'J' join column with delimiter
		on ?? split list in column
		: THINK -- search for yaml -- to flatten/unfold -- I saw smth on gh.
		<ALL which github has>
		: https://github.com/leothelocust/vim-makecols
		: https://github.com/jesseschalken/list-text-object
		: https://github.com/KabbAmine/lazyList.vim
		: https://github.com/FooSoft/vim-argwrap
		: https://github.com/KabbAmine/lazyList.vim

Leaders
	[_] CHG <Space> to operator mode: (vim-osmos?)
	:SEE https://github.com/spiiph/vim-space
		: Add v:count to <Space> insert operator -- amount of chars before exit.
		' A' -- inserts space at line end, then goes to insert regime
		' I' -- inserts space at line beg, then goes to insert regime
		' r' -- inserts space, then replace
		'  ' -- put space
		: Add v:count to <Space> paste operator -- amount of spaces before it
		' p' -- put (yanked) text with space before it
		: THINK choose what to insert -- space or inputted character?
		:	= Do like surround' chains of textobjects?
		:	=> Then <Space>p is shortcut for <Space>i<Space>p
		: v:count treated as amount of spaces inserted
		:= But then I will need some other operator for single-char inserts --
		: to work with other characters beside spaces.
		: USE CamelMotion on Space? Or smart-word for urls-like strings?
		Reuse 'q<Space>' for directly surround by spaces
		DEV:THINK:XXX: use insert as chaining operator:
			Press operator
			Choose what symbol to insert
			Then _any_ motion/textobj (if ending in INSERT else append a/i)
			Return to NORMAL
		[_] FIX [Space]-insert mode after ENH stage
		[_] DEV insert single char instead of my Limio
			SEE $ vimb gh vim insert (seeen until 5th page)
			: http://vim.wikia.com/wiki/Insert_a_single_character
			: http://www.vim.org/scripts/script.php?script_id=2810
			: https://github.com/syngan/vim-operator-inserttext
			: https://github.com/aur-archive/vim-insertchar
			: https://github.com/mwgkgk/vim-operator-insert
	[_] CHG <Tab> to operator mode
		TAB-q, TAB-l -- toggle qf lists
	[_] FIND: V-Block character column motions like '0' and '$' -- to fast select region
	[_] q[pP]['`"()...] -- inserts text and adds quotes
	2015-11-27 [X] Disable textwidth indicator column when screensize smaller then tw
	[_] Replace my direct mappings of ({["'... by  'omap <expr> Fun(getchar())'
		http://stackoverflow.com/questions/8564206/is-it-possible-to-determine-in-an-operator-pending-mapping-whether-the-motion-wi
		onoremap <expr> d (v:count == 0 \|\| v:operator != 'd') ? 'd' : 'w'
		onoremap <expr> d (v:count == 0 \|\| v:operator != 'd') ? 'd' : '<Esc>cc' . v:count . '<Esc>'


Unite
	[_] Filter -- define list of my own named filters -- for processing buffer
		Like count lines, sort by length, etc
		Combine with vim-operator-pipe -- search variants
		:Like: https://github.com/krisajenkins/vim-pipe
	[_] Regexes -- list of searches from EXAMPLES -- function declarations, etc
	[_] Populate list of useful operations from notes/regex/*


Operators
	>[_] Create vim-textobj-overhaul -- combine and improve all textobj into
	>		one seamless obj map
	[_] Improve 'gC' to copy-comment multiline/block selection
	[_] Create 'g,[oO]' which leave comment untouched as default
	[_] Create ',[oO]' which drops indent -- better use unimpared/etc to insert empty lines
	[_] g[oO] -- leaving insert w/o resetting indent -- like <C-Esc> or jF/fJ
	[_] DEV '[ai]k' -- copy key until ':' -- useful for yaml
	[_] DEV remap back 'g;' and 'g,' -- as them useful to jump between last changes
		:= Smth with <C-..> would be useful -- as analogy to C-o and C-i
		:= I've already lost <Tab> due to [Unite], so I need submode for all this?
	[_] On key sends obj/sel to new buffer in split window in separate named tab
		:= Useful for deffered analysis, focused on of several functions together
	[_] operators on base of 'exchange'
		[_] 'swap-parts'
		: * Place cursor on delimiter/character
		: * Exchange left and right expr around delimiter
		:	= by default -- any \S in left and right
		:	= more long -- input textobj which tested and applied on left and right for 'cx'
		[_] THINK? 'delete-replace' on 'dx' -- which currently empty


	[_] DEV mapping to move in column like '{/}' -- on gG, g{, g}
		for more simple C-v block selecting
		I can make regex which sticks to \< \> and move until this condition works
		Similar to column textobj, but motion instead of region
		: https://github.com/machakann/vim-columnmove
		:  https://github.com/vim-utils/vim-vertical-move
		: https://github.com/deris/columnjump
		: https://github.com/ngn/vim-column


	[_] DEV :SortLine inside selection/motion (like inside brackets)
		:= Search for operator-* plugins first, or make one myself
		:= Such operator- plugin may consolidate SortBlock as linewise move


	[_] DEV map 'gc<' for shifting whole inline comment w/o left content
				 ' <' to shift only commented text after commentstring
		:= Can shift as always and exchange spaces between old and new pos
		:SEE http://www.vim.org/scripts/script.php?script_id=2529
	[_] Put arrows to use
		FIND How to make arrows move as virtual=all, keeping hjkl as always
		THINK Arrows for lineshift?
			: http://codingfearlessly.com/2012/08/21/vim-putting-arrows-to-use/


> Plugins
ag.vim
	https://github.com/xolox/vim-notes/blob/master/autoload/xolox/notes.vim

Submode
	C-ffff bbb eee yyy
		[_] BUG: pass through regime original keys when at top/bottom of window

vim qf/grp vertical mode
	[_] when there are too many results in qf/grp -- place it in left split wnd
	[_] by preview on 'o' in qf/grp open results in right split wnd
	[_] don't keep opened buffers in history -- do preview only

View-regime
	Only read -- all insert/replace disabled
	More convenient shortcuts for navigation -- ag, C-F, etc
	Toggle folds recursively by one key instead 'zA'
	Disable relativenumber

Dict
	[_] Splits on right/left -- reuse choosing mechanism from tagbar
	[_] Save previous screens/queues in tagstack -- to jump on g=/g] and <C-T>
	[_] Autoderive
		[_] if all(char(c)<0x7f) [EnRu,EnUk,EnEn] else [RuEn,UkEn,RuRu]
		[_] Use 'r.y' yarxi backend, if some searched symbols are >\u3000
	[_] Synchroniously set language by dbus on launch when using different shortcuts
	[_] Reformat output to place main secton in beginning
	[_] BUG: can't find anything on ':Dict разделять'

Fold-pretty
	SEE:
		http://vimcasts.org/transcripts/38/en/
		https://github.com/kshenoy/vim-origami
		http://learnvimscriptthehardway.stevelosh.com/chapters/49.html
	2015-11-30 [X] Integrate in my 'fold.vim', but use left-adjusting
		: https://github.com/Konfekt/FoldText  ::> right is the must!
	[_] DEV disable foldcolumn on BufWinEnter, if there are no folds found at all
	[_] RFC printing code, FIX aligning
	[_] Dynamic foldcolumn width
		: https://github.com/thierr26/wibafoco
		: https://github.com/embear/vim-dynamicfoldcolumn
	[_] SEE: why it's slow and is there sense to integrate
		: https://github.com/Konfekt/FastFold
	[_] Folding: check by 'au' if file contents {{{\d\{0,2\}, then set foldmethod=marker, setlocal foldmethod=manual
	: TRY?DEV:USE: great idea and skeleton, but conflicts with my FoldText. SEE help.
	[_] Extract foldexpr from LucHermitte/VimFold4C:
		: ALSO: https://github.com/LucHermitte/lh-cpp
	FoldText view decisions:
		[_] Compress multiline func arguments and return types in oneline
		[_] Compress return types if too many to '<--'
		[_] Compress statements/arguments inside (...) if too many in eff tw
			: compress from ',inside,' by one arg at a time: (arg1 ... argN)
		[_] Replace func/for/if/switch/etc by UTF-8 symbols to compress more
	FoldText view to switch on the fly:
		[_] Single solid horizontal separator instead any text at all (like VimFold4C).
		: for ( cnt = 0; cnt < argc; ++cnt)
		: ---------------------------------------------------------------
		[_] Compress in one-liner until filled effective tw
		: for ( cnt = 0; cnt < argc; ++cnt)
		: { if (g_command_line[0] != '\0') { strcat(g_command_line, " ");
		[_] Walk up one line and use construction header instead content
		: for ( cnt = 0; cnt < argc; ++cnt) { ---------------------------
		[_] Compress header and content
		: for ( cnt = 0; cnt < argc; ++cnt) { if (g_command_line[0] !=...

Notches
	[_] Cycle through all notches when hovering
		https://github.com/zef/vim-cycle
	[_] Jump to next/prev notch (same/samegroup/skipnote/any) >> for DEV
	[_] Find all notches in file (qf/grp/unite) >> for RFC


Relnum
	Disable on filetypes [help, ?tagbar?, etc]

Outline
	THINK
		Write back-end core in python
		Provide interface to manipulate of outline DOM objects by API
			: THINK? base it on XHTML-dom manipulation classes?
		Use vim only as front-end to that API
			Parse .otl and keep in sync the in-memory DOM at python
			Convert current export format (.otl) into cursor position in DOM
			Launch specific API by keymaps
			Populate changes from in-memory DOM into export of (.otl)
		Then I will be able create another front-end api like OpenGL, etc
	IDEA:(graph navigation)
		By default vim works in terminal with isotropic character matric
			All textobj form aligned tree with distinct leaves
		But what about browsers, based on vim experience?
			It's clusters of text pieces with different font sizes
			They form anisotropic graph, placed on isotropic screen
			Maybe some kind of fast navigation in graph space is also possible?
	DEV
		THINK extend Markdown by indented outline syntax and new marks instead of own?
		[_] TODO switchable colorschemes 'on the fly'
			: different info requires different indent nesting, but similar coloring!
		Amount of '[>:~]{n}' in line prefix -- changes 256 color to more dim
			: In 8 color term all them will have one color
		After $ -- use complete bash syntax until end of line
		SEE multi syntax regions for this -- or include all syntax into region
		SEE ft=cucumber bundle/sideways.vim/examples/example.feature -- maybe as prototype?
		SEE embedded syntax regions highlighting
			: https://github.com/xolox/vim-notes
		[_] Allow mixed block/flow syntax as in yaml -- for one-word branches in graphviz
		Use cycleable '*/[_]/\d./' list markers (cycle for all list -- not for item)
		[_] Highlight in different colors text in `..`, '..', "..", $..# etc, use conceal
			:= it will allow distinguish hotkeys, shell commands, code, etc
			:SEE markdown syntax
			Set default embedded ft (used in bare `...`) through modeline
			:= so I could simplify bash/haskell snippets in otl
		[_] Use space instead tab -- generate regexes based on values in ts=2:sw=2:sts=2
	[o] Vimoutliner
		[_] TODO Remove insert mappings
		2015-06-01 [X] Change mapping to more easily pressed :> use everywhere ',.'
		[_] Disable autoformating on pasting
		[_] Test and compare with vimoutliner
			: https://github.com/vimwiki/vimwiki
			: http://tiddlywiki.com  -- one-page wiki
			Extract all scripts (~8) in github for converting


Python
	Module in file
		SEE http://www.terminally-incoherent.com/blog/2013/05/06/vriting-vim-plugins-in-python/
		Universal code py2/3: https://github.com/wilywampa/vim-ipython


Manipulations
	[_] DEV Table mode editing -- shift columns (when editing lyrics -- you need
			insert empty lines to align)
		= It could be simple map to ,.<Enter>, ,.<BS>, which moves whole
			column and inserts newline
		[_] ALT HACK edit each text in synced split, then combine
			[_] Add automatic buffer split/combine by vertical '|' delimiters
			[_] Toggle scrollbind on those buffers by itself
		SEE
		: https://github.com/dhruvasagar/vim-table-mode
		: https://github.com/Stormherz/tablify
		: https://github.com/vim-scripts/table_format.vim
		: https://github.com/vim-scripts/swapcol.vim
		: https://github.com/vimsmartcols/vimsmartcols
	[_] DEV List manipulation (for forestanza?)
		List textobj -- bare and inside block of pairs
			Srrnd: add/remove brackets -- treat whole list as textobj
		Multiline list
		Change list delimiter  ', ' -> '/' -> '|' -> '>' -> ',' -> ' + '
			Space: no/left/right/surr
			Delim: predefined/getchar
		Apply operator to each element -- like surround, append/prepend, etc
		Vertical lists (columns)
		on 'J' join column with delimiter
		on ?? split list in column
		: THINK -- search for yaml -- to flatten/unfold -- I saw smth on gh.
		<ALL which github has>
		: https://github.com/taku-o/vim-reorder-columns
		: https://github.com/leothelocust/vim-makecols
		: https://github.com/jesseschalken/list-text-object
		: https://github.com/KabbAmine/lazyList.vim
		: https://github.com/FooSoft/vim-argwrap
		: https://github.com/KabbAmine/lazyList.vim

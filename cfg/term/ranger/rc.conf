# vim: fdm=marker
# FAST RELOAD
# :eval fm.source(fm.confpath('rc.conf'))
# :eval fm.rifle.reload_config()
# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always", "never", "multiple" (default)
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.dash

# Use the external preview script or display simple plain text or image previews?
set use_preview_script true

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in this directory when running certain image viewers
# like feh or sxiv?  You can still open selected files by marking them.
set open_all_images true

# Be aware of version control systems and display information.
# BUG: can't use this because of russian names of some files in git.
set vcs_aware false

# State of the three backends git, hg, bzr. The possible states are
# disabled, local (only show local info), enabled (show local and remote
# information).
set vcs_backend_git enabled
set vcs_backend_hg disabled
set vcs_backend_bzr disabled

# Use one of the supported image preview protocols
set preview_images false

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
set preview_images_method w3m

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis true

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow, solarized
# set colorscheme solarized  # This value set from plugin!

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
# NOTE: In the task view you can move (j/k), reassign priorities (J/K) and kill
# tasks (dd). Only one task will run at a time.
set draw_progress_bar_in_status_bar true

# Draw borders around columns?
# NOTE: Need true to remove bug with stripping images in truecolor preview
# SUPPOSE: Bug only with reduced pics?
set draw_borders false

# Display the directory name in tabs?
set dirname_in_tabs true

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window?
set update_title true

# Set the title to "ranger" in the tmux program?
set update_tmux_title true

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar true

# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 100

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticable when ranger lags)
set flushinput true

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right false

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
# OR: to copy text by kbd. By default it's better disabled, or cursor line will be croped on the left.
set show_cursor false
map ,tc  set show_cursor true
map ,tC  set show_cursor false

# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode false

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Whether to include bookmarks in cd command
set cd_bookmarks true

# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
# disable this feature.
set preview_max_size 0

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

## For ':open_with' and ':shell'
# f   Fork the process.  (Run in background)
# c   Run the current file only, instead of the selection
# r   Run application with root privilege (requires sudo)
# t   Run application in a new terminal window
## Only with ':shell'
# p   Redirect output to the pager
# s   Silent mode.  Output will be discarded.
# w   Wait for an Enter-press when the process is done

# Clear all existing filters when leaving a directory
# set clear_filters_on_dir_change false

# Disable displaying line numbers in main column
# set line_numbers false

# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias c    shell clear
alias e    edit
alias ee   eval fm.edit_file('')
alias r    rename
alias t    touch
alias q    quit
alias q!   quitall
alias qa   quitall
alias qall quitall
alias setl setlocal


alias run  console shell -w
alias ruf  console shell -f
alias rur  console shell -r
alias make shell make; pause $?
alias hshell shell pause "$?" "[ranger preview]"
alias termnew shell -f unset RANGER_LEVEL && exec $TERMCMD -e $SHELL
alias reload_rc chain eval fm.source(fm.confpath('rc.conf')); eval fm.rifle.reload_config(); eval fm.notify('Reload rc.conf', 1)


alias filter     scout -prt
alias find       scout -aeit
alias findfy     scout -aeflst
alias mark       scout -fmr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefiklst


# ===================================================================
# == User expandable aliases
# ===================================================================

# ENH: 'diff --from-file' can compare 'one -> many'
#   => compare whole selection to current file (or another tab)
# BUG:(two spaces) on ':dfd' cursor placed after two spaces
alias dfc console df -w cmp -l
alias dfd console df -w colordiff -r
alias dfg console df -w git --no-pager diff --no-index
alias dfh console df 2>/dev/null dhex
alias dfm console df -f meld
alias dfr console df -w r.diff-fs
alias dfR console df -w r.diff-fs -d
alias dfs console df -w r.diff-fs -s
alias dfS console df -w rsync -rv --size-only --dry-run
alias dfv console df r.vim -d
alias dfV console df r.vim -c 'exe "DirDiff ".join(argv())' --
alias dfll run comm <(ls %%f) <(ls %%F)

# MAYBE:(impossible?)
# ALT: arg to ':map' to specify right column text
# ALT: embed comment into command, likewise 'map key cmd  # desc'
# ALT:TRY: filter-out '\s*#\s.*$' from ':df' arguments to simulate comments
map dfc df -w cmp -l
map dfd df -w colordiff -r
map dfD df -w colordiff -rwEZB
map dfg df -w git --no-pager diff --no-index
map dfh df 2>/dev/null dhex
map dfm df -f meld
map dfr df -w r.diff-fs
map dfR df -w r.diff-fs -d
map dfs df -w r.diff-fs -s
map dfS df -w rsync -rv --size-only --dry-run
map dfv df r.vim -d
# BUG:FIXME: ':df' splits any command by space, ignoring quoting
map dfV df r.vim -c 'exe"DirDiff\x20".join(argv())' --


alias ac   run atool -a %%f.tar.gz %%s
alias ax   run atool -x %%s
alias aX   rur atool -x %%s
alias lns  run for nm in %s; do ln -sfvt %D %d/"$nm"; done
alias for  console -p17 for nm in %s; do  %d/"$nm"; done


# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quit!
map     q quit
copymap q ZZ ZQ
copymap q ,d

map # reload_cwd
map $     redraw_window
map <C-l> reset
map <C-c> abort
map <esc> change_mode normal

map i display_file
map ? help
map % display_log
map @ taskview_open
# Spawn separate terminal for current directory
map ! termnew

# Use '<N>:' to open [N]th (;) or [N+1]th (:) command from history.
map :  chain console -p0; eval fm.ui.console.history_move(-1)
map ;  console -p0

## Shell
# Make ability to autocd when exit from subshell
map  s  chain shell $SHELL; cd_shelldir
# TRY:(ipython) reduce startup time SEE https://news.ycombinator.com/item?id=7639631
map  S  console shell
map <C-s> shell ipython
copymap s ,s

# Jump
map f  console findfy
map ,/ eval cmd("search " + fm.get_clipboard())

map cd console cd
map cp eval cmd("cda " + fm.get_clipboard())
map cP eval (lambda x: fm.open_console("cda '"+x+"'", position=4+len(x)))(fm.get_clipboard())

# Change the line mode  :default_linemode filename
map ma linemode atime
map mb linemode bytesize
map mc linemode ctime
map mf linemode filename
map mi linemode fileinfo
map ml linemode links
map mm linemode mtime
# duplicate for 'normal/default'
map mn linemode filename
map mp linemode permissions
map mt linemode metatitle
map mx linemode xperm
# duplicate for undo:
map um linemode filename

# Tagging / Marking
map t       tag_toggle
map ut      tag_remove
map '<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

# For the nostalgics: Midnight Commander bindings
map <F1> tab_open 1
map <F2> tab_open 2
map <F3> tab_open 3
map <F4> tab_open 4
map <F5> tab_open 5
map <F6> tab_open 6
map <F7> tab_open 7
map <F8> tab_open 8
map <F9> tab_open 9
map <F12> reload_rc

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       actualee
map <DELETE>   console delete
map <INSERT>   console touch

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map <C-D> move down=0.5  pages=True
map <C-U> move up=0.5    pages=True

# Jumping around
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse
copymap ] J
copymap [ K

# ===================================================================
# == Shortcuts
# ===================================================================

## Default
map c-  cd -
map c.  cd /home/media
map c<Space> cd ~
copymap c<Space> .<Space>

map ce  cd /etc
map cu  cd /usr
map cD  cd /dev
map cl  cd -r .
map cL  cd -r %f
map co  cd /opt
map cv  cd /var
map cm  eval cmd('cd /media/' + os.getenv('USER', ''))  #tab_new
map cM  cd /mnt
map cs  cd /usr/share
map cS  cd ~/.local/share
map cR  eval fm.cd(ranger.RANGERDIR)
map cX  cd /etc/X11
map c/  cd /
map c?  cd /usr/share/doc/ranger

map ca  cd /home/media/anime
map cb  cd ~/Downloads
map cc  cd ~/.config
map cg  cd ~/.PlayOnLinux
map ch  cd ~/.cache
map ct  cd /tmp
map cT  cd ~/.trash
map cw  cd ~/.wine/drive_c/Program Files
map cW  cd ~/.wine32/drive_c/Program Files


# ===================================================================
# == Actions
# ===================================================================

# External Programs
map db shell -p du --max-depth=1 -b --apparent-size
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp shell -f echo -n %d/%f | xsel -i; xsel -o | xsel -i -b
map yd shell -f echo -n %d    | xsel -i; xsel -o | xsel -i -b
map yn shell -f echo -n %f    | xsel -i; xsel -o | xsel -i -b
map yz shell -f echo -n "%s"  | xsel -i; xsel -o | xsel -i -b
map yS shell -f for nm in %s; do echo "%d/$nm"; done | xsel -i; xsel -o | xsel -i -b
map ys shell -f for nm in %s; do echo "$nm"; done | xsel -i; xsel -o | xsel -i -b

# Filesystem Operations
map =  chmod

# Rename file (substitute)
map A  eval fm.open_console('rename ' + fm.thisfile.basename)
map I  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)
map C  rename_append
map gc bulkrename
map gC eval fm.open_console('rename .' + fm.thisfile.extension, position=7)

# Special renaming for anime/manga/ranobe bookmarking
map ,<C-a>  eval cmd("nrenum  " + str(quantifier or 1))
map ,<C-x>  eval cmd("nrenum -" + str(quantifier or 1))
map ,<C-t>  eval cmd("nrenum -t  " + str(quantifier or 1))
map ,<C-r>  eval cmd("nrenum -t -" + str(quantifier or 1))

map pwf eval fm.execute_command("r.wgett " + fm.get_clipboard_q())
map pwl eval fm.execute_command("r.wgett -l " + fm.get_clipboard_q())
map pwF eval fm.execute_command("lftpget " + fm.get_clipboard_q())

map pp paste
map po paste overwrite=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dD delete
map dT shell mkdir -p ~/.trash && mv -t ~/.trash %s

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search
map n  search_next
map N  search_next forward=False
map cnt search_next order=tag
map cns search_next order=size
map cni search_next order=mimetype
map cnc search_next order=ctime
map cnm search_next order=mtime
map cna search_next order=atime

# Access to all searches
map \f console find
map \t console travel
map \m console mark
map \s console search_inc

# For interactive travel:
cmap <UP> search_next forward=False
cmap <DOWN> search_next

# Tabs
# TRY:ALT: ruf r.t r.ranger
map <C-n>     termnew -ic r.ranger
# map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gl        tab_move 1
map gh        tab_move -1
# New tab in current folder
map gn        eval fm.tab_new('%d')
map gN        tab_new ~
map uq        tab_restore
# map <a-..>    tab_open N -- remapped in plugin

# Sorting
map or toggle_option sort_reverse
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size
# BUG: selects current file because of 'tag_toggle value=True'
# BUG: jumps to the last of dirs
# map dC chain tag_toggle value=True; ...; mark_tag; tag_toggle value=False
map dC chain mark_files all=True val=True; get_cumulative_size; mark_files all=True val=False

# Settings
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zg    toggle_option vcs_aware
map zh    toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zx    toggle_option preview_images

# Filter
map gf console filter
map gF eval fm.open_console('filter .' + fm.thisfile.extension, position=7)
map uf filter
# NOTE: assign in lambda impossible for rc.conf parser
map uF unfilter

# Bookmarks
map `<any>  enter_bookmark %any
map "<any>  enter_bookmark %any
map M<any>  set_bookmark %any
map uM<any> unset_bookmark %any
map M<bg>   draw_bookmarks
copymap M<bg>  uM<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <C-p>   eval fm.ui.console.history_move(-1)
cmap <C-n>   eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <C-t>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
# ERROR: don't pastes, but mutes ^V symbol, which is not bad also
cmap <C-v>        eval fm.ui.console.paste()

# And of course the emacs way
# copycmap <up>        <C-p>
# copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Leader keybindings: external
# ===================================================================

## Internal commands

## File tree branch filtering (flat and inode combined)
# NOTE:(augments missing argument) <quantifier> = [level or {fdl} chmod-like bitmask]
map ub flat_inode 0
map bb flat_inode -t f
# Including: flat -1
map ba flat_inode fdl
map bf flat_inode  f
map bd flat_inode  d
map bl flat_inode  l
# Excluding: flat -1
map bF flat_inode dl
map bD flat_inode fl
map bL flat_inode fd
# ALT: discreet keymap: b -> f, gb -> d, ,b -> l, ub -> '' (unoptimal usage of 'b')


# To copy/move files between several terminals with ranger:
map ,y save_copy_buffer
map ,p load_copy_buffer
# Don't work as supposed: eval don't know about -sp
map ,z hshell

# Columns std view (big screen / half screen)
alias columns chain set padding_right true; set preview_files true; set preview_directories true; set column_ratios
map ,` columns 1,3,4
map ,1 columns 3,1,1
map ,2 columns 1,4,1
map ,3 columns 1,2,8
map ,4 columns 2,3,2
map ,0 chain set padding_right false; set preview_files false; set preview_directories false


## Console launch
map ,,  chain eval fm.open_console(); eval fm.ui.console.history_move(-1)
map ,.  chain eval fm.open_console(); eval fm.ui.console.history_move(-1); eval fm.ui.console.execute()

# Open/create predefined files
eval for k,nm in fm.commands['doc'].lst.items(): cmd("map O{0} doc {1}".format(k, nm))

# edit
map e  console e
map ge eval fm.open_console('e ' + fm.thisfile.basename, position=fm.thisfile.basename.find('.')+2)
# TODO:(edit) -- instead use 'open by the first riffle menu entry'
map E  edit
map ,e chain draw_possible_programs; console open_with

map x  console shell vish
map X  console mkdir
map gX console mkdir %f

# Find
map F  run f
# ALT: map to ',f'
map pf eval fm.execute_command('f ' + fm.get_clipboard_q(), flags='-w')


## Script under cursor launch
map  w    console -p6 shell  %%s
map  W    console -p9 shell -w  %%s
map <C-w> console -p10 shell -wr  %%s

map ,w    console -p6 shell  %%f
map ,W    console -p9 shell -w  %%f
map ,<C-w> console -p10 shell -wr  %%f

# THINK:DEV: 'map F' -- repeat last 'map f' -- with its flags
map  r    console -p12 shell %%d/%%f
map  R    console -p15 shell -w %%d/%%f
map <C-r> console -p16 shell -wr %%d/%%f

## External global commands
# Find in all files/folders by external 'ag', 'find', 'vim in ag', internal 'grep'
# NOTE: Internal grep can search through selected files!
## Ag group
# alias agp ag --pager  # XXX? Why I defined it?
map aa  console ag
map a;  console ag
map a.  agv
eval for k in "flvgp": cmd('alias ag{0} ag -{0}'.format(k))
eval for k in "flvgp": cmd('map a{0} eval cmd("ag{0} -Q " + fm.get_clipboard())'.format(k))
eval for k in "flvgp": cmd('map a{0} eval fm.open_console("ag{1} " + fm.get_clipboard(), position=3)'.format(k.upper(), k))

# Reuse last search and show in vim
map ,v agv
map ,g console -p5 grep
map ,m shell cd %d && abyss -a
map ,M shell cd %d && abyss -n


# You can save current console line and execute then with <C-k>
# NOTE: eval -- evaluates the python code. `fm' is a reference to the FM
# instance. To display text, use the function `p'. The result is displayed on
# the screen unless you use the "-q" option.
# Examples: :eval fm, :eval len(fm.tabs), :eval p("Hello World!")

cmap <C-y> eval fm.set_clipboard(fm.ui.console.line)
cmap <C-s> eval cmd('map ,k eval cmd("' + fm.ui.console.line + '")')
map ,K     eval cmd('map ,k eval cmd("' + fm.ui.console.line + '")')
map ,<C-k> eval fm.notify("$ ' + fm.ui.console.line + '")

#; eval fm.ui.console.close()
#; eval fm.notify("hi")
#; eval fm.notify('Map to <C-k>: "' + fm.ui.console.line + '"', duration=1, bad=False)


# ===================================================================
# == Pager Keybindings
# ===================================================================

# Change file in lister
pmap  K      move up=1
pmap  J      move down=1
copypmap K  <C-p>
copypmap J  <C-n>

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k
copypmap <DOWN>     j  <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c> @

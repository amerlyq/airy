# /etc/tmux.conf or ~/.tmux.conf
# NOTE start as 'tmux -2' for 256color support. Or there is option for config?

# See:
# implement launching scripts (is only what remain untouched)
#    https://wiki.archlinux.org/index.php/tmux
#    http://mutelight.org/practical-tmux

# FIXED: (SSH->tmux) Only console users are allowed to run the X server
set -g default-command '$SHELL'  # "reattach-to-user-namespace -l zsh"

## Determine if we should enable 256-colour support. Must be 'screen-*'.
TMUX_TERM=$TERM  # save origin terminal to env
# set -sg default-terminal screen-256color-bce
set -sg default-terminal tmux-256color
# Enable TrueColor support
set -ga terminal-overrides ",st-256color:Tc"
# rxvt-unicode*:sitm@

# Update the TERM variable of terminal emulator when creating a new session or
# attaching a existing session. Added GPG_* Envs to default ones. Fixes
# gpg-agent not being see from tmux because it is started before gpg-agent.
set -sg update-environment "TERM DISPLAY WINDOWID XAUTHORITY GPG_AGENT_INFO \
        SSH_ASKPASS SSH_AGENT_PID SSH_AUTH_LOCK SSH_AUTH_SOCK SSH_CONNECTION"

# FIXME: somehow don't work -- automatic checking of terminal
# set -sg default-terminal screen  # -s : for whole server, not only for session.
# if "[[ ${TERM} =~ 256color || ${TERM} == fbterm ]]" \
#        'set -sg default-terminal screen-256color-bce'
# bce [on|off] -- change background-color-erase setting.
# If bce is set to “on”, all characters cleared by an erase/insert/scroll/clear
# operation will be displayed in the current background color.
# Otherwise the default background color is used.

## You need this for vim + https://github.com/amerlyq/vim-focus-events
## This option is not valid?
# Check if set by '$ tmux show -s' inside tmux
set -g focus-events on
#========================================================================

# BUG: Unknown option
# set-window-option -g utf8 on
# set-option -sg status-utf8 on

set -g history-limit 10000
# By default, all windows in a session are constrained to the size of the smallest client connected to that session, even if both clients are looking at different windows. Change it.
setw -g aggressive-resize on

# Change prefix key to C-s, disable suspend on C-s before this
# As <C-m> and <Enter> are the same, them will work as before with double-press (see send-prefix)
# Use <C-j> instead of <Enter>
unbind C-b
unbind C-l
set -g prefix C-l
# It allows send command into inner window as is (like vim's C-v)
bind C-l send-prefix

# Disable escape-waiting delay in vim
set -sg escape-time 0
set-option -sg repeat-time 600
# Less stretching to get to the first item.
set -g base-index 1
setw -g pane-base-index 1


## Reload current configuration
bind-key C-r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"
bind-key | resize-pane -Z \; display-message "Zoom zoom zoom"

#Mouse works as expected
setw -g mouse on
set-window-option -g mouse on

# OLD
# setw -g mode-mouse on
# set-window-option -g mode-mouse on
# set-option -g mouse-select-pane on
# set -g mouse-resize-pane on
# set -g mouse-select-window on

# Activity
set-window-option -g monitor-activity on
set-option -g visual-activity on
set-window-option -g automatic-rename on
set-window-option -g xterm-keys on #After doing that, mappings of <Esc>[1;3A seemed to work.
# ======================================================

# use vi-keys inside copy-mode
set-window-option -g mode-keys vi
set-option -g status-keys vi

# vi-style controls for copy mode
setw -g mode-keys vi


# vim's definition of a horizontal/vertical split is reversed from tmux's
bind C-n split-window -v
bind C-m split-window -h
unbind '"'
unbind %

## move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-down new-window
bind -n S-left prev
bind -n S-right next
bind -n C-left swap-window -t -1
bind -n C-right swap-window -t +1

# moving between windows with vim movement keys
bind -r , select-window -t :-
bind -r . select-window -t :+

# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

## feel free to change the "1" to however many lines you want to resize by, only one at a time can be slow
#bind < resize-pane -L 1
#bind > resize-pane -R 1
#bind - resize-pane -D 1
#bind + resize-pane -U 1
#
## bind : to command-prompt like vim
## this is the default in tmux already
#bind : command-prompt


# ======================================================

# toggle last window like screen
bind-key C-a last-window

# shortcuts for moving between windows
#bind -r C-p select-window -t :-
#bind -r C-n select-window -t :+

# shortcuts for interaction with X selection buffer
#bind C-y save-buffer ~/.tmux-buffer \; run-shell "xsel -i <~/.tmux-buffer && rm ~/.tmux-buffer"
#bind C-p run "tmux set-buffer | \"$( xclip -o )\"; tmux paste-buffer"

# ======================================================

# To browse URL's inside tmux you must have urlview installed and configured.
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'

##CLIPBOARD selection integration: prefix,C-y
bind C-y run "(tmux show-buffer | xsel -i -b) && tmux display-message \"copied!\""
bind C-p run "(xsel -o -b | tmux load-buffer -); tmux paste-buffer "
# bind C-p run "tmux set-buffer -- \"$(xsel -o -b)\"; tmux paste-buffer "


# bind -r C-p select-window -t :-
# bind -r C-n select-window -t :+
#  # shortcuts for interaction with X selection buffer
# bind C-y save-buffer ~/.tmux-buffer \; run-shell "xsel -i <~/.tmux-buffer && rm ~/.tmux-buffer"
# bind C-p run "tmux set-buffer | \"$( xclip -o )\"; tmux paste-buffer"

# y and p as in vim
bind Escape copy-mode
bind [ copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection
#bind -t vi-copy 'Space' halfpage-down
#bind -t vi-copy 'Bspace' halfpage-up

# To allow the title bar to adapt to whatever host you connect to
set -g set-titles on
set -g set-titles-string "#T"



## Color theme / Status bar # Bad wolf Mod
set -g pane-border-fg colour245
set -g pane-active-border-fg colour39
set -g message-fg colour16
set -g message-bg colour221
set -g message-attr bold

# ALT: bind-key -n C-F3 set-option -g status #Ctrl+F3 Combo
## Toggle status line visibility
bind-key T set-option -sg status
set-option -sg status on
set-option -sg status-fg colour231
set-option -sg status-bg colour234
set-option -sg status-left-length 20
set-option -sg status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set-option -sg status-right '#[fg=colour247,bg=default,nobold,noitalics,nounderscore] #16T#[fg=colour233,bg=default,nobold,noitalics,nounderscore] #[fg=colour247,bg=colour233,nobold,noitalics,nounderscore] ⌚ %Y-%m-%d | %H:%M '
set-option -sg window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[fg=colour249]#W "
set-option -sg window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"
#
# enables highlighting the current window using the yellow colour. You may also specify one of: "black", "red", "green", "blue", "magenta", "cyan" and "white" or write "colour\d+", e.g. "colour5" or "colour170"
set-window-option -g window-status-current-bg yellow
set -g window-status-activity-attr bold

## CHECK: what if file is not exist?
if-shell "[[ -f ~/.cache/airy/theme-tmux.conf ]]" \
        "source-file ~/.cache/airy/theme-tmux.conf"

# # default window title colors
# set-window-option -g window-status-fg colour244 #base0
# set-window-option -g window-status-bg default
# #set-window-option -g window-status-attr dim
# # active window title colors
# set-window-option -g window-status-current-fg colour166 #orange
# set-window-option -g window-status-current-bg default
# #set-window-option -g window-status-current-attr bright
# # pane border
# set-option -g pane-border-fg colour235 #base02
# set-option -g pane-active-border-fg colour240 #base01
# # message text
# set-option -g message-bg colour235 #base02
# set-option -g message-fg colour166 #orange
# # pane number display
# set-option -g display-panes-active-colour colour33 #blue
# set-option -g display-panes-colour colour166 #orange
# # clock
# set-window-option -g clock-mode-colour green #green

## search buffer (using less if Vim is not available)
# http://sunaku.github.io/tmux-searchable-scrollback.html
bind-key -n M-/ capture-pane -S -32767 -J \; new-window ' \
  tmux save-buffer - \; delete-buffer | {                 \
    vim -R -c "set nofen is hls ic" -;                    \
    test $? -eq 127 && less;                              \
  };                                                      \
' \; send-keys G ? # go to bottom and search upward

## smart pane switching with awareness of vim splits
# https://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

## Prevent tmux freezing when lots of text is sent to output and <C-c> useless
# This can be prevented by limiting how much text is printed to the console at any time.
# https://wiki.archlinux.org/index.php/Tmux
# OLD:
# setw -g c0-change-trigger 10
# setw -g c0-change-interval 250

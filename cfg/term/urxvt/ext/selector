#!/usr/bin/env perl

use strict;
use warnings;
no strict 'subs';  # Use because 'urxvt::*' unimported

our %keymap = (
    'y' => sub { $_[0]->status_osd("yes"); $_[0]->deactivate(); },
    'n' => sub { $_[0]->status_osd("no");  $_[0]->deactivate(); },
);


sub status_osd
{
    my ($self, $pref, $str) = @_;
    my $status = $pref .': ';
    $status .= $str if $str;

    $self->{overlay}->set(0,0, $self->special_encode($status));
}

# SEE
#   http://perldesignpatterns.com/?DispatchTable
#   http://perldoc.perl.org/perlop.html#Regexp-Quote-Like-Operators
#   http://perl101.org/arrays.html
sub fmt_key
{
    my ($self, $event, $keysym) =  @_;
    my $key = '';
    $key .= 'A-' if ($event->{state} & $self->ModLevel3Mask);
    $key .= 'M-' if ($event->{state} & $self->ModMetaMask);
    $key .= 'C-' if ($event->{state} & urxvt::ControlMask);
    $key .= 'S-' if ($event->{state} & urxvt::ShiftMask);
    $key .= lc chr($keysym);
    return $key;
}

sub key_press {
    my ($self, $event, $keysym, $string) =  @_;
    # Check on white list: $action =~ m/[0-9][a-z]/i
    # my $key = fmt_key(@_);
    # ($keymap{$key} || sub {})->(@_);
    # $self->status_osd($key);

    1  # EXPL intercept all keys until confirm choice
}


sub activate {
    my ($self) = @_;
    $self->{overlay}->show();
    $self->enable (
        key_press => \&key_press,
        tt_write  => sub { 1 }
    );
}

sub deactivate {
    my ($self) = @_;
    $self->{overlay}->hide();
    $self->disable('key_press', 'tt_write');
}


sub on_action { $_[0]->on_user_command($_[1]); () }
sub cmd_err { warn "selector: unknown command '$_[0]'\n"; () }
sub on_user_command
{
    my ($self, $cmd) = @_; $_ = $cmd;
    return () unless s/^selector://;

    if (/^run$/) {
        $self->activate("Run? (y/n)");

    } else { cmd_err($_); }

    ()
}

sub on_start
{
    my ($self) = @_;
    $self->{overlay} = $self->overlay(0,-1, $self->ncol,1, urxvt::OVERLAY_RSTYLE, 0);
    $self->{overlay}->hide();

    ()
}

sub on_destroy
{
    my ($self) = @_;
    $self->deactivate();
    delete $self->{overlay} if $self->{overlay};
}

# vim: ft=perl
# LOADED: package $pkg; use strict 'vars'; use utf8; no warnings 'utf8';
use lib "$ENV{HOME}/.urxvt/ext";
use urxcommon qw(&cmd_err &run_err &text_metrics);

# @ref: GPLv3, (c) amerlyq, 2015
# @brief: Shell independent copy-paste extension for clipboard by keyboard.
# @credits: http://www.github.com/muennich/urxvt-perls
# @config: .Xresources
#   URxvt.perl-ext-common: ...,clipboard
#   URxvt*clipboard.copycmd:  xsel -ib  # xclip -i -selection clipboard | pbcopy
#   URxvt*clipboard.pastecmd: xsel -ob  # xclip -o -selection clipboard | pbpaste
#   ! updated whenever the PRIMARY selection changes
#   URxvt*clipboard.autocopy: true
#   URxvt*keysym.C-S-C:  perl:clipboard:copy
#   URxvt*keysym.C-S-V:  perl:clipboard:paste:default
#   URxvt*keysym.M-c:    perl:clipboard:copy
#   URxvt*keysym.M-v:    perl:clipboard:paste:default
#   URxvt*keysym.M-C-v:  perl:clipboard:paste:escaped
#   URxvt*keysym.M-m:    perl:clipboard:paste:execute


# =================== CONFIG ========================

my %modes = (
    default => sub { $_[0]; },
    # Escape each character, specific for shell.
    escaped => sub { $_[0] =~ s/([!#\$%&\*\(\) ='"\\\|\[\]`~,<>\?])/\\$1/gr; },
    # Trim spaces and compress line breaks, append <CR>.
    execute => sub { ($_[0] =~ s/^\s*|\s*$//gr) =~ s/\s*\n+\s*/\n/gr . "\n"; }
);

# =================== IMPL ========================

sub status_osd
{
    my ($self, $pref, $msel) = @_;
    my $status = $pref .': '. ($msel ? text_metrics($msel): "(none)");
    $self->{overlay}->set(0,0, $self->special_encode($status));
    $self->{overlay}->show();
    $self->{timer}->after(1);  # CHECK Can't call method "set" on an undefined value
}

sub copy
{
    my ($self) = @_;
    my $msel = $self->selection();
    if ($msel) {
        my $cmd = $self->{copy_cmd};
        return run_err($cmd) unless (open(CLIPBOARD, "| $cmd"));
        utf8::encode $msel;
        print CLIPBOARD $msel;
        close(CLIPBOARD);
    }
    $self->status_osd("copied", $msel);
}

# THINK could filter from text shortcuts for ZSH like ',s' and ',d'
sub paste
{
    my ($self, $nm) = @_;
    # EXPL need local value to refer it inside subroutines
    my $str = `$self->{paste_cmd}`;
    return run_err($self->{paste_cmd}) if $?;
    $self->tt_paste($modes{$nm}->($str));
    # printf("%s -> %s\n", $str, $modes{$nm}->($str));  # REMOVE
    $self->status_osd($nm, $str);
}

# =================== EVENTS ========================
sub on_user_command { $_[1] =~ s/^clipboard:// and on_action(@_); }
sub on_action
{
    my ($self, $cmd) = @_; $_ = $cmd;
    if (/^copy$/) {
        $self->copy();

    } elsif (/^paste:\w+/) {
        /:(\w+)$/;
        return cmd_err($_) unless $modes{$1};
        $self->paste($1);
    } else { cmd_err($_); }

    ()  # return false : else <consume event>
}

sub on_start
{
    my ($self) = @_;
    $self->{copy_cmd}  = $self->x_resource('%.copycmd')  || 'xsel -ib';
    $self->{paste_cmd} = $self->x_resource('%.pastecmd') || 'xsel -ob';
    if ($self->x_resource_boolean('%.autocopy')) {
        # Returning a true value aborts selection grabbing. It will still be highlighted.
        $self->enable(sel_grab => sub { $_[0]->copy; ()});
    }
    my $osdw = 18;
    $self->{overlay} = $self->overlay(-1,-1, $osdw,1, urxvt::OVERLAY_RSTYLE, 0);
    $self->{timer} = urxvt::timer ->new ->cb ( sub {
            $self->{overlay}->hide();
            $self->{overlay}->set(0, 0, " " x $osdw);  # Clear overlay.
        } );
    ()
}

sub on_destroy
{
    my ($self) = @_;
    delete $self->{timer} if $self->{timer};
    delete $self->{overlay} if $self->{overlay};
}


# ==================== MERGE =================

sub leave {
    my ($self) = @_;
    $self->{pastestr} = undef;
    $self->{overlay}->hide();
    $self->disable("key_press");
}

sub key_press {
    my ($self, $event, $keysym, $string) =  @_;
    if ($keysym == 121) { # y
        $self->tt_paste(${$self->{pastestr}});
        $self->leave();
    } elsif ($keysym == 110) { # n
        $self->leave();
    }

    1  # EXPL intercept all keys until confirm choice
}

sub on_tt_paste {
    my ($self, $octets) = @_;
    return unless ($octets =~ tr/\012\015//);

    $self->{pastestr} = \$octets;
    # BUG timer must be disabled until leave event
    $self->status_osd("sure? (y/n)", $self->locale_decode($octets));
    $self->enable (key_press => \&key_press);

    1  # EXPL interrupt paste process
}

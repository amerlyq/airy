#!/bin/bash -eu
# USAGE:
#   env $ [DEVPATH=..] [MONITOR_XRANDR=..] ./$0
# stdin $ echo '[<sha1>|*] eDP1 --primary' | ./$0

set -o pipefail
set -o noglob

# Config
reflow(){ sed 's/#.*$//;s/^\s*//;s/\s*$//;/^$/d'; }
[[ -t 0 ]] || config=$(reflow)
if [[ -z ${config-} ]]; then
  [[ ${MONITOR_XRANDR-} ]] || source ~/.shell/profile
  config=$(reflow <<< "$MONITOR_XRANDR")
fi

# Find connected active displays
xlist(){ xrandr -q | sed -rn '/^([[:alnum:]-]+) '"$1"'.*/s//\1/p'; }
conn=( $(xlist 'connected ') )
discon=( $(xlist 'disconnected [^(]') )
shas=( $(r.monitor-edid-hash | cut -f1 -d' ') )
active(){ [[ " ${conn[@]} " =~ " $1 " ]]; }   # HACK: match whole words
has(){ [[ " ${shas[@]} " =~ " $1" ]]; }       # HACK: match <beg> of any word

# THINK: deprecate '*', implying it by default, if no sha1 found
#   BAD: can be confused with output abbrev

# Construct xrandr arguments
add(){ cmd+=( --output "$1" "${@:2}" )
  [[ " ${@:2} " =~ " --off " ]] || cmd+=( --auto ); }
parse_line(){
  if [[ $1 =~ ^[0-9a-f]{8,40}$ ]]; then
    has "$1" || return 0 && shift
  elif [[ $1 == '*' ]]; then shift; fi
  active "$1" || return 0 && add "$@"
}

cmd=()  # Construct ordered list of active monitors
while read -ra args; do (( ${#args[@]} )) || continue
  parse_line "${args[@]}"; done <<< "$config"

# HACK: use first mon as primary if not determined
# if [[ " ${cmd[@]} " =~ " --primary " ]]
# then cmd=( "${cmd[@]:0:2}" --primary "${cmd[@]:2}" ); fi

# Find enabled but disconnected w/o '\*' (--auto will disable them)
for m in "${discon[@]}"; do add "$m"; done

# HACK: standalone 'xrandr' -- don't print to stdout
#   => no cmd => no monitor at all => assume Xorg error
(( ${#cmd[@]} )) || exit

exec xrandr "${cmd[@]}"

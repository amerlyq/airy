#!/bin/bash -eu
# USAGE: under ssh and chroot
#   $0 <cmd> -- run cmd with daemon lock
#   $0 -- re-run killed daemon for existing sessions
#   $0 -s -- run server in no-fork mode
#   $0 -k -- explicitly kill forked server

exe=$(readlink -e "$0")
exe=${exe%/*/*}/exe
session=${TMPDIR:-/tmp}/xsel-shared

# USAGE: [L]=socket [S]=session [a]=auto-xsel [k]=kill_unused [K]=kill_always [s]=server
opts=; while getopts 'hL:akKs' o; do case $o
in :|'?') exit 1
;; h) exec grep '^# USAGE:' "$0"
;; L) socket=$OPTARG
;; S) session=$OPTARG
esac; opts+=$o; done; shift $((OPTIND - 1))
has(){ [[ $opts =~ [$*] ]]; }

# ATT! don't use unix-domain socket as .lock -- session must exist independently
#   => E.G. when server/socket are accidentally killed
lock=$session.lock    # shared session lock for <cmd>  ALT: mkdir $session and use as .lock
pidfile=$session.pid  # exclusive lock for daemon
# Listening unix-socket -- accepts multiple servers
[[ -n ${socket-} ]] || socket=$session.local

srv_cmd=( "$exe/server" "$socket" "$exe/auto" )
kill_cmd=( daemonize -kf "$pidfile" -p '/usr/bin/socat' )

has a && exec "$exe/auto"
# NOTE:(-x): run no-fork server if no daemon server is running yet
has s && exec flock -xonE13 "$pidfile" "${srv_cmd[@]}" "$@"
# NOTE:(-s): allow to kill daemon even when session is active, but skip if started onexit()
has k && exec flock -sonE13 "$lock" "${kill_cmd[@]}"
# NOTE:(-x): kill only wild daemon w/o any session attached
has K && exec flock -xonE13 "$lock" "${kill_cmd[@]}"

# NOTE: exclusive lock to kill daemon only after last session shared lock released
onexit(){ flock -xonE13 "$lock" "${kill_cmd[@]}" || (($?==13)); }
trap 'onexit' HUP QUIT TERM INT ERR

# NOTE: shared lock per each instance of <cmd> with daemon server resurrection inside
# CHECK: daemon called each time -- because lock removed after server creation
flock -osw5 "$lock" \
  daemonize -wf "$pidfile" -- \
    "${srv_cmd[@]}" -- \
    ${@+flock -sFnE15 "$lock" "$@"}

onexit

# WARN:(racing): if another pr run between <singleton> and <onexit>
#   => daemon will be run again and will overwrite $$ inside lock file
# ::: this outer "$lock" protects 'gap' between <singleton> and <exec cmd>

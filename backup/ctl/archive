#!/bin/bash
#%USAGE: $ ./$0 [<history|secrets|chat>...]
#%ONELINE:(fast): $ tar -I lz4 --xattrs -cpvf "$(hostname)-$(date +%Y%m%d_%H%M%S).tar.lz4" ...
#%  CMP: https://catchchallenger.first-world.info/wiki/Quick_Benchmark:_Gzip_vs_Bzip2_vs_LZMA_vs_XZ_vs_LZ4_vs_LZO#Compression_time
#%PERF: 6 min = 13 topics = 4.7GB total
set -euo pipefail

# [_] TRY: /net/backup BAD? store backup directly to NAS -- may corrupt transmitted archives
# DEV:USE: "pigz" -- parallel gzip
# BET:PERF: "zstd" from libarchive instead of "xz"
# BET:TRY: "borg"

## CHG: place into synced dir from profile
dst=${BACKUP_DIR_ROOT:-/tmp/backups}
args=( "$@" )


## Store all permissions and extended attributes.
#   (otherwise many programs will stop working!)
make_backup(){ local f nm=$1
  # shellcheck disable=SC2076
  ((${#args[@]})) && [[ ! " ${args[*]} " =~ " $nm " ]] && return
  f=$dst/$nm-$(hostname)-$(date +%Y%m%d_%H%M%S).tar.gz
  mkdir -p "${f%/*}"
  sed -r "
    s/^\s+//              # indenting spaces
    /(^#|  # ).*$/s///    # comments (separate and inline)
    s/\s+$//              # trailing spaces (ALSO: left before comments)
    /^\s*$/d              # empty lines
    s|~|$HOME|            # expand home dir
  " | tar --xattrs -pT- -czvf "$f"
  # --exclude-from="$fexc"
}

#%INFO: backup history and other local db (both binary and textual)
# ALT: use bash array with globs in sep files -- instead of parsing them myself
make_backup history <<EOT
  ~/.local/share/airy/dict-words-en.txt
  ~/.local/share/airy/dict-words-ru.txt
  ~/.cache/vim/plugins/mru_file
  ~/.config/mpd/history
  ~/.config/mpv/watch_later
  # ~/.config/selfspy/selfspy.sqlite
  ~/.config/VirtualBox
  ~/.cache/.bluetoothctl_history

  # WARN: remove them from ~/.config, otherwise they override ~/.local
  #   ~/.config/ranger => ~/aura/airy/ranger
  ~/.local/share/ranger/bookmarks
  ~/.local/share/ranger/history
  ~/.local/share/ranger/tagged

## cli
  ~/.local/share/gdb/history
  ~/.local/share/zsh/history
  ~/.config/radare2/history
  # ~/.fbless_save
  ~/.ipython/profile_default/history.sqlite
  ~/.bash_history
  ~/.jhistory
  ~/.local/share/mcomix
  ~/.local/share/zathura
  ~/.python_history
  ~/.sbcl_history
  ~/.sqlite_history
  ~/.w3m/history
  ~/.wget-hsts
EOT

## browsers (frequently updating cache)
ffprf=$(find ~/.mozilla/firefox -maxdepth 1 -type d -name '*.default' -print -quit)
make_backup browsers <<EOT
  ~/.config/qutebrowser/autoconfig.yml          # transient settings
  ~/.local/qute-proxy                           # additional session
  ~/.local/share/qutebrowser/cmd-history
  ~/.local/share/qutebrowser/cookies
  ~/.local/share/qutebrowser/history.sqlite
  # ~/.local/share/qutebrowser/history.sqlite-wal  # WARN: only on running
  $ffprf/places.sqlite                          # bookmarks
  $ffprf/sessionstore.js                        # opened tabs
  $(find "$ffprf/sessionstore-backups" -maxdepth 1 -type f \( -name '*.js' -o -name '*.js-*' \) -print)
EOT



# BET:DEV:SECU create versioned *tomb* for secrets backup
make_backup secrets <<EOT
  ~/.android                  # authorized adb shell
  ~/.config/copyq
  ~/.config/kdeconnect        # authorized clipboard sharing
  ~/.config/syncthing         # certificates and ids
  ~/.gnupg                    # export keys
  ~/.password-store           # NEED: ~/.gnupg
  ~/tomb
  # ~/.password.tomb
  # ~/.password.tomb.key
  ~/.ssh                      # copy keys
  ~/.weechat/certs/nick.pem   # privatkey-login
  ~/.znc
  # /work/cache/gpg
EOT


# WARN:CHG: archive whole ~/.weechat/ -- I may modify some plugins in-place
make_backup chat <<EOT
  ~/.purple/logs
  ~/.weechat/logs
EOT


# = custom digital presets
make_backup krita <<EOT
  ~/.local/share/krita
  ~/.cache/krita
EOT

# = syncthing folders
make_backup sync <<EOT
  # ~/books
  # ~/mems
  ~/sync
  ~/sync_kedi
EOT

# ALSO: tar -I lz4 --xattrs -cpvf "/tmp/x-$(hostname)-$(date +%Y%m%d_%H%M%S).tar.lz4" /data/aura
make_backup aura <<< ~/aura             # = all personal repos
make_backup gamesaves <<< ~/gamesaves   # = aggregated game saves
make_backup hub <<< ~/hub               # = code examples and teaching materials
make_backup sdk <<< ~/sdk               # = misc cloned FOSS code
make_backup research <<< ~/research     # = ongoing research topics
make_backup vim <<< ~/.cache/vim/cache  # = vim files backups
make_backup work <<< ~/work             # = archived work topics
# make_backup mail <<< ~/.mail            # = offline emails
# make_backup doc <<< /work/doc           # = working notes

# WARN: symlink "/_dld" don't work directly
make_backup dld <<< /data/_dld          # = unsorted downloads (always move media files to /data)

make_backup etc <<< /etc ||:      # = system-wide user configs (skipping passwords w/o sudo)
# make_backup srv <<< /srv          # = ftp/http/tftp/vbox-share/etc
# make_backup usrsrc <<< /usr/src   # = some downloaded sources

# ALSO: defects analysis reports
# find /work/{bug,task,task.done,task.seized} -name '*.nou' -print0 | tar -cvzf analysis-$(hostname)-$(date +%Y%m%d_%H%M%S).tar.gz --null -T -

make_backup itemlists <<< ~/backup-lists ||:

## NOTE: save lists to be able to restore same hierarchy on demand e.g. to remember active games
# [_] MAYBE:DEV also save some magnet-donkey-torrent-like hash-sum
#   => to search "future IPFS web" for exact copy OR verify if identical
if ((!${#args[@]})) || [[ " ${args[*]} " =~ " flist " ]]; then
  dtmp=$(mktemp -d)
  gather_flist(){ local fl d=$1
    # [[ -d $d ]] || return 0
    fl=$(realpath -m "$dtmp/$d")
    mkdir -p "${fl%/*}"
    # [_] BET: include mod-time '%y\t%T+\t%s\t%p\n' to estimate time of my last action/attention to each item
    find "$d" -not -readable -prune -o -printf '%y\t%s\t%P\n' > "$fl"
  }
  gather_flist /games  # /games and /opt must backup filelist instead of content
  gather_flist /opt
  gather_flist /usr/local
  # MAYBE:ALSO: bundle, cabal, cargo, gem, npm, etc. | ALSO: ~/.{cmake,conan}
  gather_flist ~/.cache/aurutils   # ~~ and history of everything which we installed
  pacman -Qd > "$dtmp/pacman-implicit"
  pacman -Qe > "$dtmp/pacman-explicit"  # ~~ same for ./odd-packages installed from pacman
  make_backup filelists <<< "$dtmp"
  # rm -rf "$dtmp"
fi

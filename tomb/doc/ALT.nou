
Manually create w/o !tomb ⌇⡟⡢⢓⢌
  ALSO:(optional): use NBD instead of SSHFS

  [_] WTF: difference between !tomb and manual setup
    GitHub - dyne/Tomb: the Crypto Undertaker ⌇⡟⡢⢜⣤
      https://github.com/dyne/Tomb

  Encrypted remote backups with SSHFS and LUKS ⌇⡟⡢⡱⣷
    https://ruderich.org/simon/notes/encrypted-remote-backups
    Rysiekúr Memesson: "Encrypted remote backups using SSHFS and LUKS: ht…" - Mastodon ⌇⡟⡢⢓⠐
      https://mastodon.social/@rysiek/100265647215971016

  dm-crypt/Device encryption - ArchWiki ⌇⡟⡦⠞⣊
    https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#Loopback_filesystem

  GitHub - fw42/sshluks: LUKS crypto containers over SSHFS on untrusted remote storage ⌇⡟⡢⡼⡗
    https://github.com/fw42/sshluks

  2009-01 Incremental backups to untrusted hosts – Vidar's Blog ⌇⡟⡢⢌⢆
    https://www.vidarholen.net/contents/blog/?p=8
    ::: BAD:PERF: 10x traffic per request
      rsync_upload=120MiB total=40GB partition=400GB
      => ext3_download=540MiB ext3_upload=1000MiB
    [_] CHECK:PERF:OBSOLETE?
      https://www.reddit.com/r/linuxadmin/comments/gzstxj/rsyncnet/fto0ipb/?utm_source=reddit&utm_medium=web2x&context=3
        ~ in recent years sshfs and FUSE in general are much more efficient and performant.
        ~ Copy a 5GB file onto it and only 5GB of network traffic
      [_] SEE: SSHFS performance : linuxquestions ⌇⡟⡢⢥⠱
        https://www.reddit.com/r/linuxquestions/comments/9btk9s/sshfs_performance/
    !!! FAIL:SECU: file --inplace !corruption! if transfer has incomplete writes
      - in case of network errors will be corrupted receiving file
      - then if local/remote file was corrupted before sync -- corruption will spread everywhere

  I need a secure and transparent backup method! / Networking, Server, and Protection / Arch Linux Forums ⌇⡟⡢⢒⢄
    https://bbs.archlinux.org/viewtopic.php?id=109419
      !!! CFG: QoS traffic shaping to reduce network channel saturation for long backup uploads
    ::: NICE:IDEA: two-stage upload
      * keep identical local copy of encrypted container
      * luksopen && mount && !rsync OR !rdiff-backup data into local container
        Using rdiff-backup with SSHFS | Linode ⌇⡟⡢⢟⠛
          https://www.linode.com/docs/security/backups/using-rdiff-backup-with-sshfs/
      * !rsync sparse container to remote as blob
        + NICE: "sync" and "transfer" are separate in time
        + NICE: no need for passphrase anymore at the moment of transfer
        + NICE: economic traffic (rounded on fs block size inside container)
        + IDEA:MAYBE? no need to encrypt traffic by slow SSHFS
          - FAIL: makes possible accumulating versioned changes by @EvilMaid※⡟⡢⢗⠱
        + BET:PERF: !rsync to public NFSv3 LAN share instead of using !rsync--ssh
      * BAD: duplicate data on local PC, especially detrimental for large volumes
      * BAD:SECU: encrypted container still available for local adversary

  Mount 2TB encrypted-container file through SSHFS (performance question) ⌇⡟⡢⢚⠠
    https://www.linuxquestions.org/questions/linux-general-1/mount-2tb-encrypted-container-file-through-sshfs-performance-question-4175453734/
    ::: PERF: !sshfs has performance issues on network/storage server BET:USE: !cifs works more stable (file=2TiB is OK)

  linux - faster way to mount a remote file system than sshfs? - Super User ⌇⡟⡦⠧⠸
    https://superuser.com/questions/344255/faster-way-to-mount-a-remote-file-system-than-sshfs


========================================
BET: replace !dig by plain !cryptsetup and !gpg
SRC: ※⡟⡢⡱⣷

SETUP
  $ cd /srv/tomb  # ALT: /cache/tomb
  $ sshfs -f --debug -o "umask=0077,noexec,no_readahead,allow_root" lc:/me/tomb .
  $ sudo mkdir -m700 . && chown "$USER:$USER" . && chattr +C .
  $ touch aura.luks
  $ chattr +C aura.luks
  $ truncate -s 1G aura.luks
    # BAD: not supported by SSHFS $ fallocate -l 1G aura.luks
  $ pass generate tomb/aura
  $ pass tomb/aura | sudo cryptsetup -v --type luks2 --key-file - --cipher aes-xts-plain64 --hash sha512 --key-size 512 --pbkdf argon2id --key-slot 0 luksFormat --header ~/tomb/aura.keys -- aura.luks
    # BUG: newline is part of password
    # INFO: this LUKS2 headers/metadata backup is 16MB now :: https://cdn.kernel.org/pub/linux/utils/cryptsetup/v2.1/v2.1.0-ReleaseNotes
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksAddKey --header ~/tomb/aura.keys -- aura.luks # =(vipe<&-) OR =(stty -echo;cat)
  $ sudo cryptsetup luksDump --header ~/tomb/aura.keys -- aura.luks
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksOpen --header ~/tomb/aura.keys -- aura.luks tomb-aura
  $ sudo dmsetup table /dev/mapper/tomb-aura
  $ sudo mkfs.ext4 -L tomb-aura -m0 -E lazy_itable_init=0,lazy_journal_init=0 /dev/mapper/tomb-aura
  $ mount /dev/mapper/tomb-aura /mnt
  $ sudo install -m 700 -o $USER -g $USER -d -- /mnt
  $ git clone --bare "file:///@/todo" /mnt/todo.git
  $ git -C /@/todo remote set-url origin file:///mnt/todo.git
  $ umount /dev/mapper/tomb-aura
  $ sudo cryptsetup -v close tomb-aura
  $ fusermount -u /srv/tomb

SYNC
  $ sshfs -f --debug -o "umask=0077,noexec,no_readahead,allow_root" lc:/me/tomb /srv/tomb
    # CHECK:(,compression=yes): useless due to sending encrypted data blocks
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksOpen --header ~/tomb/aura.keys -- /srv/tomb/aura.luks tomb-aura
  $ mount /dev/mapper/tomb-aura /mnt
  $ Gl
  $ ... $ ATT: may error-out due to merge conflict => run rest o commands yourself
    BET: sync tomb first -- and only then use "Gp" for rest of repos
  $ Gp
  $ sync
  # HACK: close tomb loop device, which prevents unmounting
  # losetup -a | cut -d: -f1 | sort -n | tail -1 | xargs -r sudo losetup -d
  $ umount /dev/mapper/tomb-aura
  $ sudo cryptsetup -v close tomb-aura
  $ fusermount -u /srv/tomb

RESIZE
  $ sshfs -f --debug -o "umask=0077,noexec,no_readahead,allow_root" lc:/me/tomb .
  # OR: $ r.tomb-backup -m
  $ losetup -a | cut -d: -f1 | sort -n | tail -1 | xargs -r sudo losetup -d
  $ sudo umount /dev/mapper/tomb-aura
  $ sudo cryptsetup -v close tomb-aura
  $ truncate -s 10G /srv/tomb/aura.luks
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksOpen --header ~/tomb/aura.keys -- /srv/tomb/aura.luks tomb-aura
  $ sudo e2fsck -f /dev/mapper/tomb-aura
  $ sudo resize2fs /dev/mapper/tomb-aura
  $ sudo mount /dev/mapper/tomb-aura /mnt
  $ for r in /mnt/*.git; do printf '\n[%s]\n' $g; git -C $r fsck || git -C $r gc --aggressive; done
  # ALSO: $ git annex fsck

!git-annex
  $ cd /cache
  $ gcI myrepo
  $ r.annex-init $(hostname)
  $ ga .gitattributes && gc
  $ gA && gai
  $ r.tomb-backup -m
  $ r.tomb-backup -c .
  $ (cd /mnt/myrepo.git && r.git-my-repo -m)
  $ gas
  $ (cd /mnt/myrepo.git && git annex init "tomb-nas-aura")
  $ r.tomb-backup -u

[_] MOVE? -> ☤/annex

CLONE:tomb
  $ cd /aura
  $ r.tomb-backup -c research
    # = $ git clone -o aura file:///mnt/research.git && ...
  $ cd ./research
  $ gmy -m
    # = $ r.git-my-repo -m
  $ r.annex-init $(hostname)
  $ gas --all
    # = $ git annex  sync --jobs=4 --no-commit  --not-only-annex --content --all
  $ sync  # push all files from !sshfs cache to server

CLONE:p2p
  $ cd /data
  $ git clone -o fractal --shallow-submodules ssh://lf/data/amv
    # ALT: $ git config -f .gitmodules submodule.<name>.shallow true
    # SRC: https://stackoverflow.com/questions/2144406/how-to-make-shallow-git-submodules
  TARG: $ git remote add neo ssh://neo/data/amv
  BOTH: $ git branch --set-upstream-to=nas/master master
  $ cd ./amv
  $ gmy -m && r.annex-init $(hostname)
  TARG: $ gas --all
  $ gaC

Archive
  $ find . -mindepth 1 -maxdepth 1 -type d -exec sh -c 'f=$0.tar.xz; test -f "$f" || atool -a "$f" -- "$0"' {} \;
    NOTE: remove archives to recreate
  $ atool -a %f.tar.xz %f
  $ par2 create -n1 -r5 %f.tar.xz

Selective add
  $ stat -c'%A %y %n' **/* |LC_ALL=C sort -k2,2 Gv '^d'
  $ stat -c'%y %n' **/* SS G '^201[24]' |cut -c37- X{} git add '{}'

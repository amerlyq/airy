
Manually create w/o !tomb ⌇⡟⡢⢓⢌
  ALSO:(optional): use NBD instead of SSHFS

  [_] WTF: difference between !tomb and manual setup
    GitHub - dyne/Tomb: the Crypto Undertaker ⌇⡟⡢⢜⣤
      https://github.com/dyne/Tomb

  Encrypted remote backups with SSHFS and LUKS ⌇⡟⡢⡱⣷
    https://ruderich.org/simon/notes/encrypted-remote-backups
    Rysiekúr Memesson: "Encrypted remote backups using SSHFS and LUKS: ht…" - Mastodon ⌇⡟⡢⢓⠐
      https://mastodon.social/@rysiek/100265647215971016

  dm-crypt/Device encryption - ArchWiki ⌇⡟⡦⠞⣊
    https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#Loopback_filesystem

  GitHub - fw42/sshluks: LUKS crypto containers over SSHFS on untrusted remote storage ⌇⡟⡢⡼⡗
    https://github.com/fw42/sshluks

  2009-01 Incremental backups to untrusted hosts – Vidar's Blog ⌇⡟⡢⢌⢆
    https://www.vidarholen.net/contents/blog/?p=8
    ::: BAD:PERF: 10x traffic per request
      rsync_upload=120MiB total=40GB partition=400GB
      => ext3_download=540MiB ext3_upload=1000MiB
    [_] CHECK:PERF:OBSOLETE?
      https://www.reddit.com/r/linuxadmin/comments/gzstxj/rsyncnet/fto0ipb/?utm_source=reddit&utm_medium=web2x&context=3
        ~ in recent years sshfs and FUSE in general are much more efficient and performant.
        ~ Copy a 5GB file onto it and only 5GB of network traffic
      [_] SEE: SSHFS performance : linuxquestions ⌇⡟⡢⢥⠱
        https://www.reddit.com/r/linuxquestions/comments/9btk9s/sshfs_performance/

  I need a secure and transparent backup method! / Networking, Server, and Protection / Arch Linux Forums ⌇⡟⡢⢒⢄
    https://bbs.archlinux.org/viewtopic.php?id=109419
      !!! CFG: QoS traffic shaping to reduce network channel saturation for long backup uploads
    ::: NICE:IDEA: two-stage upload
      * keep identical local copy of encrypted container
      * luksopen && mount && !rsync OR !rdiff-backup data into local container
        Using rdiff-backup with SSHFS | Linode ⌇⡟⡢⢟⠛
          https://www.linode.com/docs/security/backups/using-rdiff-backup-with-sshfs/
      * !rsync sparse container to remote as blob
        + NICE: "sync" and "transfer" are separate in time
        + NICE: no need for passphrase anymore at the moment of transfer
        + NICE: economic traffic (rounded on fs block size inside container)
        + IDEA:MAYBE? no need to encrypt traffic by slow SSHFS
          - FAIL: makes possible accumulating versioned changes by @EvilMaid※⡟⡢⢗⠱
        + BET:PERF: !rsync to public NFSv3 LAN share instead of using !rsync--ssh
      * BAD: duplicate data on local PC, especially detrimental for large volumes
      * BAD:SECU: encrypted container still available for local adversary

  Mount 2TB encrypted-container file through SSHFS (performance question) ⌇⡟⡢⢚⠠
    https://www.linuxquestions.org/questions/linux-general-1/mount-2tb-encrypted-container-file-through-sshfs-performance-question-4175453734/
    ::: PERF: !sshfs has performance issues on network/storage server BET:USE: !cifs works more stable (file=2TiB is OK)


========================================
SRC: ※⡟⡢⡱⣷

SETUP
  $ cd /srv/tomb
  $ sshfs -f --debug -o "umask=0077,noexec,no_readahead,allow_root" lc:/me/tomb .
  $ sudo mkdir -m700 . && chown "$USER:$USER" .
  $ truncate -s 1G aura.luks
    # BAD: not supported by SSHFS $ fallocate -l 1G aura.luks
  $ pass generate tomb/aura
  $ pass tomb/aura | sudo cryptsetup -v --type luks2 --key-file - --cipher aes-xts-plain64 --hash sha512 --key-size 512 --pbkdf argon2id --key-slot 0 luksFormat --header ~/tomb/aura.keys -- aura.luks
  $ sudo cryptsetup luksDump --header ~/tomb/aura.keys -- aura.luks
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksOpen --header ~/tomb/aura.keys -- aura.luks tomb
  $ sudo dmsetup table /dev/mapper/tomb
  $ sudo mkfs.ext4 -L tomb -m0 -E lazy_itable_init=0,lazy_journal_init=0 /dev/mapper/tomb
  $ mount /dev/mapper/tomb /mnt
  $ sudo install -m 700 -o $USER -g $USER -d -- /mnt
  $ git clone --bare "file:///aura/aura/todo" /mnt/todo.git
  $ git -C /aura/aura/todo remote set-url origin file:///mnt/todo.git
  $ umount /dev/mapper/tomb
  $ sudo cryptsetup -v close tomb
  $ fusermount -u /srv/tomb

SYNC
  $ sshfs -f --debug -o "umask=0077,noexec,no_readahead,allow_root" lc:/me/tomb /srv/tomb
    # CHECK:(,compression=yes): useless due to sending encrypted data blocks
  $ pass tomb/aura | sudo cryptsetup -v --key-file - luksOpen --header ~/tomb/aura.keys -- /srv/tomb/aura.luks tomb
  $ mount /dev/mapper/tomb /mnt
  $ Gl
  $ ... $ ATT: may error-out due to merge conflict => run rest o commands yourself
    BET: sync tomb first -- and only then use "Gp" for rest of repos
  $ Gp
  $ sync
  # HACK: close tomb loop device, which prevents unmounting
  # losetup -a | cut -d: -f1 | sort -n | tail -1 | xargs -r sudo losetup -d
  $ umount /dev/mapper/tomb
  $ sudo cryptsetup -v close tomb
  $ fusermount -u /srv/tomb

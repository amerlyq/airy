# vim: ft=sh
source ~/.bash/functions.d/system || exit $?

is_vm_exist() { VBoxManage list vms        | grep -q "\<$1\>"      ; return $?; }
is_vm_run()   { VBoxManage list runningvms | grep -q "\<$1\>"      ; return $?; }
has_vm_rule() { VBoxManage showvminfo "$1" | grep -q "Rule.*\<$2\>"; return $?; }
show_vm_rule(){ VBoxManage showvminfo "$1" | grep "Rule.*\<${2}\>" ; return $?; }

add_port_forward() {
    if [ $# -ne 3 ]; then echo "Number of args '$#' != 3"; exit 1; fi
    if has_vm_rule "$1" "$2"; then  # Firstly, delete if exist
        VBoxManage modifyvm "$1" --natpf1 delete "$2"
        show_vm_rule "$1" "$2"
    fi
    if ! has_vm_rule "$1" "$2"; then  # Create if don't exist
        VBoxManage modifyvm "$1" --natpf1 "$2,$3"
        show_vm_rule "$1" "$2"
    fi
    echo "Add $1 port forwarding rule '$2,$3'"
}


do_vm_off() {
if is_vm_exist "${1?No vbox name}" && is_vm_run "$1"; then
    if [ "$2" == "-y" ] || amAskConfirm "Do you want shutdown VM='$1'? (y/n)"
    then VBoxManage controlvm "$1" poweroff; else return 1; fi
fi; }

do_vm_run() { is_vm_exist "${1?No vbox name}" || squit "There no such VM as '$1'"
    do_vm_off "$1" "$2" || squit "Rejected '$1' shutdown"
    if [ "$2" == "-y" ] || amAskConfirm "Launch VM='$1' is your wish? (y/n)"
    then case "$3" in  # ALT:
        -h) VBoxHeadless --startvm "$1" --vrde off & ;;
         *) VBoxManage startvm "$1" ;;
    esac; fi
    VBOX_PID=$!
}


do_vm_keys() { sed 's/\s*#.*$//; /^\s*$/d' | while read line; do
    VBoxManage controlvm "${1?No vbox name}" keyboardputscancode ${line?No input}
done; }

do_vm_socket() { sed 's/\s*#.*$//; /^\s*$/d' | while read line; do
    printf "\n%s\n" "${line?No input}" | nc -U "${1?No vbox serial}"
done; }

do_vm_socket_copy() {
    local serial="${1?No vbox serial}" src="${2?No src path}"
    if [ ! -e "$src" ]; then squit "Error: '$src' doesn't exist!"; fi
    # WARNING: when using netcat to transmit texts directly, don't use '&' on
    # the line ends, as it will consume all next linebreaks and merge text with
    # heredoc marker.
    printf "\nbase64 -d <<-'EOFSERIALFILE' | tar xvfz -\n" | nc -U "$serial"
    { cd "${src%/*}" && tar cfz - "${src##*/}" | base64;
        printf "%s\n"  "EOFSERIALFILE"; } | nc -U "$serial"
}

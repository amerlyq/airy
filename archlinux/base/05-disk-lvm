#!/bin/bash -e
source ~/sys_funcs
is_enabled 'lvm' || exit 0

## Physical disk and LVM volume group name
sd="${SYS_DISK:?}"

## If disk had lvm previously created, remove devices from memory
#:> FIXED: pvcreate cant open exclusively mounted filesystem
dmsetup remove_all
dmsetup ls --tree
# dmsetup remove lvm-...


## Create one partition spanning whole disk
# (you must do it to have space fro grub embedding)
parted -s -a opt $sd mklabel msdos
parted -s -a opt $sd mkpart primary ext2 1MB 100%
parted -s -a opt $sd set 1 lvm on
parted -s -a opt $sd set 1 boot on


## Init disks/partitions
gr=lvm
lsd=${sd}1
lvmdiskscan
## For SSD:  pvcreate --dataalignment 1m $lsd
## Verbose: pvcreate -vvvvv ...
if vgs $gr >/dev/null 2>&1; then vgremove -f $gr; fi
pvcreate -f $lsd   # May use list of disks/partitions
pvdisplay
pvs


## Create group
# You can create more than one volume group if you need to, but then you
# will not have all your storage presented as one disk.
vgcreate $gr $lsd
vgdisplay
vgs


## If there are no logical volumes under /dev/mapper, run next commands to
## bring up the modules and to make volume group available:
# modprobe dm-mod   # dm-mod needs to be loaded before doing anything with LVM
# vgscan            # Scans all disks for volume groups and re-builds caches
# vgchange -ay      # Makes the logical volumes known to the kernel

order="${!SYS_PART[@]}"
for i in ${order:?}
do
    nm="${SYS_PART[$i]:?}"
    sz="${SYS_SIZE[$i]:?}"
    fs="${SYS_FS[$i]:?}"
    dev="${SYS_PREF:?}${nm}"

    [[ "$sz" =~ '%' ]] && lopt="-l $sz" || lopt="-L $sz"
    case "$fs" in swap) lopt+=' -C y' ;; esac
    lvcreate $gr -Wy --yes $lopt -n $nm   # OR: wipefs -a $dev

    case "$fs"
    in  swap) mkswap -f $dev
    ;;  ext?) mkfs.${fs} $dev  # -L Media
    ;; btrfs) mkfs.${fs} -f $dev
    ;;     *) die "Unknown FS" ;; esac
done
lvs


## Layout
lsblk $sd
echo ":: disk lvm"

### Encrypted volume
# cryptsetup -y -v luksFormat /dev/sdaX
# cryptsetup open /dev/sdaX cryptroot
# mkfs -t ext4 /dev/mapper/cryptroot
# mount -t ext4 /dev/mapper/cryptroot /cryptfs
### Convert fs
# umount /dev/mapper/cryptfs
# sudo fsck.ext4 -f /dev/mapper/cryptfs
# sudo btrfs-convert /dev/mapper/cryptfs
### Check the mapping works as intended:
# cryptsetup close cryptroot
# cryptsetup open /dev/sdaX cryptroot
# mount -t ext4 /dev/mapper/cryptroot /mnt
### Force compression on existing files after fs conversion
# sudo btrfs fi defragment -r -v /cryptfs
# sudo btrfs balance start /cryptfs
# auto,noatime,nodiratime
# /dev/mapper/cryptfs /cryptfs        btrfs    compress=lzo,autodefrag        0       0
### Reload new entries in fstab:
# mount -a

INFO
  * keep mbr/gpt under lvm for /boot and /boot/efi
    GPT: for disks/partitions > 2TB, with unlimited primary partitions
    ALSO: dups table and adds checksums for corruptions
      https://askubuntu.com/questions/629470/gpt-vs-mbr-why-not-mbr
    GPT -> MBR bridge
      https://www.anchor.com.au/blog/2012/10/the-difference-between-booting-mbr-and-gpt-with-grub/
  * keep /boot inside root / partition :: snapshot must have synced kernel and lkm modules
  * keep lvm under btrfs for swap partition and to create/change new 'ext4' partition
    https://btrfs.wiki.kernel.org/index.php/FAQ#Btrfs_has_subvolumes.2C_does_this_mean_I_don.27t_need_a_logical_volume_manager_and_I_can_create_a_big_Btrfs_filesystem_on_a_raw_partition.3F
  * use subvolume per /home/user for separate independent timemachines


ALT: layouts
  ~ per each partition use single btrfs root subvol=/
    BAD: If your "/" is also the top level of your filesystem, then you can't atomically roll back to an earlier snapshot
      SEE:(end of paragraph): https://btrfs.wiki.kernel.org/index.php/UseCases#I_want_to_be_able_to_do_rollbacks_with_Btrfs
  ~ single partition with subvolumes :: root ++ home ++ work subvolumes
  ~ two partitions (system|data) :: root ++ home :: media ++ work


MBR -- LUKS -- LVM -- BTRFS -- SUBVOL -- Snapper
  sda             8:16   0 931.5G  0 disk
  ├─sda1          8:17   0     2G  0 part  /mnt/boot    # EXPL: outside of luks to be able to boot in UEFI
  ├─sda2          8:18   0     1K  0 part
  └─sda5          8:21   0 929.5G  0 part
    └─luks      254:6    0 929.5G  0 crypt
      ├─ws-swap 254:7    0     4G  0 lvm  [SWAP]        # SECU: must be encrypted, NOTE: position beg/end doesn't matter: each manufacturer may do things differently
      ├─ws-root 254:8    0    40G  0 lvm                # EXPL: sep root to reinstall system if snapshots+quota will break/lock-down btrfs some day
        ├─@                               /mnt
          ├─/boot/grub                    /mnt/boot/grub  # sep, keep GRUB config unchanged when boot into snapshots
          ├─/var/log                      /mnt/var/log    # HACK:(systemd journal): mark with "+C/nodatacow"
          └─/var/cache                    /mnt/var/cache  # sep, ./pacman/pkg: ext4 shared between chroots
           # @boot_grub -- impossible to mount by GRUB bootloader
           # @var_log -- unmountable because of systemd -- NEED shutdown hook in mkinitcpio ALT: direct subvolume, manually move on restoring from snapshot
           # @var_cache -- no sense to make separate and mount afterwards -- you still need manually move other subvolumes
        └─@snapshots                      /mnt/.snapshots
      ├─ws-pkgs 254:8    0    20G  0 lvm  /mnt/var/cache/pacman/pkg
      ├─ws-user 254:9    0    40G  0 lvm                  # EXPL: sep snapshots per each user
        ├─@                               /mnt/home/user
        ├─@snapshots                      /mnt/home/user/.snapshots
        ├─@cabal                          /mnt/home/user/.cabal/lib     # ~2.1GB, recoverable builds of haskell libs
        ├─@pacaur                         /mnt/home/user/.cache/pacaur  # ~5.6GB, recoverable builds of AUR pkgs
        ├─@sdk                            /mnt/home/user/sdk            # ~3.3GB, cloned master repos from others
      ├─ws-data 254:10   0   200G  0 lvm  /mnt/data       # shared data :: group=users
        /data/dld  # use directly in all prgs instead of /home/user/Downloads
        /data/vm   # if btrfs -- chattr +C /data/vm ALT: individual subvol when fixed "nodatacow" per subvol
      └─ws-work 254:11   0   625G  0 lvm  /mnt/work


SubLayout for each subvolume
  * toplevel -- only contains main dirs (tracked by 'snapper') :: /root, /home, /work, /media
  * main dirs -- contain mandatory subvolumes /@ and /@snapshots
    └─root
      ├─@           | mount /root/@ /mnt
      ├─@snapshots  | mount /root/@snapshots /mnt/.snapshots
      ├─@var_pkg    | mount /root/@pkg_cache /mnt/var/cache/pacman/pkg
      └─@...        | other excluded+mounted subvolumes (specific for this mountpoint)
  * /@ -- completely flat w/o any subvolumes inside
    => otherwise on restore you must clone+delete each of nested subvolumes one by one
      http://www.spinics.net/lists/linux-btrfs/msg54931.html
    OR: stick to default way of "Snapper" -- never replace /root and directly boot into snapshot
      BAD:(incongruent): /root itself can't be deleted -- as it has nested subvolume /root/.snapshots
        => /root subvolume becomes abandoned after first restoration of system
        => on other hand you will clearly see that system was restored
        TUT: https://bbs.archlinux.org/viewtopic.php?id=194491
        OFF: https://github.com/openSUSE/snapper/issues/159
      NOTE: automatic clean-up of rollback snapshots BUT beside very first one /root
        2017-08-13 [X] http://snapper.io/2017/05/10/automatic-cleanup-after-rollback.html
      2017-08-12 [X] /.snapshots may actually be movable as whole -- only its subvolumes are "ro-" but not itself
        => may actually be true, but requires excessive manual actions (which can be done by /etc/fstab)
      2017-08-12 [X] /.snapshots is dir or subvolume itself ? ::: subvolume (because it's mountable)
      2017-08-12 [X] /.snapshots on rollback moved or not ? ::: not moved -- "rw-" created directly besides "ro-"
        => so set-default boots into "rw-", mounting snapshots from old location into /.snapshots/7/snapshot/.snapshots
  * snapshots -- moved outside of /@, otherwise you can't:
    => ... replace /@ by "ro-" snapshot from inside it
    => ... delete /@ at all -- having nested /.snapshots subvolume


Exclude from snapshotting by creating subvolumes
  + /vm -- nodatacow -- use VBox built-in snapshotting instead of btrfs one
  + /var/log -- big ~4GB, binary *.journal -- always keep logs as-is for troubleshooting
    [_] CHECK: problems with systemd journaling when unmounting on shutdown
    USE: ext4/nodatacow -- as random writes will slow-down the whole system
  + /var/cache/pacman/pkg -- no sense to snapshot -- big and stale file list
  + /tmp -- exlude in case of large files written to /tmp may become snapshotted
    [_] CHECK: use RAM-exclusive /tmp if possible ?
      BAD: low RAM when building firmware -- need disk-backed /tmp
  - /chroot -- snapshot /chroot together with /root for tight versioning
  - /var -- sep dir only to be able to remount /usr in "ro-"
    => inseparable as whole == contains multiple files tightly synced with /usr
    ! can't be unmounted on shutdown due to systemd journaling to /var/log
  - /var/abs -- restorable db, no need to snapshot (don't exist anymore together with |abs| package)
  ~ /opt -- only if you want to keep corporate software unaffected on rollback
  [_] ALSO https://doc.opensuse.org/documentation/leap/reference/html/book.opensuse.reference/cha.snapper.html#snapper.dir-excludes


TODO
  [_] READ: https://gist.github.com/broedli/4f401e0097f185ba34eb#1-setup-ssh
    << it's bad overall, but has some ideas (E.G. grup-btrfs)
  [_] setup config for quota
    http://snapper.io/2016/05/18/space-aware-cleanup.html
  [_] USE: for install http://www.funtoo.org/BTRFS_Fun
  [_] USE:(config from end-of-article): http://www.nrtm.org/index.php/2012/03/13/the-joys-of-btrfs-and-opensuse-or-no-space-left-on-device/comment-page-1/
  2017-08-12 [X] https://ramsdenj.com/2016/04/05/using-btrfs-for-easy-backup-and-rollback.html


Install
  $# mkfs.btrfs -L LABEL /dev/sdx  # OR: $ btrfs fi label /dev/sdx
  $# btrfs subvolume list /
  $# mount -o autodefrag,compress=no /dev/mapper/ws-home /mnt/home


Snapper
  Exclude snapshots from indexing
    $ v /etc/updatedb.conf
    # CHG: PRUNENAMES = ".snapshots"
  Delete big files through all snapshots
    https://blog.pdark.de/2014/02/16/deleting-files-from-snapper/
    $ btrfs subvolume snapshot snap snap.rw
    $ rm -rf snap.rw/path/to/file
    $ btrfs subvolume delete snap
    $ btrfs subvolume snapshot -r snap.rw snap
    $ btrfs subvolume delete snap.rw
  Find all CoW extents -- verify if file is reflink to another
    https://unix.stackexchange.com/questions/263309/how-to-verify-a-file-copy-is-reflink-cow
    https://unix.stackexchange.com/questions/128055/how-to-find-data-copies-of-a-given-file-in-btrfs-filesystem
    rmlint: https://github.com/sahib/rmlint/issues/132
  NOTE: if disk full -> can't create ./info.xml -> snapper won't track that snapshot
    https://github.com/openSUSE/snapper/issues/24
    -> delete manually $ sudo btrfs subvolume delete /.snapshots/1772/snapshot
  Delete old snapshots (when disk is full)
    $ snapper -c root list
    $ snapper -c root delete 1
    $ snapper ls
    $ snapper delete --sync [id]
    $ snapper -c root set-config "NUMBER_LIMIT=2"
    $ snapper -c root set-config "NUMBER_LIMIT_IMPORTANT=2"
  Revert single file from post(5) to pre(2)
    $ snapper -v undochange 2..5 /etc/sysconfig/apache2

  home_$user main dir:
    $ btrfs filesystem df / &> /dev/null  # sanity check if btrfs
    $ btrfs subvol create /home/$user
    $ snapper -c home_$user create-config /home/$user
    $ sed -i -e "s/ALLOW_USERS=\"\"/ALLOW_USERS=\"$user\"/g" ${SNAPPERCFGDIR}/home_$user
    # NEED:?
    $ chown $user.$group /home/$user
    $ chmod 755 /home/$user/.snapshots


Boot into snapshot
  grub-btrfs
    https://github.com/Antynea/grub-btrfs
  uefi
    ??? limited support from community
  mkinitcpio -- after any bootloader
    https://github.com/anthonyrisinger/mkinitcpio-btrfs
  NOT: systemd-boot -- won't fix, supports only FAT
    https://github.com/systemd/systemd/issues/2055

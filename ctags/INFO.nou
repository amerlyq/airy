REF
  http://charlesmartinreid.com/wiki/Ctags
  http://design.liberta.co.za/articles/code-completion-intellisense-for-cpp-in-vim-with-omnicppcomplete/
  http://stackoverflow.com/questions/2825464/generating-a-reasonable-ctags-database-for-boost

Tools to create tag files for diff langs
  http://vim.wikia.com/wiki/Browsing_programs_with_tags
  http://www.thegeekstuff.com/2009/04/ctags-taglist-vi-vim-editor-as-sourece-code-browser/

%%% universal-ctags
|aur/universal-ctags-git|

BET: maintained, rewritten parser, more langs
  https://github.com/universal-ctags/ctags
  https://github.com/universal-ctags/ctags-xparsers

REF
  http://docs.ctags.io/en/latest/news.html


%%% ctags

% Large codebase % (kernel, boost)
  * prefer default "-f" over "-x" human-readable format
    => use "--filter=yes" for pipes processing
  * remove excessive extended fields to reduce db size
    ~ depends on usecase
  * use relative symlinked path to codebase
  * prefer "-n|--excmd=number" for readonly (rarely changed) codebase

  $ ctags -R --excmd=number --c++-kinds=+p --fields=+iaS --extra=+q -f ~/tmp/vim/uitags /usr/include
  $ apt-file list boost | grep -E -o '/usr/include/.*\.(h|hpp)' | grep -v '/usr/include/boost/typeof/' > ~/.vim/tags/boost-filelist
  $ ctags --sort=foldcase --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.vim/tags/boost -L ~/.vim/tags/boost-filelist
  # ctags-exuberant --verbose --recurse --excmd=number --sort=foldcase --tag-relative --fields=+nS --exclude=@"$EFL"

% LIOR
| -I macro[+|=chg]   | skipping/replacing identifiers
| -n|--excmd=number  | best for readonly codebase (kernel, glibc, boost)
|    --sort=foldcase | ignore case when sorting
|    --tag-relative  | src path relative to 'tags' file
| --language-force=c | find files -- force type to process wrong extensions
| ________________  /
| --extra=f | tag+ | each src basename //example.c pointing to line :1
|        =q | tag+ | 'class::member' beside simply 'member' BUT twice the size of tags db
| ________________ |
| --fields=afkmsSt | reasonable maxi-set of extension fields
|         =+Kz     | too verbose and only increase db size in vain
|         =+iln    | needless info, especially +n

Format
  STD(-f) total db
   || tag_name <Tab> file_name <Tab> ex_cmd;" <Tab> extension_fields ||
    $ ... | ctags -L- -f /my/tags $ BET: no tempfiles
    $ ... | ctags -L- -f- | ...   $ BAD: tempfile (single)
  STD(--filter) db per file
    $ ... | ctags --filter=yes --filter-terminator=$'===EOT===\n' | ...
      !! BAD: multiple tempfiles (per each input file) $ r.watch-tmp
        NOTE:(-u|--sort=no): no effect on number of tempfiles
      + syms sorted per file
      + marker after each file syms
      * ignores '-f/-o/-L-'
  BAD(-x) space separated fields => indistinguishable from path with spaces
   || tag  kind  lnum  file  srcline ||
    $ ... | ctags -xL- | ... $ BAD: tempfile (single)
      * ignores '-f/--filter'

Kinds
$ ctags --c++-kinds=cdefglmnpstuvx
  !!! WARN !!!
    ! global-scope for anything in *.h (even with static)
    ! any global (v/x) inside namespaces treated as _members_
  Functions
    (p) only prototypes w/o body -- file-scope for all in *.c, *.cpp
      + member-functions declarations, defined outside the class
      !! ignores templated funcs defined in headers in-place
    (f) any function / method
      = file-scope for static funcs in *.c, *.cpp, methods defined inside class/struct
      = global for methods defined outside of class E.G. (int A::f(){})
  Data
    (v) global var (or extern var with value) -- BUT not in namespace
    (m) data members only -- vars defined inside class/struct/union
    (e) values inside enum { 'VAL1', ... }
    (x) external data w/o value -- global scope (extern int v;)
      ? WTF forward variable declarations
    (l) local vars (unreliable)
  Types
    (d) #define MD / MF() -- file-scope
    (c/g/n) class/enum/namespace itself  ... 'Name' { ... }
    (s/u) both 'struct/union ... {}' and 'typedef struct/union {}'
    (t) only typedef -- duplicated entry for composite 'typedef struct/union ...'


INFO
  BAD: output to /dev/stdout always creates tempfiles $ r.watch-tmp
  WARN: templated/static functions treated as regular ones
    (<template T> static int f() {}) => (int f() {})
  ATT: verbatim path format for '-L'
    * !unsupported! escaped spaces by backslash
    * !unsupported! single/double quoted paths
      => can't use the same *.files with 'cscope'
  NOTE: for C++11/14/17 use 'universal-ctags', as 'ctags' is no more maintained


%%% cscope
REF
  2017-07-13 [X] TUT http://cscope.sourceforge.net/large_projects.html
  http://odellconnie.blogspot.com/2012/07/free-c-software-call-graph-generators.html
  https://en.wikipedia.org/wiki/Call_graph
  http://www.toolchainguru.com/2011/03/c-calltrees-in-bash-revisited.html
  https://sites.google.com/site/vimcctree/ccglue
  http://stackoverflow.com/questions/3828157/how-to-use-cscope

INFO
  OBSOLETE: $ export CSCOPE_DB=/my/db/cscope.out
    ::: USE:(-qf /my/db/cscope.out) +++ has refs to cscope.{in,po}.out
  [_] TRY: use only 'cscope' => to retrieve syms per api file instead of 'ctags'
  [_] FIND: how looks like paths with spaces in results of $ cscope -qdL3 'function'
    = does them have quotes around path ?
    ! necessary to choose column by awk


%%% gtags
  $ gtags
  [_] THINK:SEE: GNU Global -- instead of ctags?
    https://www.gnu.org/software/global/

#!/bin/bash -e
source ~/.shell/profile

# ALT: NOTE failed to setup schroot.conf to export only choosen env variables.
# BAD: can't exit on error in awk (try run r.chroot inside r.chroot)
# BUG: r.chroot non-interactive uses non-login 'bash' -> my r.* links absent in $PATH

# USE: 'r.chroot 1' -- to load second chroot from list
case "$1" in [0-9]) index=$1; shift ;; esac
prf=${CURR_CHROOTS[${index:-0}]:?}
chroot=/chroot/$prf

# EXPL: Derive mounted/overrided PWD for chroot
dir=$PWD
[[ ${dir#$chroot} == $dir ]] || dir=${dir#$chroot}
unset ismounted && while read line; do
    [[ ${dir#$line} == $dir ]] || ismounted=1
done < <(awk '/^\//{print$1}' /etc/schroot/default/fstab)
if ((!ismounted)) && [[ ! -d ${chroot}${dir} ]]; then
  [[ -d /work ]] && dir=/work || dir=$HOME
fi

# EXPL: filter-out env vars before command
# USAGE: $ r.chroot A=4 B=some <cmd>
# ALT: use eval in: $ bash -ic 'eval "$@"' "$0" "$@"
_env=()
for arg in "$@"; do
  [[ $arg =~ ^[[:alpha:]_][[:alnum:]_]*= ]] || break
  _env+=( "$arg" )
  shift
done

# NOTE: source ~/.bash_profile by forcing interactive shell
# THINK: using tmux? how to be with nested sessions?
# ATT: -l is not enough to activate SHELLRC_EVAL -- use '-i'
# ATT: -l must be used anyway -- to compose PATH VAR
# MAYBE:(exec) will be excessive limitation for cmdline?
[[ -x ${chroot}$SHELL ]] || SHELL=/bin/bash
((!$#)) || set -- -c 'exec "$@"' "$0" "$@"

# EXPL Export SHELLRC_EVAL to source env in each spawned shell from ranger
# WARN: DISPLAY="$DISPLAY" -- can't umount schroot
# FIXED:($LANG): for schroot into old ubuntu
exec schroot -c "$prf" -d "$dir" -- env \
  LANG="${LANG:-en_US.UTF-8}" \
  LC_NUMERIC="${LC_NUMERIC:-${LANG-}}" \
  SHELLRC_EVAL="${CURR_CHROOT_EVAL}" \
  "${_env[@]}" \
  "$SHELL" -li "$@"


# ALT:DEPRECATED:
# BUG: using 2>&1 don't exit interactive shell
#   $ r.chroot pwd |& cat
#   $ r.chroot pwd 2>/dev/null
# BUT: what tot do with --rcfile?
# exec schroot -c "$prf" -d "$dir" -- bash --rcfile <(cat - <<EOT
# export DISPLAY=$DISPLAY SHELLRC_EVAL="${CURR_CHROOT_EVAL}"
# source ~/.bash_profile
# ${@+trap 'exit 1' INT HUP QUIT TERM; "$@"; exit}
# EOT
# )

# NOTE: vars from rcfile aren't inherited for -c!
# ${@+-c 'trap "exit 1" INT HUP QUIT TERM; "$@"' "$0" "$@"}
